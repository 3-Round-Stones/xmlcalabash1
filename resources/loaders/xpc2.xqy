xquery version "1.0" encoding "UTF-8";

(: This file was generated on Wed Jul 4, 2012 12:34 (UTC-05) by REx v5.16
   which is Copyright (c) 1979-2012 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: xpc2.ebnf -xquery -tree -smaller -backtrack :)

(: Lightly edited by ndw@nwalsh.com to make it a main module. :)

(:~
 : The parser that was generated for the xpc2 grammar.
 :)
declare namespace p="xpc2";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  42, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 4, 2, 2,
  5, 6, 7, 2, 2, 8, 9, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 2, 2, 13, 14, 2, 2, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 2, 2, 2, 15, 2, 16, 17, 18, 19, 20,
  21, 22, 23, 24, 15, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 15, 40, 2, 41, 2, 2
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 414, 322, 293, 339,
  355, 391, 391, 391, 383, 323, 315, 323, 315, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
  323, 323, 408, 408, 408, 408, 408, 408, 408, 308, 323, 323, 323, 323, 323, 323, 323, 323, 369, 391, 391, 392, 390,
  391, 391, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 391, 391, 391,
  391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  391, 391, 391, 391, 391, 391, 322, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
  323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 391, 42, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 4, 2, 2, 5, 6, 7, 2, 2, 8, 9, 10, 11, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 2, 2, 2, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 15, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 15, 40, 2, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 2, 2, 2, 2, 2, 2, 2, 10, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12,
  2, 2, 13, 14, 2
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 63743, 64975, 65007, 65533, 1114111, 2, 15, 2, 15, 2
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 517, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2069, 22, 23, 24, 25, 26, 27, 28, 2077, 30,
  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1275, 1266, 1268, 1269, 1280, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1937, 1941, 1261, 1291, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1273, 1747, 1261, 2081, 1700, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1624, 2359, 2424, 1941, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1954, 1695, 1699, 1261, 1279, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1262, 1261, 1286, 1376, 1290, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 2190, 2052, 1297, 1309,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 2310, 1316, 2067, 1369, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1698,
  1261, 1320, 1355, 1952, 2028, 2155, 1952, 1326, 1356, 1416, 2469, 1330, 1404, 1920, 1423, 2207, 1332, 1336, 2033,
  2451, 1342, 2155, 2155, 2155, 1348, 1898, 1497, 1885, 1939, 1261, 2406, 2503, 1910, 1354, 2155, 1910, 1354, 2155,
  2155, 2016, 2155, 2465, 1355, 2155, 2258, 2155, 2026, 2155, 2032, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2074,
  1887, 1281, 2415, 1696, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1282, 1261, 1360, 1364, 1368, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 2083, 1312, 1373, 1380, 1281, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1938, 1942, 2405, 2192, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1886, 1280, 1961, 1439, 2470, 1935, 2505, 2155, 1935, 2505, 2155, 1910, 1355, 2155, 1959, 2155,
  2465, 1355, 2429, 1355, 2092, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 1261, 1779, 2242, 1387, 1391, 1395,
  2469, 1792, 2383, 1468, 2156, 2155, 1401, 2287, 1411, 1726, 1420, 1429, 1584, 1927, 2155, 1435, 1443, 1844, 2506,
  2155, 1601, 2155, 1448, 1622, 1696, 2162, 2430, 1322, 2429, 1646, 2228, 2429, 1646, 2155, 2155, 2467, 2155, 2155,
  1460, 2155, 1466, 1350, 2440, 2155, 2278, 1472, 1478, 2155, 2155, 2155, 2155, 2155, 2466, 1483, 1941, 2386, 1291,
  2505, 1303, 2351, 1489, 2484, 1499, 2155, 1794, 1804, 1490, 2104, 1652, 1933, 1494, 1479, 2260, 2030, 2155, 2155,
  2155, 1462, 1918, 2111, 2155, 1972, 2486, 1747, 1503, 1506, 1512, 1934, 1414, 2155, 1934, 1961, 1516, 1522, 1354,
  2155, 1528, 2505, 2155, 2105, 2155, 1533, 2429, 2155, 2155, 2155, 2155, 2040, 2155, 1569, 2155, 1905, 1292, 1539,
  1543, 1485, 1451, 2377, 1550, 1556, 1560, 1564, 1568, 1573, 2128, 2220, 1577, 1581, 1529, 2267, 2294, 1590, 1594,
  1598, 2332, 1607, 1611, 1615, 1619, 2348, 2374, 1695, 1628, 1635, 2174, 1639, 1645, 1651, 2155, 1645, 2155, 2155,
  2466, 2470, 2155, 1656, 2155, 1910, 2470, 1933, 2470, 2034, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2465, 1261,
  1940, 1354, 1662, 2504, 1904, 1355, 2155, 1904, 1355, 2155, 2429, 1647, 2155, 2466, 2155, 1668, 2259, 2155, 2027,
  2029, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2095, 1953, 1748, 1943, 1674, 1827, 1933, 2435, 2155, 1933, 2435,
  2449, 2155, 2458, 2155, 2429, 1961, 2155, 2104, 2155, 2300, 1683, 2094, 2155, 2155, 2155, 2155, 1688, 1992, 2155,
  1693, 1777, 1293, 1705, 1546, 1709, 1713, 2155, 1603, 1397, 2155, 2280, 1718, 2505, 2155, 1724, 2478, 2073, 2505,
  1910, 2505, 1524, 1730, 2155, 1735, 2155, 2155, 2155, 1739, 1933, 1261, 1698, 1647, 1744, 1355, 1952, 2028, 1752,
  1952, 2028, 1535, 2465, 2469, 2155, 2257, 2155, 2155, 2469, 2155, 2442, 2033, 2155, 2155, 1758, 2155, 1552, 2155,
  2155, 2155, 1885, 1939, 1701, 1763, 2312, 1910, 1305, 1769, 1774, 1354, 2155, 1784, 1789, 2130, 2353, 1677, 2155,
  1798, 2155, 1802, 1808, 2032, 1679, 1813, 2155, 1817, 2155, 1770, 2155, 1952, 1887, 1281, 1822, 1826, 2155, 1832,
  1444, 2155, 1836, 2155, 2155, 1853, 2155, 1843, 1848, 2155, 2466, 2155, 2073, 1857, 1862, 2471, 1868, 2155, 2155,
  2155, 1874, 1785, 1670, 1508, 1780, 1631, 1878, 1658, 1884, 2470, 2481, 1891, 2199, 1897, 1933, 1961, 1809, 1911,
  2155, 2429, 1902, 1909, 1961, 2057, 2155, 2155, 1818, 1915, 1924, 1931, 2155, 1947, 1936, 1697, 1646, 1974, 2176,
  1951, 1990, 2155, 1958, 2017, 2155, 2155, 2468, 2155, 1933, 2028, 1759, 1965, 2155, 2441, 2155, 1969, 2155, 2155,
  2155, 2155, 2155, 1754, 2155, 1978, 2006, 1987, 1996, 2311, 1425, 2000, 2155, 2010, 1383, 1870, 2201, 2015, 2319,
  1858, 1454, 2339, 2021, 2155, 2025, 2155, 2031, 2155, 2039, 2155, 2117, 2155, 2044, 2155, 2073, 1886, 1280, 1961,
  1439, 2470, 2050, 2056, 2155, 1935, 2505, 2155, 1910, 1355, 2155, 1959, 2155, 2465, 1355, 2429, 2460, 2061, 2071,
  2155, 2155, 2155, 2155, 2155, 2155, 2155, 1261, 1779, 1893, 2078, 2087, 2064, 2099, 1983, 2103, 2469, 2090, 2109,
  1720, 2115, 1518, 2121, 2155, 1960, 1740, 2125, 2134, 1431, 2140, 1864, 2146, 2155, 2150, 2154, 2011, 1935, 2160,
  2167, 2171, 1322, 2180, 2163, 2184, 2429, 1646, 2155, 1474, 2196, 1689, 2155, 2259, 2155, 2205, 1731, 2440, 2211,
  2035, 2321, 2136, 2155, 2142, 2217, 2226, 2232, 2466, 1937, 1941, 2236, 1765, 1839, 2240, 1344, 1851, 2422, 1641,
  2155, 1338, 1407, 2213, 2246, 2250, 2256, 2264, 2271, 2028, 2275, 2155, 1456, 2341, 2284, 2291, 2155, 2155, 2298,
  1261, 1747, 2305, 2308, 1828, 2187, 1981, 2155, 2003, 2316, 2155, 2155, 1664, 2155, 2073, 2505, 1684, 2105, 2155,
  2301, 2429, 2325, 2222, 2329, 2336, 2155, 2345, 2155, 2155, 1694, 2357, 2363, 2367, 1880, 2465, 1714, 2155, 2465,
  1714, 2155, 2155, 1719, 2155, 2155, 2469, 2155, 1959, 2155, 1926, 2155, 2371, 2155, 2155, 2155, 2155, 2155, 2155,
  2155, 1934, 1695, 1699, 2390, 1321, 2155, 2394, 2155, 1586, 1645, 2155, 2155, 2398, 2470, 2155, 2258, 2155, 1910,
  2470, 1933, 2470, 2034, 2155, 2252, 2155, 2155, 2155, 2155, 2155, 2465, 1261, 1940, 2410, 2413, 2419, 1904, 1355,
  2155, 1904, 1355, 2155, 2429, 1300, 2155, 2466, 2155, 2155, 2259, 2155, 2027, 2029, 2155, 2155, 2155, 2155, 2155,
  2046, 2155, 2428, 1953, 1748, 2434, 1437, 1827, 1933, 2435, 2155, 2439, 2435, 2155, 2155, 2380, 2155, 2429, 1961,
  2155, 2446, 2455, 2300, 2464, 2475, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 1904, 2490, 2492, 2496, 1369, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 2500, 2510, 2514, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 2403, 2401, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
  1261, 1261, 1261, 1261, 1261, 1261, 1275, 3577, 3577, 3577, 3577, 2655, 2525, 2525, 2523, 2525, 2525, 2519, 3575,
  3577, 3906, 3577, 3577, 2518, 2525, 3923, 3577, 3568, 3577, 3577, 3577, 2667, 2655, 2656, 2655, 2531, 2529, 3574,
  3577, 3577, 3571, 3577, 2941, 3499, 3502, 2537, 3577, 2533, 3622, 3622, 2545, 3577, 3577, 2781, 3622, 3501, 3577,
  3573, 3577, 2625, 2646, 2634, 2552, 3571, 2551, 2549, 3577, 3575, 3577, 3568, 3577, 3622, 3925, 3622, 3622, 2931,
  2571, 2576, 3622, 3622, 2592, 3622, 3625, 3452, 3622, 3622, 2714, 3577, 2603, 3525, 3622, 3622, 2755, 3622, 2609,
  3653, 3622, 3622, 2802, 3622, 3577, 3577, 3622, 3622, 3622, 2557, 3571, 2668, 2620, 3902, 2667, 2621, 2666, 2666,
  3904, 3576, 3577, 3569, 3577, 2638, 2645, 2643, 3577, 2654, 2654, 2654, 2648, 2639, 3575, 3577, 2744, 3577, 3529,
  2660, 3519, 3497, 2664, 2672, 3619, 3622, 3849, 2679, 2593, 3624, 3577, 3741, 3620, 2682, 3187, 2709, 3622, 2582,
  3625, 3619, 3745, 3622, 3136, 3024, 2727, 3622, 3577, 2882, 3622, 3622, 3095, 2565, 2733, 3622, 2738, 3622, 2587,
  3622, 3622, 2696, 3622, 3623, 2742, 3621, 3622, 3651, 3622, 3621, 2754, 3622, 3622, 2890, 3577, 3577, 3570, 2759,
  3622, 3622, 3622, 2770, 2774, 3622, 2779, 3622, 2588, 2912, 3624, 3552, 3622, 3622, 3622, 3781, 3625, 2790, 3622,
  3622, 2964, 3622, 2796, 3622, 3577, 3620, 2694, 2925, 3622, 3271, 3622, 3622, 2989, 3622, 2808, 3622, 3622, 3622,
  2830, 2553, 3577, 3577, 3569, 3339, 2599, 2775, 3622, 3622, 3622, 2839, 2540, 3622, 2844, 3622, 2614, 3622, 3622,
  2823, 3622, 3626, 3577, 2873, 2874, 2878, 3577, 3577, 2869, 3577, 3570, 3288, 3622, 2953, 3622, 3726, 3622, 3622,
  3211, 3618, 3622, 3782, 3622, 3622, 3227, 3622, 3033, 3622, 3623, 3577, 2561, 2888, 3577, 3622, 3622, 3250, 3824,
  3571, 3577, 2902, 2628, 2908, 2908, 2630, 3576, 3130, 3569, 3619, 3322, 2804, 3622, 3622, 3255, 3622, 2835, 2929,
  2935, 3624, 3676, 2940, 3620, 2884, 2945, 3622, 2950, 2959, 2968, 3622, 3622, 3622, 2896, 3000, 3625, 3577, 2974,
  2993, 3620, 3777, 2999, 3622, 3235, 3004, 3622, 2748, 3622, 3622, 2857, 2862, 3622, 3251, 3037, 3049, 3882, 3058,
  3369, 3063, 3068, 3622, 3413, 3622, 2769, 3622, 3622, 2955, 3622, 3083, 3622, 3088, 3543, 3622, 3895, 3432, 3093,
  3876, 3622, 3830, 3659, 3622, 3731, 3099, 3622, 2785, 3577, 3577, 2674, 3577, 2903, 3570, 3118, 3577, 3043, 3385,
  3385, 2904, 3123, 3123, 3124, 3622, 3699, 3622, 3622, 3324, 3622, 3623, 3577, 3577, 3619, 3622, 3622, 3052, 3622,
  3622, 3622, 3089, 3134, 3140, 3619, 3622, 2616, 3622, 3622, 3574, 3577, 3577, 3005, 3622, 3622, 3241, 3622, 3622,
  3379, 3577, 3151, 3151, 3155, 3577, 3064, 3622, 3622, 3472, 3622, 3171, 3622, 3622, 3622, 3109, 3176, 3622, 3622,
  3622, 3161, 3181, 3622, 3577, 3577, 3577, 3570, 3577, 3570, 3577, 3577, 3577, 3261, 3191, 3197, 3197, 3193, 2605,
  3201, 2690, 3205, 3040, 3577, 3577, 3620, 3622, 3215, 3622, 3625, 3577, 3621, 3670, 3622, 3478, 3620, 3622, 3229,
  3622, 3375, 3622, 3622, 3622, 3177, 3622, 3401, 3622, 3233, 3239, 3622, 3622, 3622, 3223, 3623, 3575, 3577, 3568,
  3577, 3568, 3577, 3568, 3622, 3245, 3622, 3622, 3470, 3622, 3363, 3622, 3622, 3622, 3257, 3261, 3261, 3574, 3577,
  3167, 3681, 3265, 3622, 3622, 3622, 3319, 3270, 3275, 2946, 3577, 3186, 3577, 3571, 3577, 3571, 2868, 3281, 3622,
  3622, 3622, 3373, 3623, 3577, 3287, 3622, 2825, 3622, 3622, 2829, 3577, 3622, 3625, 3303, 3309, 3314, 3624, 3619,
  3622, 2834, 3622, 3283, 3622, 3622, 3622, 3405, 3622, 3315, 3622, 3396, 3427, 3622, 3622, 3622, 3426, 3328, 3329,
  3329, 3333, 2995, 3577, 3570, 3620, 3622, 3622, 3625, 3337, 3577, 2792, 2543, 3577, 3941, 3621, 2583, 3622, 2729,
  3343, 3622, 3622, 3622, 3537, 3623, 3577, 3599, 3622, 2846, 3622, 3622, 3861, 3577, 3246, 3622, 3622, 3622, 3547,
  3622, 3347, 3622, 3622, 3531, 3622, 3622, 3356, 3622, 3622, 3535, 3622, 3622, 3362, 3622, 3367, 3045, 3576, 3577,
  3569, 3619, 3622, 2750, 3624, 3577, 3577, 3577, 3568, 3577, 2913, 3624, 3577, 3577, 3350, 3593, 3400, 3622, 3622,
  3622, 3548, 3417, 3621, 3622, 3622, 3577, 3577, 2786, 3172, 3622, 3622, 3622, 3577, 3411, 3622, 3431, 3436, 3622,
  2855, 3622, 3622, 3069, 3622, 3622, 3441, 3622, 3622, 3577, 3621, 3622, 3622, 3442, 3622, 3622, 3622, 3625, 3577,
  3577, 3577, 3569, 3577, 3569, 3577, 3577, 3577, 3150, 3622, 3563, 3622, 3809, 3446, 3622, 3623, 3577, 3577, 3577,
  3503, 3456, 3622, 3623, 3577, 3621, 3622, 3622, 3461, 3577, 3620, 2705, 2560, 3622, 3465, 3622, 2861, 3622, 3623,
  2892, 3577, 3751, 3624, 3476, 3577, 3305, 3622, 3622, 3893, 2840, 3488, 3578, 2919, 3577, 3451, 3622, 3622, 3622,
  3705, 3507, 3507, 3507, 3574, 3119, 3511, 3577, 3622, 2936, 3604, 3577, 3482, 3569, 3477, 3523, 3622, 3622, 3622,
  3583, 3855, 3623, 3577, 3619, 3622, 2898, 3557, 3622, 3625, 3619, 3277, 3622, 3624, 3619, 3622, 3622, 3622, 2559,
  3622, 3622, 3622, 2560, 3622, 3622, 3310, 3622, 3622, 3622, 3614, 3622, 3562, 3622, 3622, 3622, 3890, 3622, 3567,
  3577, 3577, 3499, 3499, 3582, 3622, 3622, 3622, 3621, 3622, 3266, 3623, 3622, 2962, 3603, 3577, 3491, 3577, 3572,
  3622, 3381, 3622, 3622, 3623, 3577, 3514, 3593, 3352, 3576, 3577, 3494, 3577, 3577, 2647, 3577, 3569, 3597, 2572,
  3622, 2975, 3622, 3622, 3623, 3622, 3622, 3622, 3145, 3484, 3620, 3218, 2734, 2851, 3622, 3624, 3577, 3622, 3622,
  3622, 3608, 3622, 3622, 3665, 3466, 3622, 3612, 3622, 3622, 3694, 3622, 3620, 3630, 3635, 3074, 3639, 3577, 3643,
  3622, 2979, 3622, 3622, 3292, 3297, 3622, 3647, 3622, 3622, 3703, 3709, 3622, 3657, 3622, 3622, 3714, 3622, 3663,
  3622, 3622, 3589, 3669, 3622, 3622, 3457, 3839, 3622, 3622, 3622, 3622, 2700, 3577, 3674, 3570, 3577, 3577, 3619,
  2610, 3680, 3577, 3577, 3685, 3688, 3688, 3689, 3575, 3128, 3568, 3577, 2578, 2721, 3693, 3622, 3622, 2765, 3622,
  3837, 3698, 3622, 2982, 3625, 3577, 3502, 3577, 3577, 2652, 3577, 3622, 3624, 3916, 3620, 3395, 3622, 3622, 3541,
  3622, 3100, 3622, 3577, 3620, 3114, 3622, 3622, 3299, 3622, 3622, 3749, 3622, 3622, 3721, 2984, 3622, 2988, 3622,
  3622, 3293, 3622, 3622, 3720, 3622, 3622, 3846, 3622, 3622, 3725, 3622, 3730, 3577, 3735, 3735, 3735, 3622, 3739,
  3577, 3577, 3517, 2660, 3622, 3624, 3577, 3755, 3760, 3710, 3622, 3622, 3880, 3622, 3766, 3622, 3622, 3625, 3619,
  3622, 3622, 2850, 2567, 3762, 3146, 3622, 3009, 3622, 3018, 3771, 3182, 3622, 3788, 3622, 3775, 2559, 3622, 3014,
  3622, 3622, 2970, 3209, 3792, 3796, 3802, 3622, 3019, 3622, 2718, 3808, 3622, 3631, 3622, 3023, 3028, 3032, 3622,
  3716, 3622, 3623, 3577, 3622, 3622, 3577, 3577, 3813, 3814, 3818, 3577, 3577, 3577, 3571, 3621, 2703, 3577, 3822,
  3622, 3622, 3054, 3622, 3622, 3622, 3756, 3622, 3828, 3622, 3407, 3834, 3622, 3843, 3622, 3073, 3622, 3078, 3622,
  3853, 3622, 3622, 3079, 3622, 3622, 3622, 3786, 3622, 3437, 3447, 3622, 3104, 3108, 3622, 2798, 3622, 3622, 3059,
  3624, 3577, 3859, 3571, 3577, 2675, 3577, 3571, 3577, 3577, 3420, 3865, 3865, 3422, 3576, 3622, 3621, 3622, 3622,
  3113, 3625, 3577, 2917, 2923, 3622, 2684, 3577, 3622, 2688, 3624, 3577, 2813, 2813, 2813, 3908, 3869, 3869, 3870,
  3012, 3577, 3577, 3619, 3622, 3874, 3624, 3577, 3553, 3577, 3553, 3577, 3577, 3577, 3574, 3577, 3577, 3577, 3886,
  3886, 3574, 3577, 3577, 3577, 3573, 3571, 3621, 2712, 3622, 3141, 3577, 3577, 3572, 3576, 3558, 3622, 3622, 3622,
  3623, 3575, 3577, 3577, 3577, 3621, 3622, 3767, 3622, 3622, 3625, 3620, 3622, 3622, 3622, 3899, 3577, 3622, 3159,
  3622, 3622, 3391, 2597, 3622, 3804, 3622, 3622, 3165, 3577, 3622, 3587, 3622, 3798, 3622, 3622, 3622, 3624, 3577,
  3620, 3622, 3622, 3622, 2723, 3623, 3358, 3622, 3622, 3222, 3084, 3622, 2809, 3389, 3622, 2817, 3577, 3577, 2866,
  3577, 3577, 3577, 3934, 3933, 2819, 3577, 3914, 3914, 3912, 3920, 3932, 3577, 3570, 3577, 3571, 3621, 3622, 3622,
  3622, 2763, 3577, 3577, 3577, 3929, 3938, 3575, 3577, 3568, 0, 1029, 1029, 1029, 0, 1029, 2115, 1029, 1029, 1029,
  1029, 0, 4096, 4096, 4096, 0, 0, 0, 3316, 4608, 4608, 4608, 0, 0, 313, 3144, 194, 0, 0, 141, 0, 0, 5120, 5120, 5120,
  0, 0, 0, 58, 3144, 3295, 3144, 3144, 0, 3144, 3144, 9288, 3144, 3308, 0, 0, 0, 3386, 3324, 3144, 3144, 3144, 3180,
  3144, 3329, 3144, 3144, 3176, 3144, 3343, 3144, 3144, 3144, 3186, 3371, 3144, 3144, 3144, 3196, 3400, 3144, 3144,
  3144, 3204, 3144, 3442, 3144, 3144, 3177, 3144, 3144, 3446, 3144, 3144, 3178, 3144, 3501, 3144, 3144, 3144, 3229,
  3144, 3532, 3144, 3144, 3188, 3144, 2115, 6144, 6144, 0, 0, 0, 2115, 68, 0, 0, 3148, 3148, 0, 56, 0, 2115, 6656, 6656,
  0, 6656, 0, 6656, 0, 0, 6656, 6656, 0, 0, 6656, 0, 0, 68, 2115, 7168, 0, 0, 0, 4096, 0, 0, 3145, 3145, 3145, 3145, 0,
  95, 0, 0, 0, 6144, 0, 0, 0, 99, 2115, 0, 3584, 0, 0, 3192, 3193, 3194, 3144, 237, 0, 0, 0, 12800, 3144, 3261, 3144,
  3144, 3195, 3144, 3144, 3277, 3144, 3144, 3199, 3144, 3291, 3144, 3293, 3144, 3179, 3144, 3144, 3388, 3144, 0, 3315,
  3317, 3144, 3182, 3144, 3144, 37960, 0, 3144, 3334, 3335, 3144, 3184, 3144, 3144, 3449, 3144, 3144, 3341, 3144, 3144,
  3200, 3144, 3365, 3144, 3144, 3144, 3234, 3144, 3373, 3144, 3374, 0, 310, 0, 0, 0, 28160, 3144, 3395, 3144, 3144,
  3202, 3144, 3430, 3144, 3144, 3144, 3236, 3144, 3443, 3144, 3445, 3144, 3484, 3144, 3144, 3210, 0, 3502, 3144, 3144,
  3144, 3243, 3526, 3144, 3144, 3144, 3244, 3144, 3533, 3144, 3144, 3227, 3144, 32840, 0, 0, 0, 60, 0, 280, 0, 3144,
  3224, 3144, 3144, 3375, 3144, 3144, 3231, 3144, 3144, 3394, 3144, 3144, 3237, 3144, 3452, 3144, 3144, 3144, 3247,
  3146, 3146, 3146, 3146, 0, 195, 0, 0, 0, 38400, 3144, 14408, 3144, 3144, 3241, 3144, 3306, 3144, 3144, 0, 337, 3320,
  3144, 3144, 3144, 3252, 3338, 3144, 3144, 3144, 3254, 3144, 3390, 3144, 3144, 3249, 3144, 3417, 3144, 3144, 3144,
  3259, 3495, 3496, 3144, 3144, 3256, 3144, 3534, 3144, 3144, 3144, 3262, 0, 59, 0, 0, 62, 0, 0, 0, 3147, 3147, 3147,
  3147, 3147, 0, 56, 57, 0, 3223, 3144, 3144, 3278, 3279, 3144, 3407, 3144, 0, 56, 57, 0, 93, 3524, 3525, 3144, 3144,
  3280, 3144, 60, 0, 0, 0, 69, 3149, 3148, 3148, 3148, 3148, 3197, 3144, 3144, 3144, 3263, 0, 146, 0, 0, 63, 55, 149, 0,
  3144, 3144, 3281, 3144, 3144, 3255, 3144, 3144, 3283, 3144, 3260, 3144, 3144, 3144, 3264, 199, 0, 0, 0, 70, 12360,
  3144, 3144, 3144, 3265, 3144, 3286, 3287, 3144, 3187, 3144, 3144, 3257, 3144, 3144, 3289, 3290, 3144, 3201, 3144,
  3144, 3487, 3144, 3144, 3292, 3144, 3144, 3296, 3144, 242, 3144, 3144, 3144, 3288, 3144, 3322, 3323, 3144, 3203, 3144,
  3144, 26696, 3144, 28744, 3144, 3144, 3144, 3299, 0, 277, 0, 0, 94, 0, 3359, 3144, 3144, 3144, 3307, 25160, 3144,
  3144, 3144, 3318, 3391, 3144, 3393, 3144, 3207, 3144, 0, 3144, 3428, 25672, 3144, 3144, 3144, 3328, 3405, 3144, 3144,
  3144, 3339, 0, 0, 24064, 33280, 26112, 3144, 3144, 3144, 3340, 24136, 3144, 3420, 3144, 3208, 139, 0, 0, 3154, 3154,
  0, 56, 3422, 3423, 33352, 3144, 3226, 3144, 3144, 3321, 3144, 21504, 3144, 3144, 3144, 3345, 21866, 3144, 3144, 3144,
  3357, 3438, 3144, 3144, 3144, 3363, 3457, 3144, 3144, 3144, 3364, 3465, 3144, 3144, 3144, 3366, 3469, 3144, 3144,
  3144, 3368, 8264, 3144, 3144, 3144, 3369, 3144, 3494, 3144, 3144, 3305, 3144, 3515, 3144, 3144, 3144, 3377, 3144,
  3527, 3144, 35400, 35912, 3144, 3144, 3144, 3379, 3539, 3144, 3144, 3144, 3389, 69, 0, 0, 0, 142, 3149, 3149, 3149,
  3149, 0, 0, 17920, 0, 0, 96, 97, 3144, 3344, 3144, 3144, 3325, 3144, 3347, 0, 0, 0, 197, 31816, 3144, 3144, 3144,
  3392, 0, 3150, 3150, 3150, 3150, 3150, 0, 56, 57, 3144, 16456, 3144, 3144, 3330, 3144, 0, 8704, 0, 0, 98, 0, 15432,
  3144, 3144, 3144, 3397, 3498, 3144, 3144, 3144, 3399, 3537, 3144, 3144, 3144, 3402, 61, 0, 0, 0, 241, 61, 0, 3151,
  3151, 0, 56, 3151, 3151, 3151, 3151, 3183, 3144, 3144, 3190, 3198, 3144, 3144, 3205, 3144, 3298, 3144, 3144, 3346,
  3144, 3144, 3301, 3302, 3144, 3228, 3144, 3230, 3362, 3144, 3144, 3144, 3404, 0, 3427, 3144, 3144, 3360, 3144, 3144,
  3477, 3144, 3144, 3367, 3144, 3144, 3520, 3144, 3144, 3372, 3144, 3242, 3144, 3144, 3144, 3413, 22600, 3144, 3144,
  3144, 3418, 3144, 3497, 3144, 3144, 3376, 3144, 3152, 3152, 3152, 3152, 3233, 3144, 3144, 3144, 3424, 3251, 3144,
  3144, 3144, 3444, 3144, 3258, 3144, 3144, 3401, 3144, 3144, 3294, 3144, 3144, 3415, 3144, 240, 0, 0, 3144, 3175, 3327,
  3144, 3144, 3144, 3453, 3144, 3332, 3144, 3144, 3416, 3144, 0, 312, 0, 3144, 3225, 3144, 3387, 3144, 3144, 3144, 3454,
  3403, 3144, 3144, 3144, 3462, 3521, 3144, 3523, 3144, 3232, 3144, 3144, 3282, 3144, 0, 3153, 3153, 3153, 3153, 3153,
  0, 56, 57, 0, 143, 0, 0, 102, 3144, 3144, 3331, 3144, 3333, 3425, 3144, 3426, 0, 0, 3156, 3156, 91, 56, 3144, 3455,
  3144, 3144, 3429, 3144, 3508, 3144, 3144, 3144, 3463, 3144, 3517, 3144, 3144, 3432, 3144, 3144, 3530, 3144, 3144,
  3436, 3144, 3144, 3541, 3144, 3144, 3437, 3144, 3154, 3154, 3154, 3154, 3144, 3250, 3144, 3144, 3439, 3440, 3276,
  3144, 3144, 3144, 3470, 3285, 3144, 3144, 3144, 3472, 3144, 3337, 3144, 3144, 3441, 3144, 0, 281, 3144, 3144, 3448,
  3144, 309, 0, 311, 0, 0, 3160, 3160, 0, 56, 3473, 3144, 3144, 3144, 3488, 3479, 3144, 3144, 3144, 3492, 3483, 3144,
  3144, 3144, 3503, 3493, 3144, 3144, 3144, 3506, 3191, 3144, 3144, 3144, 3507, 148, 0, 0, 3144, 3411, 3253, 3144, 3144,
  3144, 3509, 3378, 3144, 3144, 3380, 3433, 3144, 3144, 3144, 3516, 3518, 3519, 3144, 3144, 3450, 3144, 0, 55, 0, 0, 0,
  279, 63, 64, 0, 0, 147, 0, 0, 64, 2115, 0, 0, 5120, 0, 0, 2560, 57, 92, 0, 0, 0, 4608, 0, 0, 0, 57, 3155, 3155, 3155,
  3155, 0, 144, 145, 0, 0, 5632, 0, 0, 3145, 3145, 0, 56, 3246, 3248, 3144, 3144, 3451, 3144, 3144, 3275, 3144, 3144,
  3467, 3144, 3144, 3284, 3144, 3144, 3471, 3144, 3144, 28232, 3144, 3144, 3481, 3144, 3342, 3144, 3144, 3144, 3528,
  278, 0, 0, 0, 1536, 30792, 3144, 3144, 3144, 3529, 30280, 3144, 3144, 3144, 3535, 3209, 0, 0, 0, 2115, 0, 0, 0, 56,
  57, 0, 0, 0, 0, 55, 150, 3144, 3144, 3144, 3538, 3144, 3414, 3144, 3144, 3485, 3144, 3156, 3156, 3156, 3156, 100, 0,
  0, 3144, 3355, 3144, 3206, 3144, 0, 0, 196, 3297, 3144, 3144, 3300, 3144, 3326, 3144, 3144, 3499, 3144, 276, 0, 0, 0,
  3144, 3144, 3144, 3144, 0, 0, 0, 59, 3356, 3144, 3144, 3144, 11336, 3144, 14920, 3144, 3361, 3144, 3406, 3144, 3408,
  0, 3410, 3144, 3412, 3144, 3419, 3144, 3421, 3144, 3435, 3144, 3144, 3504, 3144, 3144, 3447, 3144, 3144, 3505, 3144,
  3144, 3474, 3144, 3144, 3512, 3513, 37448, 3144, 3144, 3144, 13384, 0, 65, 0, 0, 198, 23552, 65, 2115, 0, 0, 101, 71,
  0, 0, 3157, 3157, 3157, 3157, 0, 3181, 3144, 3144, 3144, 13896, 3238, 3144, 3144, 3144, 17992, 3144, 3461, 3144, 3144,
  3522, 3144, 3464, 3144, 3144, 3144, 18504, 3144, 3490, 3144, 3144, 3536, 3144, 3510, 3144, 3144, 3144, 19528, 21064,
  3144, 3144, 3144, 20552, 3531, 3144, 3144, 3144, 22088, 3158, 3158, 3158, 3158, 0, 140, 0, 0, 200, 0, 3144, 9800,
  3144, 3319, 3144, 3336, 3144, 3144, 3540, 3144, 3354, 3144, 3144, 3144, 23112, 3144, 3358, 3144, 3144, 10312, 3144,
  3370, 3144, 3144, 3144, 29768, 3396, 3144, 3144, 3398, 3144, 33864, 3144, 3144, 10824, 3144, 3459, 3144, 3144, 3144,
  31304, 3475, 3476, 3144, 3144, 11776, 0, 3144, 16968, 3144, 3480, 3144, 3482, 3144, 3144, 17480, 3144, 3144, 3486,
  3144, 3144, 20040, 3144, 3491, 3144, 3144, 3144, 32328, 0, 3159, 3159, 3159, 3159, 3159, 0, 56, 57, 201, 3144, 3144,
  3144, 27208, 3144, 3431, 3144, 3144, 3144, 27720, 29256, 3458, 3144, 3460, 3144, 3235, 3144, 3144, 3514, 3144, 3466,
  3144, 3468, 3144, 3239, 3240, 3144, 3185, 3144, 3189, 3144, 3478, 3144, 3144, 34536, 3144, 0, 66, 0, 0, 238, 0, 3160,
  3160, 3160, 3160, 3161, 3161, 3161, 3161, 0, 3303, 3144, 3144, 3144, 34888, 3500, 3456, 3144, 3144, 3144, 36424, 3144,
  3162, 3162, 3162, 3162, 3144, 3511, 3144, 3144, 3245, 3144, 3144, 3489, 7752, 36936, 3144, 24576, 0, 0, 6144, 6144, 0,
  56, 0, 0, 0, 3161, 38400, 38400, 38400, 38400, 0, 0, 239, 0, 38400, 38400, 0, 56, 2560, 0, 0, 0, 3274, 0, 38912,
  38912, 38912, 2115, 0, 0, 38400, 0, 0, 38912, 38912, 0, 0, 15872, 18944
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  88, 91, 95, 99, 106, 136, 110, 114, 136, 119, 123, 124, 128, 134, 115, 132, 124, 140, 124, 157, 124, 144, 154, 161,
  161, 165, 169, 124, 124, 147, 173, 182, 186, 194, 201, 205, 303, 221, 205, 150, 225, 217, 176, 229, 236, 178, 242,
  232, 249, 246, 280, 253, 257, 257, 261, 265, 269, 273, 277, 102, 284, 288, 310, 308, 292, 308, 238, 296, 308, 308,
  300, 307, 309, 314, 308, 317, 307, 189, 307, 190, 208, 197, 197, 197, 211, 214, 321, 308, 325, 367, 336, 364, 340,
  361, 344, 348, 358, 351, 354, 371, 375, 378, 382, 382, 383, 640, 328, 619, 406, 396, 472, 404, 410, 414, 397, 461,
  461, 461, 434, 472, 420, 425, 412, 416, 461, 461, 461, 461, 400, 381, 421, 426, 441, 446, 430, 461, 461, 461, 399,
  380, 398, 435, 442, 450, 456, 460, 461, 461, 391, 478, 382, 382, 523, 527, 463, 459, 461, 461, 435, 456, 452, 462,
  458, 461, 461, 462, 459, 461, 461, 622, 461, 461, 461, 467, 332, 479, 382, 382, 523, 552, 535, 579, 471, 508, 476,
  486, 489, 489, 490, 382, 382, 669, 677, 382, 467, 332, 494, 382, 382, 679, 665, 612, 499, 503, 507, 436, 331, 495,
  382, 382, 680, 382, 382, 681, 382, 390, 388, 382, 480, 437, 558, 512, 519, 583, 479, 533, 537, 541, 545, 535, 515,
  582, 382, 562, 552, 568, 481, 557, 382, 382, 382, 590, 583, 382, 482, 558, 383, 564, 576, 572, 382, 437, 558, 571,
  382, 383, 645, 570, 583, 382, 644, 570, 583, 392, 595, 572, 392, 595, 572, 599, 547, 603, 548, 610, 608, 616, 626,
  604, 628, 610, 382, 587, 642, 553, 632, 633, 632, 632, 637, 649, 653, 656, 660, 382, 382, 386, 672, 382, 382, 386,
  382, 591, 673, 382, 589, 525, 529, 385, 382, 382, 382, 382, 383, 382, 670, 664, 384, 382, 589, 671, 665, 389, 387,
  391, 389, 128, 256, 2048, 0, 0, 8, 8192, 16384, 4194304, 0, 0, 4098, 65538, 4194306, 16777218, 136, 8198, 66, 130,
  392, 6150, 6274, 1073741954, 4866, 770, 6146, 6146, 1073748098, -1094795232, -1094795230, -1094795102, -1094794462,
  -1094789086, 20971522, 834, 6914, 770, 6146, 1073741826, 2, 2, 2, 2, 6, 18, 1026, -1094795230, -1094795102,
  -1094787038, -1094788958, -1094793054, -1094788958, 0, 16, 65536, 4194304, 16777216, 0, 0, 0, 0, 1, 0, 0, 0, 16, 32,
  0, 0, 0, 32, 805306400, -2147483616, 32, 32, 32, 0, 65536, 4194304, 0, 0, 49184, 393248, 3670048, 243269664, 1572896,
  2097184, 8388640, 33554464, 67108896, 134217760, 268435488, 536870944, -2147483616, 32, 0, 0, 49184, 131104, 262176,
  262176, 524320, 1048608, 2097184, 33554464, 67108896, 268435488, 536870944, 32, 0, 4194304, 0, 0, 0, 512, 16384, 0, 0,
  16416, 32800, 131104, 131104, 524320, 1048608, 2097184, 524320, 2097184, 67108896, 536870944, 32, 32, 0, 16416, 32800,
  2097184, 67108896, 32, 32, 32, 32, 16416, 32800, 0, 4, 512, 8192, 4210688, 0, 0, 0, 1073741824, 0, 8192, 32768, 0, 0,
  0, 32768, 0, 512, 16384, 262160, 4, 0, -303121, -303121, -303121, -303121, 32768, 0, 0, 16, 262144, 0, 224, 256, 1536,
  22528, 196608, 33030144, 33554432, 469762048, -536870912, 0, 0, 32768, 512, 196608, 524288, 1048576, 2097152, 8388608,
  16777216, 67108864, 29360128, 33554432, 201326592, 268435456, 1, 2, 8, 32, 64, 128, 256, 1536, 6144, 16384, 2048,
  4096, 16384, 65536, 131072, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 67108864, 134217728, 268435456,
  -536870912, 0, 0, 256, 536870912, 64, 256, 1536, 4096, 524288, 16384, 0, 262144, 0, 0, 0, 1, 2, 32, 256, 1536, 16384,
  131072, 524288, 2097152, 16777216, 67108864, -536870912, 0, 4096, 16384, 524288, 2097152, 16777216, 67108864,
  134217728, -536870912, 0, 0, 0, 0, 512, 0, 0, 1, 2, 12, 48, 256, 1024, 524288, 2097152, 0, 256, 1024, 67108864, 1024,
  536870912, 1073741824, -2147483648, 536870912, 256, 536870912, 1073741824, -2147483648, 0, 0, 1, 14, 0, 0, 536870912,
  1073741824, 0, 0, 32, 2097184, 32, 32, -2147483648, 536870912, 1073741824, -2147483648, 1073741824, -2147483648, 0,
  1024, 0, 0, 0, 0, 0, 1024, 1024, 2048, 0, 0, 1, 32, 256, 1024, 4096, 1023, 1023, 2047, 2047, 1023, 1023, 4095, 4095,
  2047, 4095, 4095, 0, 3, 60, 960, 128, 256, 0, 0, 0, 1, 2, 8, 48, 64, 128, 768, 0, 64, 256, 0, 0, 8, 48, 256, 0
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "EPSILON",
  "Whitespace",
  "EOF",
  "noParExpression",
  "quotedstr",
  "NCName",
  "'$'",
  "'('",
  "')'",
  "','",
  "'/'",
  "':'",
  "'='",
  "'=>'",
  "'add-attribute'",
  "'add-xml-base'",
  "'catch'",
  "'compare'",
  "'count'",
  "'default'",
  "'delete'",
  "'directory-list'",
  "'document'",
  "'else'",
  "'empty'",
  "'error'",
  "'escape-markup'",
  "'exec'",
  "'filter'",
  "'for-each'",
  "'from'",
  "'hash'",
  "'http-request'",
  "'identity'",
  "'if'",
  "'insert'",
  "'item'",
  "'label-elements'",
  "'library'",
  "'load'",
  "'make-absolute-uris'",
  "'namespace'",
  "'namespace-rename'",
  "'pack'",
  "'parameters'",
  "'pipe'",
  "'pipeline'",
  "'primary'",
  "'rename'",
  "'replace'",
  "'sequence'",
  "'set-attributes'",
  "'sink'",
  "'split-sequence'",
  "'step'",
  "'store'",
  "'string-replace'",
  "'try'",
  "'unescape-markup'",
  "'unwrap'",
  "'uuid'",
  "'validate-with-relax-ng'",
  "'validate-with-schematron'",
  "'validate-with-xml-schema'",
  "'variable'",
  "'viewport'",
  "'wrap'",
  "'wrap-sequence'",
  "'www-form-urldecode'",
  "'www-form-urlencode'",
  "'xinclude'",
  "'xquery'",
  "'xsl-formatter'",
  "'xslt'",
  "'{'",
  "'}'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 512,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer) as xs:integer+
{
  if ($current-state = 0) then
    let $result := $result idiv 512
    return
      if ($result != 0) then
      (
        $result - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 5)
    let $current := $current + 1
    let $i0 := 469 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 4
    let $next-state := $p:TRANSITION[$i0 mod 4 + $p:TRANSITION[$i1 mod 4 + $p:TRANSITION[$i2 + 1] + 1] + 1]
    return
      if ($next-state > 511) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer) as xs:string*
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 2
    let $i0 := $t * 469 + $state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 4 + $p:EXPECTED[$i2 + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[5 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[10 + $m]
};

(:~
 : The index of the parser state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk := 1;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the token that has been shifted.
 :)
declare variable $p:b0 := 2;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the token that has been shifted.
 :)
declare variable $p:e0 := 3;

(:~
 : The index of the parser state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 := 4;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 := 5;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 := 6;

(:~
 : The index of the parser state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 := 7;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 := 8;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 := 9;

(:~
 : The index of the parser state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 := 10;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 := 11;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 := 12;

(:~
 : The index of the parser state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error := 13;

(:~
 : The index of the parser state for accessing the memoization
 : of backtracking results.
 :)
declare variable $p:memo := 14;

(:~
 : The index of the parser state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result := 15;

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    if ($error/@o) then
      concat
      (
        "syntax error, found ", $p:TOKEN[$error/@o + 1], "&#10;",
        "while expecting ", $p:TOKEN[$error/@x + 1], "&#10;",
        if ($error/@e = $begin) then
          ""
        else
          concat("after successfully scanning ", string($error/@e - $begin), " characters "),
        "at line ", string($line), ", column ", string($column), "&#10;",
        "...", substring($input, $begin, 32), "..."
      )
    else
      let $expected := p:expected-token-set($error/@s)
      return
        concat
        (
          "lexical analysis failed&#10;",
          "while expecting ",
          "["[exists($expected[2])],
          string-join($expected, ", "),
          "]"[exists($expected[2])],
          "&#10;",
          if ($error/@e = $begin) then
            ""
          else
            concat("after successfully scanning ", string($error/@e - $begin), " characters "),
          "at line ", string($line), ", column ", string($column), "&#10;",
          "...", substring($input, $begin, 32), "..."
        )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3),
    if ($state[$p:e0] != $state[$p:b1]) then
      text {substring($input, $state[$p:e0], $state[$p:b1] - $state[$p:e0])}
    else
      (),
    let $name := $p:TOKEN[1 + $state[$p:l1]]
    let $content := substring($input, $state[$p:b1], $state[$p:e1] - $state[$p:b1])
    return
      if (starts-with($name, "'")) then
        element TOKEN {$content}
      else
        element {$name} {$content}
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      if ($state[$p:e1] < $state[$p:memo]/@e) then
        $state[$p:memo]/@*
      else
      (
        attribute b {$state[$p:b1]},
        attribute e {$state[$p:e1]},
        if ($state[$p:l1] < 0) then
          attribute s {- $state[$p:l1]}
        else
          (attribute o {$state[$p:l1]}, attribute x {$code})
      )
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer) as xs:integer+
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 1) then                                 (: Whitespace :)
      p:matchW($input, $match[3], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:matchW($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:matchW($input, $state[$p:b2], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:matchW($input, $state[$p:b3], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:match($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:match($input, $state[$p:e1], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:match($input, $state[$p:e2], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Reduce the result stack. Pop $count element, wrap them in a
 : new element named $name, and push the new element.
 :
 : @param $state the parser state.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @return the updated parser state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Strip result from parser state, in order to avoid carrying it while
 : backtracking.
 :
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:strip-result($state as item()+) as item()+
{
  subsequence($state, 1, $p:memo)
};

(:~
 : Restore parser state after unsuccessfully trying an alternative,
 : merging any memoization that was collected on the way.
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:restore($backtrack as item()+,
                           $state as item()+) as item()+
{
  subsequence($backtrack, 1, $p:memo - 1),
  element memo{$state[$p:error]/@*, $state[$p:memo]/value}
};

(:~
 : Memoize the backtracking result that was computed at decision point
 : $i for input position $state[$p:e0].
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after successfully trying an alternative.
 : @param $v the id of the successful alternative.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoize($backtrack as item()+,
                           $state as item()+,
                           $v as xs:integer,
                           $i as xs:integer) as item()+
{
  $v,
  subsequence($backtrack, $p:lk + 1, $p:memo - $p:lk - 1),
  element memo
  {
    $state[$p:memo]/value,
    element value {attribute key {$backtrack[$p:e0] * 2 + $i}, $v}
  },
  subsequence($backtrack, $p:memo + 1)
};

(:~
 : Retrieve memoized backtracking result for decision point $i
 : and input position $state[$p:e0] into $state[$p:lk].
 :
 : @param $state the parser state.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoized($state as item()+, $i as xs:integer) as item()+
{
  let $value := data($state[$p:memo]/value[@key = $state[$p:e0] * 2 + $i])
  return
  (
    if ($value) then $value else 0,
    subsequence($state, $p:lk + 1)
  )
};

(:~
 : Parse library.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-library($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(38, $input, $state)                 (: 'library' :)
  return p:reduce($state, "library", $count)
};

(:~
 : Parse pipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-pipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 46) then                            (: 'pipeline' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 14                             (: 'add-attribute' :)
          or $state[$p:lk] = 15                             (: 'add-xml-base' :)
          or $state[$p:lk] = 17                             (: 'compare' :)
          or $state[$p:lk] = 18                             (: 'count' :)
          or $state[$p:lk] = 19                             (: 'default' :)
          or $state[$p:lk] = 20                             (: 'delete' :)
          or $state[$p:lk] = 21                             (: 'directory-list' :)
          or $state[$p:lk] = 23                             (: 'else' :)
          or $state[$p:lk] = 25                             (: 'error' :)
          or $state[$p:lk] = 26                             (: 'escape-markup' :)
          or $state[$p:lk] = 27                             (: 'exec' :)
          or $state[$p:lk] = 28                             (: 'filter' :)
          or $state[$p:lk] = 29                             (: 'for-each' :)
          or $state[$p:lk] = 31                             (: 'hash' :)
          or $state[$p:lk] = 32                             (: 'http-request' :)
          or $state[$p:lk] = 33                             (: 'identity' :)
          or $state[$p:lk] = 34                             (: 'if' :)
          or $state[$p:lk] = 35                             (: 'insert' :)
          or $state[$p:lk] = 37                             (: 'label-elements' :)
          or $state[$p:lk] = 38                             (: 'library' :)
          or $state[$p:lk] = 39                             (: 'load' :)
          or $state[$p:lk] = 40                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 41                             (: 'namespace' :)
          or $state[$p:lk] = 42                             (: 'namespace-rename' :)
          or $state[$p:lk] = 43                             (: 'pack' :)
          or $state[$p:lk] = 44                             (: 'parameters' :)
          or $state[$p:lk] = 48                             (: 'rename' :)
          or $state[$p:lk] = 49                             (: 'replace' :)
          or $state[$p:lk] = 51                             (: 'set-attributes' :)
          or $state[$p:lk] = 52                             (: 'sink' :)
          or $state[$p:lk] = 53                             (: 'split-sequence' :)
          or $state[$p:lk] = 54                             (: 'step' :)
          or $state[$p:lk] = 55                             (: 'store' :)
          or $state[$p:lk] = 56                             (: 'string-replace' :)
          or $state[$p:lk] = 57                             (: 'try' :)
          or $state[$p:lk] = 58                             (: 'unescape-markup' :)
          or $state[$p:lk] = 59                             (: 'unwrap' :)
          or $state[$p:lk] = 60                             (: 'uuid' :)
          or $state[$p:lk] = 61                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 62                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 63                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 64                             (: 'variable' :)
          or $state[$p:lk] = 65                             (: 'viewport' :)
          or $state[$p:lk] = 66                             (: 'wrap' :)
          or $state[$p:lk] = 67                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 68                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 69                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 70                             (: 'xinclude' :)
          or $state[$p:lk] = 71                             (: 'xquery' :)
          or $state[$p:lk] = 72                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 73                             (: 'xslt' :)
          or $state[$p:lk] = 1454                           (: 'pipeline' ':' :)
          or $state[$p:lk] = 1582) then                     (: 'pipeline' '=' :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(15, $input, $state)           (: Whitespace | 'pipeline' :)
  let $state := p:shift(46, $input, $state)                 (: 'pipeline' :)
  let $state := p:lookahead1W(45, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 74) then                      (: '{' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "pipeline", $count)
};

(:~
 : Try parsing pipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-pipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 46) then                            (: 'pipeline' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 14                             (: 'add-attribute' :)
          or $state[$p:lk] = 15                             (: 'add-xml-base' :)
          or $state[$p:lk] = 17                             (: 'compare' :)
          or $state[$p:lk] = 18                             (: 'count' :)
          or $state[$p:lk] = 19                             (: 'default' :)
          or $state[$p:lk] = 20                             (: 'delete' :)
          or $state[$p:lk] = 21                             (: 'directory-list' :)
          or $state[$p:lk] = 23                             (: 'else' :)
          or $state[$p:lk] = 25                             (: 'error' :)
          or $state[$p:lk] = 26                             (: 'escape-markup' :)
          or $state[$p:lk] = 27                             (: 'exec' :)
          or $state[$p:lk] = 28                             (: 'filter' :)
          or $state[$p:lk] = 29                             (: 'for-each' :)
          or $state[$p:lk] = 31                             (: 'hash' :)
          or $state[$p:lk] = 32                             (: 'http-request' :)
          or $state[$p:lk] = 33                             (: 'identity' :)
          or $state[$p:lk] = 34                             (: 'if' :)
          or $state[$p:lk] = 35                             (: 'insert' :)
          or $state[$p:lk] = 37                             (: 'label-elements' :)
          or $state[$p:lk] = 38                             (: 'library' :)
          or $state[$p:lk] = 39                             (: 'load' :)
          or $state[$p:lk] = 40                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 41                             (: 'namespace' :)
          or $state[$p:lk] = 42                             (: 'namespace-rename' :)
          or $state[$p:lk] = 43                             (: 'pack' :)
          or $state[$p:lk] = 44                             (: 'parameters' :)
          or $state[$p:lk] = 48                             (: 'rename' :)
          or $state[$p:lk] = 49                             (: 'replace' :)
          or $state[$p:lk] = 51                             (: 'set-attributes' :)
          or $state[$p:lk] = 52                             (: 'sink' :)
          or $state[$p:lk] = 53                             (: 'split-sequence' :)
          or $state[$p:lk] = 54                             (: 'step' :)
          or $state[$p:lk] = 55                             (: 'store' :)
          or $state[$p:lk] = 56                             (: 'string-replace' :)
          or $state[$p:lk] = 57                             (: 'try' :)
          or $state[$p:lk] = 58                             (: 'unescape-markup' :)
          or $state[$p:lk] = 59                             (: 'unwrap' :)
          or $state[$p:lk] = 60                             (: 'uuid' :)
          or $state[$p:lk] = 61                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 62                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 63                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 64                             (: 'variable' :)
          or $state[$p:lk] = 65                             (: 'viewport' :)
          or $state[$p:lk] = 66                             (: 'wrap' :)
          or $state[$p:lk] = 67                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 68                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 69                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 70                             (: 'xinclude' :)
          or $state[$p:lk] = 71                             (: 'xquery' :)
          or $state[$p:lk] = 72                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 73                             (: 'xslt' :)
          or $state[$p:lk] = 1454                           (: 'pipeline' ':' :)
          or $state[$p:lk] = 1582) then                     (: 'pipeline' '=' :)
      let $state := p:try-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(15, $input, $state)           (: Whitespace | 'pipeline' :)
  let $state := p:shift(46, $input, $state)                 (: 'pipeline' :)
  let $state := p:lookahead1W(45, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 74) then                      (: '{' :)
      let $state := p:try-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "pipeline", $count)
};

(:~
 : Parse atomicStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-atomicStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'default' :)
     or $state[$p:l1] = 19                                  (: 'else' :)
     or $state[$p:l1] = 23                                  (: 'for-each' :)
     or $state[$p:l1] = 29                                  (: 'if' :)
     or $state[$p:l1] = 34                                  (: 'library' :)
     or $state[$p:l1] = 38                                  (: 'namespace' :)
     or $state[$p:l1] = 41                                  (: 'pipeline' :)
     or $state[$p:l1] = 46                                  (: 'step' :)
     or $state[$p:l1] = 54                                  (: 'try' :)
     or $state[$p:l1] = 57                                  (: 'variable' :)
     or $state[$p:l1] = 64                                  (: 'viewport' :)
     or $state[$p:l1] = 65) then                            (: 'viewport' :)
      let $state := p:lookahead2W(25, $input, $state)       (: Whitespace | ':' | '=' :)
      return $state
    else if ($state[$p:l1] = 14                             (: 'add-xml-base' :)
          or $state[$p:l1] = 15                             (: 'compare' :)
          or $state[$p:l1] = 17                             (: 'count' :)
          or $state[$p:l1] = 18                             (: 'delete' :)
          or $state[$p:l1] = 20                             (: 'directory-list' :)
          or $state[$p:l1] = 21                             (: 'error' :)
          or $state[$p:l1] = 25                             (: 'escape-markup' :)
          or $state[$p:l1] = 26                             (: 'exec' :)
          or $state[$p:l1] = 27                             (: 'filter' :)
          or $state[$p:l1] = 28                             (: 'hash' :)
          or $state[$p:l1] = 31                             (: 'http-request' :)
          or $state[$p:l1] = 32                             (: 'identity' :)
          or $state[$p:l1] = 33                             (: 'insert' :)
          or $state[$p:l1] = 35                             (: 'label-elements' :)
          or $state[$p:l1] = 37                             (: 'load' :)
          or $state[$p:l1] = 39                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 40                             (: 'namespace-rename' :)
          or $state[$p:l1] = 42                             (: 'pack' :)
          or $state[$p:l1] = 43                             (: 'parameters' :)
          or $state[$p:l1] = 44                             (: 'rename' :)
          or $state[$p:l1] = 48                             (: 'replace' :)
          or $state[$p:l1] = 49                             (: 'set-attributes' :)
          or $state[$p:l1] = 51                             (: 'sink' :)
          or $state[$p:l1] = 52                             (: 'split-sequence' :)
          or $state[$p:l1] = 53                             (: 'store' :)
          or $state[$p:l1] = 55                             (: 'string-replace' :)
          or $state[$p:l1] = 56                             (: 'unescape-markup' :)
          or $state[$p:l1] = 58                             (: 'unwrap' :)
          or $state[$p:l1] = 59                             (: 'uuid' :)
          or $state[$p:l1] = 60                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 61                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 62                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 63                             (: 'wrap' :)
          or $state[$p:l1] = 66                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 67                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 68                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 69                             (: 'xinclude' :)
          or $state[$p:l1] = 70                             (: 'xquery' :)
          or $state[$p:l1] = 71                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 72                             (: 'xslt' :)
          or $state[$p:l1] = 73) then                       (: 'xslt' :)
      let $state := p:lookahead2W(53, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 1541                           (: NCName^Token '=' :)
          or $state[$p:lk] = 1550                           (: 'add-attribute' '=' :)
          or $state[$p:lk] = 1551                           (: 'add-xml-base' '=' :)
          or $state[$p:lk] = 1553                           (: 'compare' '=' :)
          or $state[$p:lk] = 1554                           (: 'count' '=' :)
          or $state[$p:lk] = 1555                           (: 'default' '=' :)
          or $state[$p:lk] = 1556                           (: 'delete' '=' :)
          or $state[$p:lk] = 1557                           (: 'directory-list' '=' :)
          or $state[$p:lk] = 1559                           (: 'else' '=' :)
          or $state[$p:lk] = 1561                           (: 'error' '=' :)
          or $state[$p:lk] = 1562                           (: 'escape-markup' '=' :)
          or $state[$p:lk] = 1563                           (: 'exec' '=' :)
          or $state[$p:lk] = 1564                           (: 'filter' '=' :)
          or $state[$p:lk] = 1565                           (: 'for-each' '=' :)
          or $state[$p:lk] = 1567                           (: 'hash' '=' :)
          or $state[$p:lk] = 1568                           (: 'http-request' '=' :)
          or $state[$p:lk] = 1569                           (: 'identity' '=' :)
          or $state[$p:lk] = 1570                           (: 'if' '=' :)
          or $state[$p:lk] = 1571                           (: 'insert' '=' :)
          or $state[$p:lk] = 1573                           (: 'label-elements' '=' :)
          or $state[$p:lk] = 1574                           (: 'library' '=' :)
          or $state[$p:lk] = 1575                           (: 'load' '=' :)
          or $state[$p:lk] = 1576                           (: 'make-absolute-uris' '=' :)
          or $state[$p:lk] = 1577                           (: 'namespace' '=' :)
          or $state[$p:lk] = 1578                           (: 'namespace-rename' '=' :)
          or $state[$p:lk] = 1579                           (: 'pack' '=' :)
          or $state[$p:lk] = 1580                           (: 'parameters' '=' :)
          or $state[$p:lk] = 1582                           (: 'pipeline' '=' :)
          or $state[$p:lk] = 1584                           (: 'rename' '=' :)
          or $state[$p:lk] = 1585                           (: 'replace' '=' :)
          or $state[$p:lk] = 1587                           (: 'set-attributes' '=' :)
          or $state[$p:lk] = 1588                           (: 'sink' '=' :)
          or $state[$p:lk] = 1589                           (: 'split-sequence' '=' :)
          or $state[$p:lk] = 1590                           (: 'step' '=' :)
          or $state[$p:lk] = 1591                           (: 'store' '=' :)
          or $state[$p:lk] = 1592                           (: 'string-replace' '=' :)
          or $state[$p:lk] = 1593                           (: 'try' '=' :)
          or $state[$p:lk] = 1594                           (: 'unescape-markup' '=' :)
          or $state[$p:lk] = 1595                           (: 'unwrap' '=' :)
          or $state[$p:lk] = 1596                           (: 'uuid' '=' :)
          or $state[$p:lk] = 1597                           (: 'validate-with-relax-ng' '=' :)
          or $state[$p:lk] = 1598                           (: 'validate-with-schematron' '=' :)
          or $state[$p:lk] = 1599                           (: 'validate-with-xml-schema' '=' :)
          or $state[$p:lk] = 1600                           (: 'variable' '=' :)
          or $state[$p:lk] = 1601                           (: 'viewport' '=' :)
          or $state[$p:lk] = 1602                           (: 'wrap' '=' :)
          or $state[$p:lk] = 1603                           (: 'wrap-sequence' '=' :)
          or $state[$p:lk] = 1604                           (: 'www-form-urldecode' '=' :)
          or $state[$p:lk] = 1605                           (: 'www-form-urlencode' '=' :)
          or $state[$p:lk] = 1606                           (: 'xinclude' '=' :)
          or $state[$p:lk] = 1607                           (: 'xquery' '=' :)
          or $state[$p:lk] = 1608                           (: 'xsl-formatter' '=' :)
          or $state[$p:lk] = 1609) then                     (: 'xslt' '=' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 14                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 15                                  (: 'compare' :)
     or $state[$p:l1] = 17                                  (: 'count' :)
     or $state[$p:l1] = 18                                  (: 'delete' :)
     or $state[$p:l1] = 20                                  (: 'directory-list' :)
     or $state[$p:l1] = 21                                  (: 'error' :)
     or $state[$p:l1] = 25                                  (: 'escape-markup' :)
     or $state[$p:l1] = 26                                  (: 'exec' :)
     or $state[$p:l1] = 27                                  (: 'filter' :)
     or $state[$p:l1] = 28                                  (: 'hash' :)
     or $state[$p:l1] = 31                                  (: 'http-request' :)
     or $state[$p:l1] = 32                                  (: 'identity' :)
     or $state[$p:l1] = 33                                  (: 'insert' :)
     or $state[$p:l1] = 35                                  (: 'label-elements' :)
     or $state[$p:l1] = 37                                  (: 'load' :)
     or $state[$p:l1] = 39                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 40                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 42                                  (: 'pack' :)
     or $state[$p:l1] = 43                                  (: 'parameters' :)
     or $state[$p:l1] = 44                                  (: 'rename' :)
     or $state[$p:l1] = 48                                  (: 'replace' :)
     or $state[$p:l1] = 49                                  (: 'set-attributes' :)
     or $state[$p:l1] = 51                                  (: 'sink' :)
     or $state[$p:l1] = 52                                  (: 'split-sequence' :)
     or $state[$p:l1] = 53                                  (: 'store' :)
     or $state[$p:l1] = 55                                  (: 'string-replace' :)
     or $state[$p:l1] = 56                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 58                                  (: 'unwrap' :)
     or $state[$p:l1] = 59                                  (: 'uuid' :)
     or $state[$p:l1] = 60                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 61                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 62                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 63                                  (: 'wrap' :)
     or $state[$p:l1] = 66                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 67                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 68                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 69                                  (: 'xinclude' :)
     or $state[$p:l1] = 70                                  (: 'xquery' :)
     or $state[$p:l1] = 71                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 72                                  (: 'xslt' :)
     or $state[$p:l1] = 73) then                            (: 'xslt' :)
      let $state := p:lookahead2W(52, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5                                   (: NCName^Token :)
     or $state[$p:lk] = 19                                  (: 'default' :)
     or $state[$p:lk] = 23                                  (: 'else' :)
     or $state[$p:lk] = 29                                  (: 'for-each' :)
     or $state[$p:lk] = 34                                  (: 'if' :)
     or $state[$p:lk] = 38                                  (: 'library' :)
     or $state[$p:lk] = 41                                  (: 'namespace' :)
     or $state[$p:lk] = 46                                  (: 'pipeline' :)
     or $state[$p:lk] = 54                                  (: 'step' :)
     or $state[$p:lk] = 57                                  (: 'try' :)
     or $state[$p:lk] = 64                                  (: 'variable' :)
     or $state[$p:lk] = 65                                  (: 'viewport' :)
     or $state[$p:lk] = 1422                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1423                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1425                                (: 'compare' ':' :)
     or $state[$p:lk] = 1426                                (: 'count' ':' :)
     or $state[$p:lk] = 1428                                (: 'delete' ':' :)
     or $state[$p:lk] = 1429                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1433                                (: 'error' ':' :)
     or $state[$p:lk] = 1434                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1435                                (: 'exec' ':' :)
     or $state[$p:lk] = 1436                                (: 'filter' ':' :)
     or $state[$p:lk] = 1439                                (: 'hash' ':' :)
     or $state[$p:lk] = 1440                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1441                                (: 'identity' ':' :)
     or $state[$p:lk] = 1443                                (: 'insert' ':' :)
     or $state[$p:lk] = 1445                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1447                                (: 'load' ':' :)
     or $state[$p:lk] = 1448                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1450                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1451                                (: 'pack' ':' :)
     or $state[$p:lk] = 1452                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1456                                (: 'rename' ':' :)
     or $state[$p:lk] = 1457                                (: 'replace' ':' :)
     or $state[$p:lk] = 1459                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1460                                (: 'sink' ':' :)
     or $state[$p:lk] = 1461                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1463                                (: 'store' ':' :)
     or $state[$p:lk] = 1464                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1466                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1467                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1468                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1469                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1470                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1471                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1474                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1475                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1476                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1477                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1478                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1479                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1480                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1481) then                          (: 'xslt' ':' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state :=
        if ($state[$p:l1] = 15) then                        (: 'add-xml-base' :)
          let $state := p:shift(15, $input, $state)         (: 'add-xml-base' :)
          return $state
        else if ($state[$p:l1] = 14) then                   (: 'add-attribute' :)
          let $state := p:shift(14, $input, $state)         (: 'add-attribute' :)
          return $state
        else if ($state[$p:l1] = 17) then                   (: 'compare' :)
          let $state := p:shift(17, $input, $state)         (: 'compare' :)
          return $state
        else if ($state[$p:l1] = 18) then                   (: 'count' :)
          let $state := p:shift(18, $input, $state)         (: 'count' :)
          return $state
        else if ($state[$p:l1] = 20) then                   (: 'delete' :)
          let $state := p:shift(20, $input, $state)         (: 'delete' :)
          return $state
        else if ($state[$p:l1] = 21) then                   (: 'directory-list' :)
          let $state := p:shift(21, $input, $state)         (: 'directory-list' :)
          return $state
        else if ($state[$p:l1] = 25) then                   (: 'error' :)
          let $state := p:shift(25, $input, $state)         (: 'error' :)
          return $state
        else if ($state[$p:l1] = 26) then                   (: 'escape-markup' :)
          let $state := p:shift(26, $input, $state)         (: 'escape-markup' :)
          return $state
        else if ($state[$p:l1] = 27) then                   (: 'exec' :)
          let $state := p:shift(27, $input, $state)         (: 'exec' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: 'filter' :)
          let $state := p:shift(28, $input, $state)         (: 'filter' :)
          return $state
        else if ($state[$p:l1] = 31) then                   (: 'hash' :)
          let $state := p:shift(31, $input, $state)         (: 'hash' :)
          return $state
        else if ($state[$p:l1] = 32) then                   (: 'http-request' :)
          let $state := p:shift(32, $input, $state)         (: 'http-request' :)
          return $state
        else if ($state[$p:l1] = 33) then                   (: 'identity' :)
          let $state := p:shift(33, $input, $state)         (: 'identity' :)
          return $state
        else if ($state[$p:l1] = 35) then                   (: 'insert' :)
          let $state := p:shift(35, $input, $state)         (: 'insert' :)
          return $state
        else if ($state[$p:l1] = 37) then                   (: 'label-elements' :)
          let $state := p:shift(37, $input, $state)         (: 'label-elements' :)
          return $state
        else if ($state[$p:l1] = 39) then                   (: 'load' :)
          let $state := p:shift(39, $input, $state)         (: 'load' :)
          return $state
        else if ($state[$p:l1] = 40) then                   (: 'make-absolute-uris' :)
          let $state := p:shift(40, $input, $state)         (: 'make-absolute-uris' :)
          return $state
        else if ($state[$p:l1] = 42) then                   (: 'namespace-rename' :)
          let $state := p:shift(42, $input, $state)         (: 'namespace-rename' :)
          return $state
        else if ($state[$p:l1] = 43) then                   (: 'pack' :)
          let $state := p:shift(43, $input, $state)         (: 'pack' :)
          return $state
        else if ($state[$p:l1] = 44) then                   (: 'parameters' :)
          let $state := p:shift(44, $input, $state)         (: 'parameters' :)
          return $state
        else if ($state[$p:l1] = 48) then                   (: 'rename' :)
          let $state := p:shift(48, $input, $state)         (: 'rename' :)
          return $state
        else if ($state[$p:l1] = 49) then                   (: 'replace' :)
          let $state := p:shift(49, $input, $state)         (: 'replace' :)
          return $state
        else if ($state[$p:l1] = 51) then                   (: 'set-attributes' :)
          let $state := p:shift(51, $input, $state)         (: 'set-attributes' :)
          return $state
        else if ($state[$p:l1] = 52) then                   (: 'sink' :)
          let $state := p:shift(52, $input, $state)         (: 'sink' :)
          return $state
        else if ($state[$p:l1] = 53) then                   (: 'split-sequence' :)
          let $state := p:shift(53, $input, $state)         (: 'split-sequence' :)
          return $state
        else if ($state[$p:l1] = 55) then                   (: 'store' :)
          let $state := p:shift(55, $input, $state)         (: 'store' :)
          return $state
        else if ($state[$p:l1] = 56) then                   (: 'string-replace' :)
          let $state := p:shift(56, $input, $state)         (: 'string-replace' :)
          return $state
        else if ($state[$p:l1] = 58) then                   (: 'unescape-markup' :)
          let $state := p:shift(58, $input, $state)         (: 'unescape-markup' :)
          return $state
        else if ($state[$p:l1] = 59) then                   (: 'unwrap' :)
          let $state := p:shift(59, $input, $state)         (: 'unwrap' :)
          return $state
        else if ($state[$p:l1] = 60) then                   (: 'uuid' :)
          let $state := p:shift(60, $input, $state)         (: 'uuid' :)
          return $state
        else if ($state[$p:l1] = 61) then                   (: 'validate-with-relax-ng' :)
          let $state := p:shift(61, $input, $state)         (: 'validate-with-relax-ng' :)
          return $state
        else if ($state[$p:l1] = 62) then                   (: 'validate-with-schematron' :)
          let $state := p:shift(62, $input, $state)         (: 'validate-with-schematron' :)
          return $state
        else if ($state[$p:l1] = 63) then                   (: 'validate-with-xml-schema' :)
          let $state := p:shift(63, $input, $state)         (: 'validate-with-xml-schema' :)
          return $state
        else if ($state[$p:l1] = 66) then                   (: 'wrap' :)
          let $state := p:shift(66, $input, $state)         (: 'wrap' :)
          return $state
        else if ($state[$p:l1] = 67) then                   (: 'wrap-sequence' :)
          let $state := p:shift(67, $input, $state)         (: 'wrap-sequence' :)
          return $state
        else if ($state[$p:l1] = 68) then                   (: 'www-form-urldecode' :)
          let $state := p:shift(68, $input, $state)         (: 'www-form-urldecode' :)
          return $state
        else if ($state[$p:l1] = 69) then                   (: 'www-form-urlencode' :)
          let $state := p:shift(69, $input, $state)         (: 'www-form-urlencode' :)
          return $state
        else if ($state[$p:l1] = 70) then                   (: 'xinclude' :)
          let $state := p:shift(70, $input, $state)         (: 'xinclude' :)
          return $state
        else if ($state[$p:l1] = 71) then                   (: 'xquery' :)
          let $state := p:shift(71, $input, $state)         (: 'xquery' :)
          return $state
        else if ($state[$p:l1] = 73) then                   (: 'xslt' :)
          let $state := p:shift(73, $input, $state)         (: 'xslt' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(72, $input, $state)         (: 'xsl-formatter' :)
          return $state
      return $state
  let $state := p:lookahead1W(49, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "atomicStep", $count)
};

(:~
 : Try parsing atomicStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-atomicStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'default' :)
     or $state[$p:l1] = 19                                  (: 'else' :)
     or $state[$p:l1] = 23                                  (: 'for-each' :)
     or $state[$p:l1] = 29                                  (: 'if' :)
     or $state[$p:l1] = 34                                  (: 'library' :)
     or $state[$p:l1] = 38                                  (: 'namespace' :)
     or $state[$p:l1] = 41                                  (: 'pipeline' :)
     or $state[$p:l1] = 46                                  (: 'step' :)
     or $state[$p:l1] = 54                                  (: 'try' :)
     or $state[$p:l1] = 57                                  (: 'variable' :)
     or $state[$p:l1] = 64                                  (: 'viewport' :)
     or $state[$p:l1] = 65) then                            (: 'viewport' :)
      let $state := p:lookahead2W(25, $input, $state)       (: Whitespace | ':' | '=' :)
      return $state
    else if ($state[$p:l1] = 14                             (: 'add-xml-base' :)
          or $state[$p:l1] = 15                             (: 'compare' :)
          or $state[$p:l1] = 17                             (: 'count' :)
          or $state[$p:l1] = 18                             (: 'delete' :)
          or $state[$p:l1] = 20                             (: 'directory-list' :)
          or $state[$p:l1] = 21                             (: 'error' :)
          or $state[$p:l1] = 25                             (: 'escape-markup' :)
          or $state[$p:l1] = 26                             (: 'exec' :)
          or $state[$p:l1] = 27                             (: 'filter' :)
          or $state[$p:l1] = 28                             (: 'hash' :)
          or $state[$p:l1] = 31                             (: 'http-request' :)
          or $state[$p:l1] = 32                             (: 'identity' :)
          or $state[$p:l1] = 33                             (: 'insert' :)
          or $state[$p:l1] = 35                             (: 'label-elements' :)
          or $state[$p:l1] = 37                             (: 'load' :)
          or $state[$p:l1] = 39                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 40                             (: 'namespace-rename' :)
          or $state[$p:l1] = 42                             (: 'pack' :)
          or $state[$p:l1] = 43                             (: 'parameters' :)
          or $state[$p:l1] = 44                             (: 'rename' :)
          or $state[$p:l1] = 48                             (: 'replace' :)
          or $state[$p:l1] = 49                             (: 'set-attributes' :)
          or $state[$p:l1] = 51                             (: 'sink' :)
          or $state[$p:l1] = 52                             (: 'split-sequence' :)
          or $state[$p:l1] = 53                             (: 'store' :)
          or $state[$p:l1] = 55                             (: 'string-replace' :)
          or $state[$p:l1] = 56                             (: 'unescape-markup' :)
          or $state[$p:l1] = 58                             (: 'unwrap' :)
          or $state[$p:l1] = 59                             (: 'uuid' :)
          or $state[$p:l1] = 60                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 61                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 62                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 63                             (: 'wrap' :)
          or $state[$p:l1] = 66                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 67                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 68                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 69                             (: 'xinclude' :)
          or $state[$p:l1] = 70                             (: 'xquery' :)
          or $state[$p:l1] = 71                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 72                             (: 'xslt' :)
          or $state[$p:l1] = 73) then                       (: 'xslt' :)
      let $state := p:lookahead2W(53, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 1541                           (: NCName^Token '=' :)
          or $state[$p:lk] = 1550                           (: 'add-attribute' '=' :)
          or $state[$p:lk] = 1551                           (: 'add-xml-base' '=' :)
          or $state[$p:lk] = 1553                           (: 'compare' '=' :)
          or $state[$p:lk] = 1554                           (: 'count' '=' :)
          or $state[$p:lk] = 1555                           (: 'default' '=' :)
          or $state[$p:lk] = 1556                           (: 'delete' '=' :)
          or $state[$p:lk] = 1557                           (: 'directory-list' '=' :)
          or $state[$p:lk] = 1559                           (: 'else' '=' :)
          or $state[$p:lk] = 1561                           (: 'error' '=' :)
          or $state[$p:lk] = 1562                           (: 'escape-markup' '=' :)
          or $state[$p:lk] = 1563                           (: 'exec' '=' :)
          or $state[$p:lk] = 1564                           (: 'filter' '=' :)
          or $state[$p:lk] = 1565                           (: 'for-each' '=' :)
          or $state[$p:lk] = 1567                           (: 'hash' '=' :)
          or $state[$p:lk] = 1568                           (: 'http-request' '=' :)
          or $state[$p:lk] = 1569                           (: 'identity' '=' :)
          or $state[$p:lk] = 1570                           (: 'if' '=' :)
          or $state[$p:lk] = 1571                           (: 'insert' '=' :)
          or $state[$p:lk] = 1573                           (: 'label-elements' '=' :)
          or $state[$p:lk] = 1574                           (: 'library' '=' :)
          or $state[$p:lk] = 1575                           (: 'load' '=' :)
          or $state[$p:lk] = 1576                           (: 'make-absolute-uris' '=' :)
          or $state[$p:lk] = 1577                           (: 'namespace' '=' :)
          or $state[$p:lk] = 1578                           (: 'namespace-rename' '=' :)
          or $state[$p:lk] = 1579                           (: 'pack' '=' :)
          or $state[$p:lk] = 1580                           (: 'parameters' '=' :)
          or $state[$p:lk] = 1582                           (: 'pipeline' '=' :)
          or $state[$p:lk] = 1584                           (: 'rename' '=' :)
          or $state[$p:lk] = 1585                           (: 'replace' '=' :)
          or $state[$p:lk] = 1587                           (: 'set-attributes' '=' :)
          or $state[$p:lk] = 1588                           (: 'sink' '=' :)
          or $state[$p:lk] = 1589                           (: 'split-sequence' '=' :)
          or $state[$p:lk] = 1590                           (: 'step' '=' :)
          or $state[$p:lk] = 1591                           (: 'store' '=' :)
          or $state[$p:lk] = 1592                           (: 'string-replace' '=' :)
          or $state[$p:lk] = 1593                           (: 'try' '=' :)
          or $state[$p:lk] = 1594                           (: 'unescape-markup' '=' :)
          or $state[$p:lk] = 1595                           (: 'unwrap' '=' :)
          or $state[$p:lk] = 1596                           (: 'uuid' '=' :)
          or $state[$p:lk] = 1597                           (: 'validate-with-relax-ng' '=' :)
          or $state[$p:lk] = 1598                           (: 'validate-with-schematron' '=' :)
          or $state[$p:lk] = 1599                           (: 'validate-with-xml-schema' '=' :)
          or $state[$p:lk] = 1600                           (: 'variable' '=' :)
          or $state[$p:lk] = 1601                           (: 'viewport' '=' :)
          or $state[$p:lk] = 1602                           (: 'wrap' '=' :)
          or $state[$p:lk] = 1603                           (: 'wrap-sequence' '=' :)
          or $state[$p:lk] = 1604                           (: 'www-form-urldecode' '=' :)
          or $state[$p:lk] = 1605                           (: 'www-form-urlencode' '=' :)
          or $state[$p:lk] = 1606                           (: 'xinclude' '=' :)
          or $state[$p:lk] = 1607                           (: 'xquery' '=' :)
          or $state[$p:lk] = 1608                           (: 'xsl-formatter' '=' :)
          or $state[$p:lk] = 1609) then                     (: 'xslt' '=' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 14                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 15                                  (: 'compare' :)
     or $state[$p:l1] = 17                                  (: 'count' :)
     or $state[$p:l1] = 18                                  (: 'delete' :)
     or $state[$p:l1] = 20                                  (: 'directory-list' :)
     or $state[$p:l1] = 21                                  (: 'error' :)
     or $state[$p:l1] = 25                                  (: 'escape-markup' :)
     or $state[$p:l1] = 26                                  (: 'exec' :)
     or $state[$p:l1] = 27                                  (: 'filter' :)
     or $state[$p:l1] = 28                                  (: 'hash' :)
     or $state[$p:l1] = 31                                  (: 'http-request' :)
     or $state[$p:l1] = 32                                  (: 'identity' :)
     or $state[$p:l1] = 33                                  (: 'insert' :)
     or $state[$p:l1] = 35                                  (: 'label-elements' :)
     or $state[$p:l1] = 37                                  (: 'load' :)
     or $state[$p:l1] = 39                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 40                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 42                                  (: 'pack' :)
     or $state[$p:l1] = 43                                  (: 'parameters' :)
     or $state[$p:l1] = 44                                  (: 'rename' :)
     or $state[$p:l1] = 48                                  (: 'replace' :)
     or $state[$p:l1] = 49                                  (: 'set-attributes' :)
     or $state[$p:l1] = 51                                  (: 'sink' :)
     or $state[$p:l1] = 52                                  (: 'split-sequence' :)
     or $state[$p:l1] = 53                                  (: 'store' :)
     or $state[$p:l1] = 55                                  (: 'string-replace' :)
     or $state[$p:l1] = 56                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 58                                  (: 'unwrap' :)
     or $state[$p:l1] = 59                                  (: 'uuid' :)
     or $state[$p:l1] = 60                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 61                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 62                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 63                                  (: 'wrap' :)
     or $state[$p:l1] = 66                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 67                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 68                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 69                                  (: 'xinclude' :)
     or $state[$p:l1] = 70                                  (: 'xquery' :)
     or $state[$p:l1] = 71                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 72                                  (: 'xslt' :)
     or $state[$p:l1] = 73) then                            (: 'xslt' :)
      let $state := p:lookahead2W(52, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5                                   (: NCName^Token :)
     or $state[$p:lk] = 19                                  (: 'default' :)
     or $state[$p:lk] = 23                                  (: 'else' :)
     or $state[$p:lk] = 29                                  (: 'for-each' :)
     or $state[$p:lk] = 34                                  (: 'if' :)
     or $state[$p:lk] = 38                                  (: 'library' :)
     or $state[$p:lk] = 41                                  (: 'namespace' :)
     or $state[$p:lk] = 46                                  (: 'pipeline' :)
     or $state[$p:lk] = 54                                  (: 'step' :)
     or $state[$p:lk] = 57                                  (: 'try' :)
     or $state[$p:lk] = 64                                  (: 'variable' :)
     or $state[$p:lk] = 65                                  (: 'viewport' :)
     or $state[$p:lk] = 1422                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1423                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1425                                (: 'compare' ':' :)
     or $state[$p:lk] = 1426                                (: 'count' ':' :)
     or $state[$p:lk] = 1428                                (: 'delete' ':' :)
     or $state[$p:lk] = 1429                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1433                                (: 'error' ':' :)
     or $state[$p:lk] = 1434                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1435                                (: 'exec' ':' :)
     or $state[$p:lk] = 1436                                (: 'filter' ':' :)
     or $state[$p:lk] = 1439                                (: 'hash' ':' :)
     or $state[$p:lk] = 1440                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1441                                (: 'identity' ':' :)
     or $state[$p:lk] = 1443                                (: 'insert' ':' :)
     or $state[$p:lk] = 1445                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1447                                (: 'load' ':' :)
     or $state[$p:lk] = 1448                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1450                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1451                                (: 'pack' ':' :)
     or $state[$p:lk] = 1452                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1456                                (: 'rename' ':' :)
     or $state[$p:lk] = 1457                                (: 'replace' ':' :)
     or $state[$p:lk] = 1459                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1460                                (: 'sink' ':' :)
     or $state[$p:lk] = 1461                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1463                                (: 'store' ':' :)
     or $state[$p:lk] = 1464                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1466                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1467                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1468                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1469                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1470                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1471                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1474                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1475                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1476                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1477                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1478                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1479                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1480                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1481) then                          (: 'xslt' ':' :)
      let $state := p:try-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state :=
        if ($state[$p:l1] = 15) then                        (: 'add-xml-base' :)
          let $state := p:shift(15, $input, $state)         (: 'add-xml-base' :)
          return $state
        else if ($state[$p:l1] = 14) then                   (: 'add-attribute' :)
          let $state := p:shift(14, $input, $state)         (: 'add-attribute' :)
          return $state
        else if ($state[$p:l1] = 17) then                   (: 'compare' :)
          let $state := p:shift(17, $input, $state)         (: 'compare' :)
          return $state
        else if ($state[$p:l1] = 18) then                   (: 'count' :)
          let $state := p:shift(18, $input, $state)         (: 'count' :)
          return $state
        else if ($state[$p:l1] = 20) then                   (: 'delete' :)
          let $state := p:shift(20, $input, $state)         (: 'delete' :)
          return $state
        else if ($state[$p:l1] = 21) then                   (: 'directory-list' :)
          let $state := p:shift(21, $input, $state)         (: 'directory-list' :)
          return $state
        else if ($state[$p:l1] = 25) then                   (: 'error' :)
          let $state := p:shift(25, $input, $state)         (: 'error' :)
          return $state
        else if ($state[$p:l1] = 26) then                   (: 'escape-markup' :)
          let $state := p:shift(26, $input, $state)         (: 'escape-markup' :)
          return $state
        else if ($state[$p:l1] = 27) then                   (: 'exec' :)
          let $state := p:shift(27, $input, $state)         (: 'exec' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: 'filter' :)
          let $state := p:shift(28, $input, $state)         (: 'filter' :)
          return $state
        else if ($state[$p:l1] = 31) then                   (: 'hash' :)
          let $state := p:shift(31, $input, $state)         (: 'hash' :)
          return $state
        else if ($state[$p:l1] = 32) then                   (: 'http-request' :)
          let $state := p:shift(32, $input, $state)         (: 'http-request' :)
          return $state
        else if ($state[$p:l1] = 33) then                   (: 'identity' :)
          let $state := p:shift(33, $input, $state)         (: 'identity' :)
          return $state
        else if ($state[$p:l1] = 35) then                   (: 'insert' :)
          let $state := p:shift(35, $input, $state)         (: 'insert' :)
          return $state
        else if ($state[$p:l1] = 37) then                   (: 'label-elements' :)
          let $state := p:shift(37, $input, $state)         (: 'label-elements' :)
          return $state
        else if ($state[$p:l1] = 39) then                   (: 'load' :)
          let $state := p:shift(39, $input, $state)         (: 'load' :)
          return $state
        else if ($state[$p:l1] = 40) then                   (: 'make-absolute-uris' :)
          let $state := p:shift(40, $input, $state)         (: 'make-absolute-uris' :)
          return $state
        else if ($state[$p:l1] = 42) then                   (: 'namespace-rename' :)
          let $state := p:shift(42, $input, $state)         (: 'namespace-rename' :)
          return $state
        else if ($state[$p:l1] = 43) then                   (: 'pack' :)
          let $state := p:shift(43, $input, $state)         (: 'pack' :)
          return $state
        else if ($state[$p:l1] = 44) then                   (: 'parameters' :)
          let $state := p:shift(44, $input, $state)         (: 'parameters' :)
          return $state
        else if ($state[$p:l1] = 48) then                   (: 'rename' :)
          let $state := p:shift(48, $input, $state)         (: 'rename' :)
          return $state
        else if ($state[$p:l1] = 49) then                   (: 'replace' :)
          let $state := p:shift(49, $input, $state)         (: 'replace' :)
          return $state
        else if ($state[$p:l1] = 51) then                   (: 'set-attributes' :)
          let $state := p:shift(51, $input, $state)         (: 'set-attributes' :)
          return $state
        else if ($state[$p:l1] = 52) then                   (: 'sink' :)
          let $state := p:shift(52, $input, $state)         (: 'sink' :)
          return $state
        else if ($state[$p:l1] = 53) then                   (: 'split-sequence' :)
          let $state := p:shift(53, $input, $state)         (: 'split-sequence' :)
          return $state
        else if ($state[$p:l1] = 55) then                   (: 'store' :)
          let $state := p:shift(55, $input, $state)         (: 'store' :)
          return $state
        else if ($state[$p:l1] = 56) then                   (: 'string-replace' :)
          let $state := p:shift(56, $input, $state)         (: 'string-replace' :)
          return $state
        else if ($state[$p:l1] = 58) then                   (: 'unescape-markup' :)
          let $state := p:shift(58, $input, $state)         (: 'unescape-markup' :)
          return $state
        else if ($state[$p:l1] = 59) then                   (: 'unwrap' :)
          let $state := p:shift(59, $input, $state)         (: 'unwrap' :)
          return $state
        else if ($state[$p:l1] = 60) then                   (: 'uuid' :)
          let $state := p:shift(60, $input, $state)         (: 'uuid' :)
          return $state
        else if ($state[$p:l1] = 61) then                   (: 'validate-with-relax-ng' :)
          let $state := p:shift(61, $input, $state)         (: 'validate-with-relax-ng' :)
          return $state
        else if ($state[$p:l1] = 62) then                   (: 'validate-with-schematron' :)
          let $state := p:shift(62, $input, $state)         (: 'validate-with-schematron' :)
          return $state
        else if ($state[$p:l1] = 63) then                   (: 'validate-with-xml-schema' :)
          let $state := p:shift(63, $input, $state)         (: 'validate-with-xml-schema' :)
          return $state
        else if ($state[$p:l1] = 66) then                   (: 'wrap' :)
          let $state := p:shift(66, $input, $state)         (: 'wrap' :)
          return $state
        else if ($state[$p:l1] = 67) then                   (: 'wrap-sequence' :)
          let $state := p:shift(67, $input, $state)         (: 'wrap-sequence' :)
          return $state
        else if ($state[$p:l1] = 68) then                   (: 'www-form-urldecode' :)
          let $state := p:shift(68, $input, $state)         (: 'www-form-urldecode' :)
          return $state
        else if ($state[$p:l1] = 69) then                   (: 'www-form-urlencode' :)
          let $state := p:shift(69, $input, $state)         (: 'www-form-urlencode' :)
          return $state
        else if ($state[$p:l1] = 70) then                   (: 'xinclude' :)
          let $state := p:shift(70, $input, $state)         (: 'xinclude' :)
          return $state
        else if ($state[$p:l1] = 71) then                   (: 'xquery' :)
          let $state := p:shift(71, $input, $state)         (: 'xquery' :)
          return $state
        else if ($state[$p:l1] = 73) then                   (: 'xslt' :)
          let $state := p:shift(73, $input, $state)         (: 'xslt' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(72, $input, $state)         (: 'xsl-formatter' :)
          return $state
      return $state
  let $state := p:lookahead1W(49, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "atomicStep", $count)
};

(:~
 : Parse groupStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-groupStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "groupStep", $count)
};

(:~
 : Try parsing groupStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-groupStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "groupStep", $count)
};

(:~
 : Parse tryStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-tryStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(57, $input, $state)                 (: 'try' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(9, $input, $state)            (: Whitespace | 'catch' :)
  let $state := p:shift(16, $input, $state)                 (: 'catch' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "tryStep", $count)
};

(:~
 : Try parsing tryStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-tryStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(57, $input, $state)                 (: 'try' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(9, $input, $state)            (: Whitespace | 'catch' :)
  let $state := p:shift(16, $input, $state)                 (: 'catch' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "tryStep", $count)
};

(:~
 : Parse output.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-output($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(3, $input, $state)             (: 'primary' :)
  let $state :=
    if ($state[$p:l1] = 47) then                            (: 'primary' :)
      let $state := p:lookahead2W(46, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1071                                (: 'primary' ')' :)
     or $state[$p:lk] = 1199) then                          (: 'primary' ',' :)
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(39, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 36                         (: 'item' :)
              or $state[$p:l1] = 50) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 50) then                    (: 'sequence' :)
              let $state := p:shift(50, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(36, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "output", $count)
};

(:~
 : Try parsing output.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-output($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(3, $input, $state)             (: 'primary' :)
  let $state :=
    if ($state[$p:l1] = 47) then                            (: 'primary' :)
      let $state := p:lookahead2W(46, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1071                                (: 'primary' ')' :)
     or $state[$p:lk] = 1199) then                          (: 'primary' ',' :)
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(39, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 36                         (: 'item' :)
              or $state[$p:l1] = 50) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 50) then                    (: 'sequence' :)
              let $state := p:shift(50, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(36, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "output", $count)
};

(:~
 : Parse the 1st loop of production outports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-outports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(24, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(4, $input, $state)      (: EPSILON | Whitespace :)
        let $state := p:parse-output($input, $state)
        return p:parse-outports-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production outports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-outports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(24, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(4, $input, $state)      (: EPSILON | Whitespace :)
        let $state := p:try-output($input, $state)
        return p:try-outports-1($input, $state)
};

(:~
 : Parse outports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-outports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: Whitespace | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 47) then                       (: 'primary' :)
      let $state := p:parse-output($input, $state)
      return $state
    else
      $state
  let $state := p:parse-outports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "outports", $count)
};

(:~
 : Try parsing outports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-outports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: Whitespace | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 47) then                       (: 'primary' :)
      let $state := p:try-output($input, $state)
      return $state
    else
      $state
  let $state := p:try-outports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "outports", $count)
};

(:~
 : Parse otherwiseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-otherwiseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(23, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "otherwiseStep", $count)
};

(:~
 : Try parsing otherwiseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-otherwiseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(23, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "otherwiseStep", $count)
};

(:~
 : Parse whenStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-whenStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(23, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(12, $input, $state)           (: Whitespace | 'if' :)
  let $state := p:shift(34, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "whenStep", $count)
};

(:~
 : Try parsing whenStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-whenStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(23, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(12, $input, $state)           (: Whitespace | 'if' :)
  let $state := p:shift(34, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "whenStep", $count)
};

(:~
 : Parse the 1st loop of production chooseStep (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-chooseStep-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(50, $input, $state)         (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    let $state :=
      if ($state[$p:l1] = 23) then                          (: 'else' :)
        let $state := p:lookahead2W(40, $input, $state)     (: Whitespace | ':' | '=' | 'if' | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 4375) then                       (: 'else' 'if' :)
        $state
      else
        let $state := p:parse-whenStep($input, $state)
        return p:parse-chooseStep-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production chooseStep (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-chooseStep-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(50, $input, $state)         (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    let $state :=
      if ($state[$p:l1] = 23) then                          (: 'else' :)
        let $state := p:lookahead2W(40, $input, $state)     (: Whitespace | ':' | '=' | 'if' | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 4375) then                       (: 'else' 'if' :)
        $state
      else
        let $state := p:try-whenStep($input, $state)
        return p:try-chooseStep-1($input, $state)
};

(:~
 : Parse chooseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-chooseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(34, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:parse-chooseStep-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 23) then                            (: 'else' :)
      let $state := p:lookahead2W(35, $input, $state)       (: Whitespace | ':' | '=' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 9495) then                     (: 'else' '{' :)
      let $state := p:parse-otherwiseStep($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "chooseStep", $count)
};

(:~
 : Try parsing chooseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-chooseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(34, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:try-chooseStep-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 23) then                            (: 'else' :)
      let $state := p:lookahead2W(35, $input, $state)       (: Whitespace | ':' | '=' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 9495) then                     (: 'else' '{' :)
      let $state := p:try-otherwiseStep($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "chooseStep", $count)
};

(:~
 : Parse viewportStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-viewportStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(65, $input, $state)                 (: 'viewport' :)
  let $state := p:lookahead1W(31, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "viewportStep", $count)
};

(:~
 : Try parsing viewportStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-viewportStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(65, $input, $state)                 (: 'viewport' :)
  let $state := p:lookahead1W(31, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "viewportStep", $count)
};

(:~
 : Parse fromEmpty.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | 'empty' :)
  let $state := p:shift(24, $input, $state)                 (: 'empty' :)
  return p:reduce($state, "fromEmpty", $count)
};

(:~
 : Try parsing fromEmpty.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | 'empty' :)
  let $state := p:shift(24, $input, $state)                 (: 'empty' :)
  return p:reduce($state, "fromEmpty", $count)
};

(:~
 : Parse fromDocument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromDocument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(10, $input, $state)           (: Whitespace | 'document' :)
  let $state := p:shift(22, $input, $state)                 (: 'document' :)
  let $state := p:lookahead1W(6, $input, $state)            (: Whitespace | quotedstr :)
  let $state := p:shift(4, $input, $state)                  (: quotedstr :)
  return p:reduce($state, "fromDocument", $count)
};

(:~
 : Try parsing fromDocument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromDocument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(10, $input, $state)           (: Whitespace | 'document' :)
  let $state := p:shift(22, $input, $state)                 (: 'document' :)
  let $state := p:lookahead1W(6, $input, $state)            (: Whitespace | quotedstr :)
  let $state := p:shift(4, $input, $state)                  (: quotedstr :)
  return p:reduce($state, "fromDocument", $count)
};

(:~
 : Parse fromPipe.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromPipe($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(14, $input, $state)           (: Whitespace | 'pipe' :)
  let $state := p:shift(45, $input, $state)                 (: 'pipe' :)
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: Whitespace | '/' :)
  let $state := p:shift(10, $input, $state)                 (: '/' :)
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  return p:reduce($state, "fromPipe", $count)
};

(:~
 : Try parsing fromPipe.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromPipe($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(30, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(14, $input, $state)           (: Whitespace | 'pipe' :)
  let $state := p:shift(45, $input, $state)                 (: 'pipe' :)
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: Whitespace | '/' :)
  let $state := p:shift(10, $input, $state)                 (: '/' :)
  let $state := p:lookahead1W(43, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  return p:reduce($state, "fromPipe", $count)
};

(:~
 : Parse from.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-from($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 30) then                            (: 'from' :)
      let $state := p:lookahead2W(36, $input, $state)       (: Whitespace | 'document' | 'empty' | 'pipe' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5790) then                          (: 'from' 'pipe' :)
      let $state := p:parse-fromPipe($input, $state)
      return $state
    else if ($state[$p:lk] = 2846) then                     (: 'from' 'document' :)
      let $state := p:parse-fromDocument($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-fromEmpty($input, $state)
      return $state
  return p:reduce($state, "from", $count)
};

(:~
 : Try parsing from.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-from($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 30) then                            (: 'from' :)
      let $state := p:lookahead2W(36, $input, $state)       (: Whitespace | 'document' | 'empty' | 'pipe' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5790) then                          (: 'from' 'pipe' :)
      let $state := p:try-fromPipe($input, $state)
      return $state
    else if ($state[$p:lk] = 2846) then                     (: 'from' 'document' :)
      let $state := p:try-fromDocument($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-fromEmpty($input, $state)
      return $state
  return p:reduce($state, "from", $count)
};

(:~
 : Parse forEachStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-forEachStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(29, $input, $state)                 (: 'for-each' :)
  let $state := p:lookahead1W(31, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "forEachStep", $count)
};

(:~
 : Try parsing forEachStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-forEachStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(29, $input, $state)                 (: 'for-each' :)
  let $state := p:lookahead1W(31, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(26, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  return p:reduce($state, "forEachStep", $count)
};

(:~
 : Parse the 1st loop of production expr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(20, $input, $state)          (: noParExpression | '(' :)
    let $state :=
      if ($state[$p:l1] = 3) then                           (: noParExpression :)
        let $state := p:shift(3, $input, $state)            (: noParExpression :)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:parse-parExpression($input, $state)
        return $state
    let $state := p:lookahead1(28, $input, $state)          (: noParExpression | '(' | ')' :)
    return
      if ($state[$p:l1] = 8) then                           (: ')' :)
        $state
      else
        p:parse-expr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production expr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(20, $input, $state)          (: noParExpression | '(' :)
    let $state :=
      if ($state[$p:l1] = 3) then                           (: noParExpression :)
        let $state := p:shift(3, $input, $state)            (: noParExpression :)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:try-parExpression($input, $state)
        return $state
    let $state := p:lookahead1(28, $input, $state)          (: noParExpression | '(' | ')' :)
    return
      if ($state[$p:l1] = 8) then                           (: ')' :)
        $state
      else
        p:try-expr-1($input, $state)
};

(:~
 : Parse expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-expr-1($input, $state)
  return p:reduce($state, "expr", $count)
};

(:~
 : Try parsing expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-expr-1($input, $state)
  return p:reduce($state, "expr", $count)
};

(:~
 : Parse parExpression.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-parExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:parse-expr($input, $state)
  let $state := p:lookahead1(1, $input, $state)             (: ')' :)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "parExpression", $count)
};

(:~
 : Try parsing parExpression.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-parExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:try-expr($input, $state)
  let $state := p:lookahead1(1, $input, $state)             (: ')' :)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "parExpression", $count)
};

(:~
 : Parse variable.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-variable($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-QName($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: Whitespace | '=' :)
  let $state := p:shift(12, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(17, $input, $state)           (: Whitespace | 'variable' :)
  let $state := p:shift(64, $input, $state)                 (: 'variable' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  return p:reduce($state, "variable", $count)
};

(:~
 : Try parsing variable.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-variable($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-QName($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: Whitespace | '=' :)
  let $state := p:shift(12, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(17, $input, $state)           (: Whitespace | 'variable' :)
  let $state := p:shift(64, $input, $state)                 (: 'variable' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  return p:reduce($state, "variable", $count)
};

(:~
 : Parse the 1st loop of production subpipeline (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-subpipeline-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(44, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
    let $state :=
      if ($state[$p:l1] = 34) then                          (: 'if' :)
        let $state := p:lookahead2W(30, $input, $state)     (: Whitespace | '(' | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1442) then                    (: 'if' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1570) then               (: 'if' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 57) then                     (: 'try' :)
        let $state := p:lookahead2W(35, $input, $state)     (: Whitespace | ':' | '=' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1465) then                    (: 'try' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1593) then               (: 'try' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 29                           (: 'viewport' :)
            or $state[$p:l1] = 65) then                     (: 'viewport' :)
        let $state := p:lookahead2W(41, $input, $state)     (: Whitespace | '(' | ':' | '=' | 'from' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1437                          (: 'viewport' ':' :)
           or $state[$p:lk] = 1473) then                    (: 'viewport' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1565                     (: 'viewport' '=' :)
                or $state[$p:lk] = 1601) then               (: 'viewport' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 5                            (: 'default' :)
            or $state[$p:l1] = 19                           (: 'else' :)
            or $state[$p:l1] = 23                           (: 'library' :)
            or $state[$p:l1] = 38                           (: 'namespace' :)
            or $state[$p:l1] = 41                           (: 'pipeline' :)
            or $state[$p:l1] = 46                           (: 'step' :)
            or $state[$p:l1] = 54                           (: 'variable' :)
            or $state[$p:l1] = 64) then                     (: 'variable' :)
        let $state := p:lookahead2W(25, $input, $state)     (: Whitespace | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1413                          (: 'default' ':' :)
           or $state[$p:lk] = 1427                          (: 'else' ':' :)
           or $state[$p:lk] = 1431                          (: 'library' ':' :)
           or $state[$p:lk] = 1446                          (: 'namespace' ':' :)
           or $state[$p:lk] = 1449                          (: 'pipeline' ':' :)
           or $state[$p:lk] = 1454                          (: 'step' ':' :)
           or $state[$p:lk] = 1462                          (: 'variable' ':' :)
           or $state[$p:lk] = 1472) then                    (: 'variable' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1541                     (: 'default' '=' :)
                or $state[$p:lk] = 1555                     (: 'else' '=' :)
                or $state[$p:lk] = 1559                     (: 'library' '=' :)
                or $state[$p:lk] = 1574                     (: 'namespace' '=' :)
                or $state[$p:lk] = 1577                     (: 'pipeline' '=' :)
                or $state[$p:lk] = 1582                     (: 'step' '=' :)
                or $state[$p:lk] = 1590                     (: 'variable' '=' :)
                or $state[$p:lk] = 1600) then               (: 'variable' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 14                           (: 'add-xml-base' :)
            or $state[$p:l1] = 15                           (: 'compare' :)
            or $state[$p:l1] = 17                           (: 'count' :)
            or $state[$p:l1] = 18                           (: 'delete' :)
            or $state[$p:l1] = 20                           (: 'directory-list' :)
            or $state[$p:l1] = 21                           (: 'error' :)
            or $state[$p:l1] = 25                           (: 'escape-markup' :)
            or $state[$p:l1] = 26                           (: 'exec' :)
            or $state[$p:l1] = 27                           (: 'filter' :)
            or $state[$p:l1] = 28                           (: 'hash' :)
            or $state[$p:l1] = 31                           (: 'http-request' :)
            or $state[$p:l1] = 32                           (: 'identity' :)
            or $state[$p:l1] = 33                           (: 'insert' :)
            or $state[$p:l1] = 35                           (: 'label-elements' :)
            or $state[$p:l1] = 37                           (: 'load' :)
            or $state[$p:l1] = 39                           (: 'make-absolute-uris' :)
            or $state[$p:l1] = 40                           (: 'namespace-rename' :)
            or $state[$p:l1] = 42                           (: 'pack' :)
            or $state[$p:l1] = 43                           (: 'parameters' :)
            or $state[$p:l1] = 44                           (: 'rename' :)
            or $state[$p:l1] = 48                           (: 'replace' :)
            or $state[$p:l1] = 49                           (: 'set-attributes' :)
            or $state[$p:l1] = 51                           (: 'sink' :)
            or $state[$p:l1] = 52                           (: 'split-sequence' :)
            or $state[$p:l1] = 53                           (: 'store' :)
            or $state[$p:l1] = 55                           (: 'string-replace' :)
            or $state[$p:l1] = 56                           (: 'unescape-markup' :)
            or $state[$p:l1] = 58                           (: 'unwrap' :)
            or $state[$p:l1] = 59                           (: 'uuid' :)
            or $state[$p:l1] = 60                           (: 'validate-with-relax-ng' :)
            or $state[$p:l1] = 61                           (: 'validate-with-schematron' :)
            or $state[$p:l1] = 62                           (: 'validate-with-xml-schema' :)
            or $state[$p:l1] = 63                           (: 'wrap' :)
            or $state[$p:l1] = 66                           (: 'wrap-sequence' :)
            or $state[$p:l1] = 67                           (: 'www-form-urldecode' :)
            or $state[$p:l1] = 68                           (: 'www-form-urlencode' :)
            or $state[$p:l1] = 69                           (: 'xinclude' :)
            or $state[$p:l1] = 70                           (: 'xquery' :)
            or $state[$p:l1] = 71                           (: 'xsl-formatter' :)
            or $state[$p:l1] = 72                           (: 'xslt' :)
            or $state[$p:l1] = 73) then                     (: 'xslt' :)
        let $state := p:lookahead2W(53, $input, $state)     (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
        let $state :=
          if ($state[$p:lk] = 1422                          (: 'add-xml-base' ':' :)
           or $state[$p:lk] = 1423                          (: 'compare' ':' :)
           or $state[$p:lk] = 1425                          (: 'count' ':' :)
           or $state[$p:lk] = 1426                          (: 'delete' ':' :)
           or $state[$p:lk] = 1428                          (: 'directory-list' ':' :)
           or $state[$p:lk] = 1429                          (: 'error' ':' :)
           or $state[$p:lk] = 1433                          (: 'escape-markup' ':' :)
           or $state[$p:lk] = 1434                          (: 'exec' ':' :)
           or $state[$p:lk] = 1435                          (: 'filter' ':' :)
           or $state[$p:lk] = 1436                          (: 'hash' ':' :)
           or $state[$p:lk] = 1439                          (: 'http-request' ':' :)
           or $state[$p:lk] = 1440                          (: 'identity' ':' :)
           or $state[$p:lk] = 1441                          (: 'insert' ':' :)
           or $state[$p:lk] = 1443                          (: 'label-elements' ':' :)
           or $state[$p:lk] = 1445                          (: 'load' ':' :)
           or $state[$p:lk] = 1447                          (: 'make-absolute-uris' ':' :)
           or $state[$p:lk] = 1448                          (: 'namespace-rename' ':' :)
           or $state[$p:lk] = 1450                          (: 'pack' ':' :)
           or $state[$p:lk] = 1451                          (: 'parameters' ':' :)
           or $state[$p:lk] = 1452                          (: 'rename' ':' :)
           or $state[$p:lk] = 1456                          (: 'replace' ':' :)
           or $state[$p:lk] = 1457                          (: 'set-attributes' ':' :)
           or $state[$p:lk] = 1459                          (: 'sink' ':' :)
           or $state[$p:lk] = 1460                          (: 'split-sequence' ':' :)
           or $state[$p:lk] = 1461                          (: 'store' ':' :)
           or $state[$p:lk] = 1463                          (: 'string-replace' ':' :)
           or $state[$p:lk] = 1464                          (: 'unescape-markup' ':' :)
           or $state[$p:lk] = 1466                          (: 'unwrap' ':' :)
           or $state[$p:lk] = 1467                          (: 'uuid' ':' :)
           or $state[$p:lk] = 1468                          (: 'validate-with-relax-ng' ':' :)
           or $state[$p:lk] = 1469                          (: 'validate-with-schematron' ':' :)
           or $state[$p:lk] = 1470                          (: 'validate-with-xml-schema' ':' :)
           or $state[$p:lk] = 1471                          (: 'wrap' ':' :)
           or $state[$p:lk] = 1474                          (: 'wrap-sequence' ':' :)
           or $state[$p:lk] = 1475                          (: 'www-form-urldecode' ':' :)
           or $state[$p:lk] = 1476                          (: 'www-form-urlencode' ':' :)
           or $state[$p:lk] = 1477                          (: 'xinclude' ':' :)
           or $state[$p:lk] = 1478                          (: 'xquery' ':' :)
           or $state[$p:lk] = 1479                          (: 'xsl-formatter' ':' :)
           or $state[$p:lk] = 1480                          (: 'xslt' ':' :)
           or $state[$p:lk] = 1481) then                    (: 'xslt' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1550                     (: 'add-xml-base' '=' :)
                or $state[$p:lk] = 1551                     (: 'compare' '=' :)
                or $state[$p:lk] = 1553                     (: 'count' '=' :)
                or $state[$p:lk] = 1554                     (: 'delete' '=' :)
                or $state[$p:lk] = 1556                     (: 'directory-list' '=' :)
                or $state[$p:lk] = 1557                     (: 'error' '=' :)
                or $state[$p:lk] = 1561                     (: 'escape-markup' '=' :)
                or $state[$p:lk] = 1562                     (: 'exec' '=' :)
                or $state[$p:lk] = 1563                     (: 'filter' '=' :)
                or $state[$p:lk] = 1564                     (: 'hash' '=' :)
                or $state[$p:lk] = 1567                     (: 'http-request' '=' :)
                or $state[$p:lk] = 1568                     (: 'identity' '=' :)
                or $state[$p:lk] = 1569                     (: 'insert' '=' :)
                or $state[$p:lk] = 1571                     (: 'label-elements' '=' :)
                or $state[$p:lk] = 1573                     (: 'load' '=' :)
                or $state[$p:lk] = 1575                     (: 'make-absolute-uris' '=' :)
                or $state[$p:lk] = 1576                     (: 'namespace-rename' '=' :)
                or $state[$p:lk] = 1578                     (: 'pack' '=' :)
                or $state[$p:lk] = 1579                     (: 'parameters' '=' :)
                or $state[$p:lk] = 1580                     (: 'rename' '=' :)
                or $state[$p:lk] = 1584                     (: 'replace' '=' :)
                or $state[$p:lk] = 1585                     (: 'set-attributes' '=' :)
                or $state[$p:lk] = 1587                     (: 'sink' '=' :)
                or $state[$p:lk] = 1588                     (: 'split-sequence' '=' :)
                or $state[$p:lk] = 1589                     (: 'store' '=' :)
                or $state[$p:lk] = 1591                     (: 'string-replace' '=' :)
                or $state[$p:lk] = 1592                     (: 'unescape-markup' '=' :)
                or $state[$p:lk] = 1594                     (: 'unwrap' '=' :)
                or $state[$p:lk] = 1595                     (: 'uuid' '=' :)
                or $state[$p:lk] = 1596                     (: 'validate-with-relax-ng' '=' :)
                or $state[$p:lk] = 1597                     (: 'validate-with-schematron' '=' :)
                or $state[$p:lk] = 1598                     (: 'validate-with-xml-schema' '=' :)
                or $state[$p:lk] = 1599                     (: 'wrap' '=' :)
                or $state[$p:lk] = 1602                     (: 'wrap-sequence' '=' :)
                or $state[$p:lk] = 1603                     (: 'www-form-urldecode' '=' :)
                or $state[$p:lk] = 1604                     (: 'www-form-urlencode' '=' :)
                or $state[$p:lk] = 1605                     (: 'xinclude' '=' :)
                or $state[$p:lk] = 1606                     (: 'xquery' '=' :)
                or $state[$p:lk] = 1607                     (: 'xsl-formatter' '=' :)
                or $state[$p:lk] = 1608                     (: 'xslt' '=' :)
                or $state[$p:lk] = 1609) then               (: 'xslt' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 83333                        (: NCName^Token ':' NCName^Token :)
            or $state[$p:lk] = 83342                        (: 'add-attribute' ':' NCName^Token :)
            or $state[$p:lk] = 83343                        (: 'add-xml-base' ':' NCName^Token :)
            or $state[$p:lk] = 83345                        (: 'compare' ':' NCName^Token :)
            or $state[$p:lk] = 83346                        (: 'count' ':' NCName^Token :)
            or $state[$p:lk] = 83347                        (: 'default' ':' NCName^Token :)
            or $state[$p:lk] = 83348                        (: 'delete' ':' NCName^Token :)
            or $state[$p:lk] = 83349                        (: 'directory-list' ':' NCName^Token :)
            or $state[$p:lk] = 83351                        (: 'else' ':' NCName^Token :)
            or $state[$p:lk] = 83353                        (: 'error' ':' NCName^Token :)
            or $state[$p:lk] = 83354                        (: 'escape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83355                        (: 'exec' ':' NCName^Token :)
            or $state[$p:lk] = 83356                        (: 'filter' ':' NCName^Token :)
            or $state[$p:lk] = 83357                        (: 'for-each' ':' NCName^Token :)
            or $state[$p:lk] = 83359                        (: 'hash' ':' NCName^Token :)
            or $state[$p:lk] = 83360                        (: 'http-request' ':' NCName^Token :)
            or $state[$p:lk] = 83361                        (: 'identity' ':' NCName^Token :)
            or $state[$p:lk] = 83362                        (: 'if' ':' NCName^Token :)
            or $state[$p:lk] = 83363                        (: 'insert' ':' NCName^Token :)
            or $state[$p:lk] = 83365                        (: 'label-elements' ':' NCName^Token :)
            or $state[$p:lk] = 83366                        (: 'library' ':' NCName^Token :)
            or $state[$p:lk] = 83367                        (: 'load' ':' NCName^Token :)
            or $state[$p:lk] = 83368                        (: 'make-absolute-uris' ':' NCName^Token :)
            or $state[$p:lk] = 83369                        (: 'namespace' ':' NCName^Token :)
            or $state[$p:lk] = 83370                        (: 'namespace-rename' ':' NCName^Token :)
            or $state[$p:lk] = 83371                        (: 'pack' ':' NCName^Token :)
            or $state[$p:lk] = 83372                        (: 'parameters' ':' NCName^Token :)
            or $state[$p:lk] = 83374                        (: 'pipeline' ':' NCName^Token :)
            or $state[$p:lk] = 83376                        (: 'rename' ':' NCName^Token :)
            or $state[$p:lk] = 83377                        (: 'replace' ':' NCName^Token :)
            or $state[$p:lk] = 83379                        (: 'set-attributes' ':' NCName^Token :)
            or $state[$p:lk] = 83380                        (: 'sink' ':' NCName^Token :)
            or $state[$p:lk] = 83381                        (: 'split-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83382                        (: 'step' ':' NCName^Token :)
            or $state[$p:lk] = 83383                        (: 'store' ':' NCName^Token :)
            or $state[$p:lk] = 83384                        (: 'string-replace' ':' NCName^Token :)
            or $state[$p:lk] = 83385                        (: 'try' ':' NCName^Token :)
            or $state[$p:lk] = 83386                        (: 'unescape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83387                        (: 'unwrap' ':' NCName^Token :)
            or $state[$p:lk] = 83388                        (: 'uuid' ':' NCName^Token :)
            or $state[$p:lk] = 83389                        (: 'validate-with-relax-ng' ':' NCName^Token :)
            or $state[$p:lk] = 83390                        (: 'validate-with-schematron' ':' NCName^Token :)
            or $state[$p:lk] = 83391                        (: 'validate-with-xml-schema' ':' NCName^Token :)
            or $state[$p:lk] = 83392                        (: 'variable' ':' NCName^Token :)
            or $state[$p:lk] = 83393                        (: 'viewport' ':' NCName^Token :)
            or $state[$p:lk] = 83394                        (: 'wrap' ':' NCName^Token :)
            or $state[$p:lk] = 83395                        (: 'wrap-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83396                        (: 'www-form-urldecode' ':' NCName^Token :)
            or $state[$p:lk] = 83397                        (: 'www-form-urlencode' ':' NCName^Token :)
            or $state[$p:lk] = 83398                        (: 'xinclude' ':' NCName^Token :)
            or $state[$p:lk] = 83399                        (: 'xquery' ':' NCName^Token :)
            or $state[$p:lk] = 83400                        (: 'xsl-formatter' ':' NCName^Token :)
            or $state[$p:lk] = 83401                        (: 'xslt' ':' NCName^Token :)
            or $state[$p:lk] = 230789                       (: NCName^Token ':' 'add-attribute' :)
            or $state[$p:lk] = 230798                       (: 'add-attribute' ':' 'add-attribute' :)
            or $state[$p:lk] = 230799                       (: 'add-xml-base' ':' 'add-attribute' :)
            or $state[$p:lk] = 230801                       (: 'compare' ':' 'add-attribute' :)
            or $state[$p:lk] = 230802                       (: 'count' ':' 'add-attribute' :)
            or $state[$p:lk] = 230803                       (: 'default' ':' 'add-attribute' :)
            or $state[$p:lk] = 230804                       (: 'delete' ':' 'add-attribute' :)
            or $state[$p:lk] = 230805                       (: 'directory-list' ':' 'add-attribute' :)
            or $state[$p:lk] = 230807                       (: 'else' ':' 'add-attribute' :)
            or $state[$p:lk] = 230809                       (: 'error' ':' 'add-attribute' :)
            or $state[$p:lk] = 230810                       (: 'escape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 230811                       (: 'exec' ':' 'add-attribute' :)
            or $state[$p:lk] = 230812                       (: 'filter' ':' 'add-attribute' :)
            or $state[$p:lk] = 230813                       (: 'for-each' ':' 'add-attribute' :)
            or $state[$p:lk] = 230815                       (: 'hash' ':' 'add-attribute' :)
            or $state[$p:lk] = 230816                       (: 'http-request' ':' 'add-attribute' :)
            or $state[$p:lk] = 230817                       (: 'identity' ':' 'add-attribute' :)
            or $state[$p:lk] = 230818                       (: 'if' ':' 'add-attribute' :)
            or $state[$p:lk] = 230819                       (: 'insert' ':' 'add-attribute' :)
            or $state[$p:lk] = 230821                       (: 'label-elements' ':' 'add-attribute' :)
            or $state[$p:lk] = 230822                       (: 'library' ':' 'add-attribute' :)
            or $state[$p:lk] = 230823                       (: 'load' ':' 'add-attribute' :)
            or $state[$p:lk] = 230824                       (: 'make-absolute-uris' ':' 'add-attribute' :)
            or $state[$p:lk] = 230825                       (: 'namespace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230826                       (: 'namespace-rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 230827                       (: 'pack' ':' 'add-attribute' :)
            or $state[$p:lk] = 230828                       (: 'parameters' ':' 'add-attribute' :)
            or $state[$p:lk] = 230830                       (: 'pipeline' ':' 'add-attribute' :)
            or $state[$p:lk] = 230832                       (: 'rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 230833                       (: 'replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230835                       (: 'set-attributes' ':' 'add-attribute' :)
            or $state[$p:lk] = 230836                       (: 'sink' ':' 'add-attribute' :)
            or $state[$p:lk] = 230837                       (: 'split-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 230838                       (: 'step' ':' 'add-attribute' :)
            or $state[$p:lk] = 230839                       (: 'store' ':' 'add-attribute' :)
            or $state[$p:lk] = 230840                       (: 'string-replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230841                       (: 'try' ':' 'add-attribute' :)
            or $state[$p:lk] = 230842                       (: 'unescape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 230843                       (: 'unwrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 230844                       (: 'uuid' ':' 'add-attribute' :)
            or $state[$p:lk] = 230845                       (: 'validate-with-relax-ng' ':' 'add-attribute' :)
            or $state[$p:lk] = 230846                       (: 'validate-with-schematron' ':' 'add-attribute' :)
            or $state[$p:lk] = 230847                       (: 'validate-with-xml-schema' ':' 'add-attribute' :)
            or $state[$p:lk] = 230848                       (: 'variable' ':' 'add-attribute' :)
            or $state[$p:lk] = 230849                       (: 'viewport' ':' 'add-attribute' :)
            or $state[$p:lk] = 230850                       (: 'wrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 230851                       (: 'wrap-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 230852                       (: 'www-form-urldecode' ':' 'add-attribute' :)
            or $state[$p:lk] = 230853                       (: 'www-form-urlencode' ':' 'add-attribute' :)
            or $state[$p:lk] = 230854                       (: 'xinclude' ':' 'add-attribute' :)
            or $state[$p:lk] = 230855                       (: 'xquery' ':' 'add-attribute' :)
            or $state[$p:lk] = 230856                       (: 'xsl-formatter' ':' 'add-attribute' :)
            or $state[$p:lk] = 230857                       (: 'xslt' ':' 'add-attribute' :)
            or $state[$p:lk] = 247173                       (: NCName^Token ':' 'add-xml-base' :)
            or $state[$p:lk] = 247182                       (: 'add-attribute' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247183                       (: 'add-xml-base' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247185                       (: 'compare' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247186                       (: 'count' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247187                       (: 'default' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247188                       (: 'delete' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247189                       (: 'directory-list' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247191                       (: 'else' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247193                       (: 'error' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247194                       (: 'escape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247195                       (: 'exec' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247196                       (: 'filter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247197                       (: 'for-each' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247199                       (: 'hash' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247200                       (: 'http-request' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247201                       (: 'identity' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247202                       (: 'if' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247203                       (: 'insert' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247205                       (: 'label-elements' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247206                       (: 'library' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247207                       (: 'load' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247208                       (: 'make-absolute-uris' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247209                       (: 'namespace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247210                       (: 'namespace-rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247211                       (: 'pack' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247212                       (: 'parameters' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247214                       (: 'pipeline' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247216                       (: 'rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247217                       (: 'replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247219                       (: 'set-attributes' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247220                       (: 'sink' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247221                       (: 'split-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247222                       (: 'step' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247223                       (: 'store' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247224                       (: 'string-replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247225                       (: 'try' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247226                       (: 'unescape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247227                       (: 'unwrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247228                       (: 'uuid' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247229                       (: 'validate-with-relax-ng' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247230                       (: 'validate-with-schematron' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247231                       (: 'validate-with-xml-schema' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247232                       (: 'variable' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247233                       (: 'viewport' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247234                       (: 'wrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247235                       (: 'wrap-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247236                       (: 'www-form-urldecode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247237                       (: 'www-form-urlencode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247238                       (: 'xinclude' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247239                       (: 'xquery' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247240                       (: 'xsl-formatter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247241                       (: 'xslt' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279941                       (: NCName^Token ':' 'compare' :)
            or $state[$p:lk] = 279950                       (: 'add-attribute' ':' 'compare' :)
            or $state[$p:lk] = 279951                       (: 'add-xml-base' ':' 'compare' :)
            or $state[$p:lk] = 279953                       (: 'compare' ':' 'compare' :)
            or $state[$p:lk] = 279954                       (: 'count' ':' 'compare' :)
            or $state[$p:lk] = 279955                       (: 'default' ':' 'compare' :)
            or $state[$p:lk] = 279956                       (: 'delete' ':' 'compare' :)
            or $state[$p:lk] = 279957                       (: 'directory-list' ':' 'compare' :)
            or $state[$p:lk] = 279959                       (: 'else' ':' 'compare' :)
            or $state[$p:lk] = 279961                       (: 'error' ':' 'compare' :)
            or $state[$p:lk] = 279962                       (: 'escape-markup' ':' 'compare' :)
            or $state[$p:lk] = 279963                       (: 'exec' ':' 'compare' :)
            or $state[$p:lk] = 279964                       (: 'filter' ':' 'compare' :)
            or $state[$p:lk] = 279965                       (: 'for-each' ':' 'compare' :)
            or $state[$p:lk] = 279967                       (: 'hash' ':' 'compare' :)
            or $state[$p:lk] = 279968                       (: 'http-request' ':' 'compare' :)
            or $state[$p:lk] = 279969                       (: 'identity' ':' 'compare' :)
            or $state[$p:lk] = 279970                       (: 'if' ':' 'compare' :)
            or $state[$p:lk] = 279971                       (: 'insert' ':' 'compare' :)
            or $state[$p:lk] = 279973                       (: 'label-elements' ':' 'compare' :)
            or $state[$p:lk] = 279974                       (: 'library' ':' 'compare' :)
            or $state[$p:lk] = 279975                       (: 'load' ':' 'compare' :)
            or $state[$p:lk] = 279976                       (: 'make-absolute-uris' ':' 'compare' :)
            or $state[$p:lk] = 279977                       (: 'namespace' ':' 'compare' :)
            or $state[$p:lk] = 279978                       (: 'namespace-rename' ':' 'compare' :)
            or $state[$p:lk] = 279979                       (: 'pack' ':' 'compare' :)
            or $state[$p:lk] = 279980                       (: 'parameters' ':' 'compare' :)
            or $state[$p:lk] = 279982                       (: 'pipeline' ':' 'compare' :)
            or $state[$p:lk] = 279984                       (: 'rename' ':' 'compare' :)
            or $state[$p:lk] = 279985                       (: 'replace' ':' 'compare' :)
            or $state[$p:lk] = 279987                       (: 'set-attributes' ':' 'compare' :)
            or $state[$p:lk] = 279988                       (: 'sink' ':' 'compare' :)
            or $state[$p:lk] = 279989                       (: 'split-sequence' ':' 'compare' :)
            or $state[$p:lk] = 279990                       (: 'step' ':' 'compare' :)
            or $state[$p:lk] = 279991                       (: 'store' ':' 'compare' :)
            or $state[$p:lk] = 279992                       (: 'string-replace' ':' 'compare' :)
            or $state[$p:lk] = 279993                       (: 'try' ':' 'compare' :)
            or $state[$p:lk] = 279994                       (: 'unescape-markup' ':' 'compare' :)
            or $state[$p:lk] = 279995                       (: 'unwrap' ':' 'compare' :)
            or $state[$p:lk] = 279996                       (: 'uuid' ':' 'compare' :)
            or $state[$p:lk] = 279997                       (: 'validate-with-relax-ng' ':' 'compare' :)
            or $state[$p:lk] = 279998                       (: 'validate-with-schematron' ':' 'compare' :)
            or $state[$p:lk] = 279999                       (: 'validate-with-xml-schema' ':' 'compare' :)
            or $state[$p:lk] = 280000                       (: 'variable' ':' 'compare' :)
            or $state[$p:lk] = 280001                       (: 'viewport' ':' 'compare' :)
            or $state[$p:lk] = 280002                       (: 'wrap' ':' 'compare' :)
            or $state[$p:lk] = 280003                       (: 'wrap-sequence' ':' 'compare' :)
            or $state[$p:lk] = 280004                       (: 'www-form-urldecode' ':' 'compare' :)
            or $state[$p:lk] = 280005                       (: 'www-form-urlencode' ':' 'compare' :)
            or $state[$p:lk] = 280006                       (: 'xinclude' ':' 'compare' :)
            or $state[$p:lk] = 280007                       (: 'xquery' ':' 'compare' :)
            or $state[$p:lk] = 280008                       (: 'xsl-formatter' ':' 'compare' :)
            or $state[$p:lk] = 280009                       (: 'xslt' ':' 'compare' :)
            or $state[$p:lk] = 296325                       (: NCName^Token ':' 'count' :)
            or $state[$p:lk] = 296334                       (: 'add-attribute' ':' 'count' :)
            or $state[$p:lk] = 296335                       (: 'add-xml-base' ':' 'count' :)
            or $state[$p:lk] = 296337                       (: 'compare' ':' 'count' :)
            or $state[$p:lk] = 296338                       (: 'count' ':' 'count' :)
            or $state[$p:lk] = 296339                       (: 'default' ':' 'count' :)
            or $state[$p:lk] = 296340                       (: 'delete' ':' 'count' :)
            or $state[$p:lk] = 296341                       (: 'directory-list' ':' 'count' :)
            or $state[$p:lk] = 296343                       (: 'else' ':' 'count' :)
            or $state[$p:lk] = 296345                       (: 'error' ':' 'count' :)
            or $state[$p:lk] = 296346                       (: 'escape-markup' ':' 'count' :)
            or $state[$p:lk] = 296347                       (: 'exec' ':' 'count' :)
            or $state[$p:lk] = 296348                       (: 'filter' ':' 'count' :)
            or $state[$p:lk] = 296349                       (: 'for-each' ':' 'count' :)
            or $state[$p:lk] = 296351                       (: 'hash' ':' 'count' :)
            or $state[$p:lk] = 296352                       (: 'http-request' ':' 'count' :)
            or $state[$p:lk] = 296353                       (: 'identity' ':' 'count' :)
            or $state[$p:lk] = 296354                       (: 'if' ':' 'count' :)
            or $state[$p:lk] = 296355                       (: 'insert' ':' 'count' :)
            or $state[$p:lk] = 296357                       (: 'label-elements' ':' 'count' :)
            or $state[$p:lk] = 296358                       (: 'library' ':' 'count' :)
            or $state[$p:lk] = 296359                       (: 'load' ':' 'count' :)
            or $state[$p:lk] = 296360                       (: 'make-absolute-uris' ':' 'count' :)
            or $state[$p:lk] = 296361                       (: 'namespace' ':' 'count' :)
            or $state[$p:lk] = 296362                       (: 'namespace-rename' ':' 'count' :)
            or $state[$p:lk] = 296363                       (: 'pack' ':' 'count' :)
            or $state[$p:lk] = 296364                       (: 'parameters' ':' 'count' :)
            or $state[$p:lk] = 296366                       (: 'pipeline' ':' 'count' :)
            or $state[$p:lk] = 296368                       (: 'rename' ':' 'count' :)
            or $state[$p:lk] = 296369                       (: 'replace' ':' 'count' :)
            or $state[$p:lk] = 296371                       (: 'set-attributes' ':' 'count' :)
            or $state[$p:lk] = 296372                       (: 'sink' ':' 'count' :)
            or $state[$p:lk] = 296373                       (: 'split-sequence' ':' 'count' :)
            or $state[$p:lk] = 296374                       (: 'step' ':' 'count' :)
            or $state[$p:lk] = 296375                       (: 'store' ':' 'count' :)
            or $state[$p:lk] = 296376                       (: 'string-replace' ':' 'count' :)
            or $state[$p:lk] = 296377                       (: 'try' ':' 'count' :)
            or $state[$p:lk] = 296378                       (: 'unescape-markup' ':' 'count' :)
            or $state[$p:lk] = 296379                       (: 'unwrap' ':' 'count' :)
            or $state[$p:lk] = 296380                       (: 'uuid' ':' 'count' :)
            or $state[$p:lk] = 296381                       (: 'validate-with-relax-ng' ':' 'count' :)
            or $state[$p:lk] = 296382                       (: 'validate-with-schematron' ':' 'count' :)
            or $state[$p:lk] = 296383                       (: 'validate-with-xml-schema' ':' 'count' :)
            or $state[$p:lk] = 296384                       (: 'variable' ':' 'count' :)
            or $state[$p:lk] = 296385                       (: 'viewport' ':' 'count' :)
            or $state[$p:lk] = 296386                       (: 'wrap' ':' 'count' :)
            or $state[$p:lk] = 296387                       (: 'wrap-sequence' ':' 'count' :)
            or $state[$p:lk] = 296388                       (: 'www-form-urldecode' ':' 'count' :)
            or $state[$p:lk] = 296389                       (: 'www-form-urlencode' ':' 'count' :)
            or $state[$p:lk] = 296390                       (: 'xinclude' ':' 'count' :)
            or $state[$p:lk] = 296391                       (: 'xquery' ':' 'count' :)
            or $state[$p:lk] = 296392                       (: 'xsl-formatter' ':' 'count' :)
            or $state[$p:lk] = 296393                       (: 'xslt' ':' 'count' :)
            or $state[$p:lk] = 312709                       (: NCName^Token ':' 'default' :)
            or $state[$p:lk] = 312718                       (: 'add-attribute' ':' 'default' :)
            or $state[$p:lk] = 312719                       (: 'add-xml-base' ':' 'default' :)
            or $state[$p:lk] = 312721                       (: 'compare' ':' 'default' :)
            or $state[$p:lk] = 312722                       (: 'count' ':' 'default' :)
            or $state[$p:lk] = 312723                       (: 'default' ':' 'default' :)
            or $state[$p:lk] = 312724                       (: 'delete' ':' 'default' :)
            or $state[$p:lk] = 312725                       (: 'directory-list' ':' 'default' :)
            or $state[$p:lk] = 312727                       (: 'else' ':' 'default' :)
            or $state[$p:lk] = 312729                       (: 'error' ':' 'default' :)
            or $state[$p:lk] = 312730                       (: 'escape-markup' ':' 'default' :)
            or $state[$p:lk] = 312731                       (: 'exec' ':' 'default' :)
            or $state[$p:lk] = 312732                       (: 'filter' ':' 'default' :)
            or $state[$p:lk] = 312733                       (: 'for-each' ':' 'default' :)
            or $state[$p:lk] = 312735                       (: 'hash' ':' 'default' :)
            or $state[$p:lk] = 312736                       (: 'http-request' ':' 'default' :)
            or $state[$p:lk] = 312737                       (: 'identity' ':' 'default' :)
            or $state[$p:lk] = 312738                       (: 'if' ':' 'default' :)
            or $state[$p:lk] = 312739                       (: 'insert' ':' 'default' :)
            or $state[$p:lk] = 312741                       (: 'label-elements' ':' 'default' :)
            or $state[$p:lk] = 312742                       (: 'library' ':' 'default' :)
            or $state[$p:lk] = 312743                       (: 'load' ':' 'default' :)
            or $state[$p:lk] = 312744                       (: 'make-absolute-uris' ':' 'default' :)
            or $state[$p:lk] = 312745                       (: 'namespace' ':' 'default' :)
            or $state[$p:lk] = 312746                       (: 'namespace-rename' ':' 'default' :)
            or $state[$p:lk] = 312747                       (: 'pack' ':' 'default' :)
            or $state[$p:lk] = 312748                       (: 'parameters' ':' 'default' :)
            or $state[$p:lk] = 312750                       (: 'pipeline' ':' 'default' :)
            or $state[$p:lk] = 312752                       (: 'rename' ':' 'default' :)
            or $state[$p:lk] = 312753                       (: 'replace' ':' 'default' :)
            or $state[$p:lk] = 312755                       (: 'set-attributes' ':' 'default' :)
            or $state[$p:lk] = 312756                       (: 'sink' ':' 'default' :)
            or $state[$p:lk] = 312757                       (: 'split-sequence' ':' 'default' :)
            or $state[$p:lk] = 312758                       (: 'step' ':' 'default' :)
            or $state[$p:lk] = 312759                       (: 'store' ':' 'default' :)
            or $state[$p:lk] = 312760                       (: 'string-replace' ':' 'default' :)
            or $state[$p:lk] = 312761                       (: 'try' ':' 'default' :)
            or $state[$p:lk] = 312762                       (: 'unescape-markup' ':' 'default' :)
            or $state[$p:lk] = 312763                       (: 'unwrap' ':' 'default' :)
            or $state[$p:lk] = 312764                       (: 'uuid' ':' 'default' :)
            or $state[$p:lk] = 312765                       (: 'validate-with-relax-ng' ':' 'default' :)
            or $state[$p:lk] = 312766                       (: 'validate-with-schematron' ':' 'default' :)
            or $state[$p:lk] = 312767                       (: 'validate-with-xml-schema' ':' 'default' :)
            or $state[$p:lk] = 312768                       (: 'variable' ':' 'default' :)
            or $state[$p:lk] = 312769                       (: 'viewport' ':' 'default' :)
            or $state[$p:lk] = 312770                       (: 'wrap' ':' 'default' :)
            or $state[$p:lk] = 312771                       (: 'wrap-sequence' ':' 'default' :)
            or $state[$p:lk] = 312772                       (: 'www-form-urldecode' ':' 'default' :)
            or $state[$p:lk] = 312773                       (: 'www-form-urlencode' ':' 'default' :)
            or $state[$p:lk] = 312774                       (: 'xinclude' ':' 'default' :)
            or $state[$p:lk] = 312775                       (: 'xquery' ':' 'default' :)
            or $state[$p:lk] = 312776                       (: 'xsl-formatter' ':' 'default' :)
            or $state[$p:lk] = 312777                       (: 'xslt' ':' 'default' :)
            or $state[$p:lk] = 329093                       (: NCName^Token ':' 'delete' :)
            or $state[$p:lk] = 329102                       (: 'add-attribute' ':' 'delete' :)
            or $state[$p:lk] = 329103                       (: 'add-xml-base' ':' 'delete' :)
            or $state[$p:lk] = 329105                       (: 'compare' ':' 'delete' :)
            or $state[$p:lk] = 329106                       (: 'count' ':' 'delete' :)
            or $state[$p:lk] = 329107                       (: 'default' ':' 'delete' :)
            or $state[$p:lk] = 329108                       (: 'delete' ':' 'delete' :)
            or $state[$p:lk] = 329109                       (: 'directory-list' ':' 'delete' :)
            or $state[$p:lk] = 329111                       (: 'else' ':' 'delete' :)
            or $state[$p:lk] = 329113                       (: 'error' ':' 'delete' :)
            or $state[$p:lk] = 329114                       (: 'escape-markup' ':' 'delete' :)
            or $state[$p:lk] = 329115                       (: 'exec' ':' 'delete' :)
            or $state[$p:lk] = 329116                       (: 'filter' ':' 'delete' :)
            or $state[$p:lk] = 329117                       (: 'for-each' ':' 'delete' :)
            or $state[$p:lk] = 329119                       (: 'hash' ':' 'delete' :)
            or $state[$p:lk] = 329120                       (: 'http-request' ':' 'delete' :)
            or $state[$p:lk] = 329121                       (: 'identity' ':' 'delete' :)
            or $state[$p:lk] = 329122                       (: 'if' ':' 'delete' :)
            or $state[$p:lk] = 329123                       (: 'insert' ':' 'delete' :)
            or $state[$p:lk] = 329125                       (: 'label-elements' ':' 'delete' :)
            or $state[$p:lk] = 329126                       (: 'library' ':' 'delete' :)
            or $state[$p:lk] = 329127                       (: 'load' ':' 'delete' :)
            or $state[$p:lk] = 329128                       (: 'make-absolute-uris' ':' 'delete' :)
            or $state[$p:lk] = 329129                       (: 'namespace' ':' 'delete' :)
            or $state[$p:lk] = 329130                       (: 'namespace-rename' ':' 'delete' :)
            or $state[$p:lk] = 329131                       (: 'pack' ':' 'delete' :)
            or $state[$p:lk] = 329132                       (: 'parameters' ':' 'delete' :)
            or $state[$p:lk] = 329134                       (: 'pipeline' ':' 'delete' :)
            or $state[$p:lk] = 329136                       (: 'rename' ':' 'delete' :)
            or $state[$p:lk] = 329137                       (: 'replace' ':' 'delete' :)
            or $state[$p:lk] = 329139                       (: 'set-attributes' ':' 'delete' :)
            or $state[$p:lk] = 329140                       (: 'sink' ':' 'delete' :)
            or $state[$p:lk] = 329141                       (: 'split-sequence' ':' 'delete' :)
            or $state[$p:lk] = 329142                       (: 'step' ':' 'delete' :)
            or $state[$p:lk] = 329143                       (: 'store' ':' 'delete' :)
            or $state[$p:lk] = 329144                       (: 'string-replace' ':' 'delete' :)
            or $state[$p:lk] = 329145                       (: 'try' ':' 'delete' :)
            or $state[$p:lk] = 329146                       (: 'unescape-markup' ':' 'delete' :)
            or $state[$p:lk] = 329147                       (: 'unwrap' ':' 'delete' :)
            or $state[$p:lk] = 329148                       (: 'uuid' ':' 'delete' :)
            or $state[$p:lk] = 329149                       (: 'validate-with-relax-ng' ':' 'delete' :)
            or $state[$p:lk] = 329150                       (: 'validate-with-schematron' ':' 'delete' :)
            or $state[$p:lk] = 329151                       (: 'validate-with-xml-schema' ':' 'delete' :)
            or $state[$p:lk] = 329152                       (: 'variable' ':' 'delete' :)
            or $state[$p:lk] = 329153                       (: 'viewport' ':' 'delete' :)
            or $state[$p:lk] = 329154                       (: 'wrap' ':' 'delete' :)
            or $state[$p:lk] = 329155                       (: 'wrap-sequence' ':' 'delete' :)
            or $state[$p:lk] = 329156                       (: 'www-form-urldecode' ':' 'delete' :)
            or $state[$p:lk] = 329157                       (: 'www-form-urlencode' ':' 'delete' :)
            or $state[$p:lk] = 329158                       (: 'xinclude' ':' 'delete' :)
            or $state[$p:lk] = 329159                       (: 'xquery' ':' 'delete' :)
            or $state[$p:lk] = 329160                       (: 'xsl-formatter' ':' 'delete' :)
            or $state[$p:lk] = 329161                       (: 'xslt' ':' 'delete' :)
            or $state[$p:lk] = 345477                       (: NCName^Token ':' 'directory-list' :)
            or $state[$p:lk] = 345486                       (: 'add-attribute' ':' 'directory-list' :)
            or $state[$p:lk] = 345487                       (: 'add-xml-base' ':' 'directory-list' :)
            or $state[$p:lk] = 345489                       (: 'compare' ':' 'directory-list' :)
            or $state[$p:lk] = 345490                       (: 'count' ':' 'directory-list' :)
            or $state[$p:lk] = 345491                       (: 'default' ':' 'directory-list' :)
            or $state[$p:lk] = 345492                       (: 'delete' ':' 'directory-list' :)
            or $state[$p:lk] = 345493                       (: 'directory-list' ':' 'directory-list' :)
            or $state[$p:lk] = 345495                       (: 'else' ':' 'directory-list' :)
            or $state[$p:lk] = 345497                       (: 'error' ':' 'directory-list' :)
            or $state[$p:lk] = 345498                       (: 'escape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 345499                       (: 'exec' ':' 'directory-list' :)
            or $state[$p:lk] = 345500                       (: 'filter' ':' 'directory-list' :)
            or $state[$p:lk] = 345501                       (: 'for-each' ':' 'directory-list' :)
            or $state[$p:lk] = 345503                       (: 'hash' ':' 'directory-list' :)
            or $state[$p:lk] = 345504                       (: 'http-request' ':' 'directory-list' :)
            or $state[$p:lk] = 345505                       (: 'identity' ':' 'directory-list' :)
            or $state[$p:lk] = 345506                       (: 'if' ':' 'directory-list' :)
            or $state[$p:lk] = 345507                       (: 'insert' ':' 'directory-list' :)
            or $state[$p:lk] = 345509                       (: 'label-elements' ':' 'directory-list' :)
            or $state[$p:lk] = 345510                       (: 'library' ':' 'directory-list' :)
            or $state[$p:lk] = 345511                       (: 'load' ':' 'directory-list' :)
            or $state[$p:lk] = 345512                       (: 'make-absolute-uris' ':' 'directory-list' :)
            or $state[$p:lk] = 345513                       (: 'namespace' ':' 'directory-list' :)
            or $state[$p:lk] = 345514                       (: 'namespace-rename' ':' 'directory-list' :)
            or $state[$p:lk] = 345515                       (: 'pack' ':' 'directory-list' :)
            or $state[$p:lk] = 345516                       (: 'parameters' ':' 'directory-list' :)
            or $state[$p:lk] = 345518                       (: 'pipeline' ':' 'directory-list' :)
            or $state[$p:lk] = 345520                       (: 'rename' ':' 'directory-list' :)
            or $state[$p:lk] = 345521                       (: 'replace' ':' 'directory-list' :)
            or $state[$p:lk] = 345523                       (: 'set-attributes' ':' 'directory-list' :)
            or $state[$p:lk] = 345524                       (: 'sink' ':' 'directory-list' :)
            or $state[$p:lk] = 345525                       (: 'split-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 345526                       (: 'step' ':' 'directory-list' :)
            or $state[$p:lk] = 345527                       (: 'store' ':' 'directory-list' :)
            or $state[$p:lk] = 345528                       (: 'string-replace' ':' 'directory-list' :)
            or $state[$p:lk] = 345529                       (: 'try' ':' 'directory-list' :)
            or $state[$p:lk] = 345530                       (: 'unescape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 345531                       (: 'unwrap' ':' 'directory-list' :)
            or $state[$p:lk] = 345532                       (: 'uuid' ':' 'directory-list' :)
            or $state[$p:lk] = 345533                       (: 'validate-with-relax-ng' ':' 'directory-list' :)
            or $state[$p:lk] = 345534                       (: 'validate-with-schematron' ':' 'directory-list' :)
            or $state[$p:lk] = 345535                       (: 'validate-with-xml-schema' ':' 'directory-list' :)
            or $state[$p:lk] = 345536                       (: 'variable' ':' 'directory-list' :)
            or $state[$p:lk] = 345537                       (: 'viewport' ':' 'directory-list' :)
            or $state[$p:lk] = 345538                       (: 'wrap' ':' 'directory-list' :)
            or $state[$p:lk] = 345539                       (: 'wrap-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 345540                       (: 'www-form-urldecode' ':' 'directory-list' :)
            or $state[$p:lk] = 345541                       (: 'www-form-urlencode' ':' 'directory-list' :)
            or $state[$p:lk] = 345542                       (: 'xinclude' ':' 'directory-list' :)
            or $state[$p:lk] = 345543                       (: 'xquery' ':' 'directory-list' :)
            or $state[$p:lk] = 345544                       (: 'xsl-formatter' ':' 'directory-list' :)
            or $state[$p:lk] = 345545                       (: 'xslt' ':' 'directory-list' :)
            or $state[$p:lk] = 378245                       (: NCName^Token ':' 'else' :)
            or $state[$p:lk] = 378254                       (: 'add-attribute' ':' 'else' :)
            or $state[$p:lk] = 378255                       (: 'add-xml-base' ':' 'else' :)
            or $state[$p:lk] = 378257                       (: 'compare' ':' 'else' :)
            or $state[$p:lk] = 378258                       (: 'count' ':' 'else' :)
            or $state[$p:lk] = 378259                       (: 'default' ':' 'else' :)
            or $state[$p:lk] = 378260                       (: 'delete' ':' 'else' :)
            or $state[$p:lk] = 378261                       (: 'directory-list' ':' 'else' :)
            or $state[$p:lk] = 378263                       (: 'else' ':' 'else' :)
            or $state[$p:lk] = 378265                       (: 'error' ':' 'else' :)
            or $state[$p:lk] = 378266                       (: 'escape-markup' ':' 'else' :)
            or $state[$p:lk] = 378267                       (: 'exec' ':' 'else' :)
            or $state[$p:lk] = 378268                       (: 'filter' ':' 'else' :)
            or $state[$p:lk] = 378269                       (: 'for-each' ':' 'else' :)
            or $state[$p:lk] = 378271                       (: 'hash' ':' 'else' :)
            or $state[$p:lk] = 378272                       (: 'http-request' ':' 'else' :)
            or $state[$p:lk] = 378273                       (: 'identity' ':' 'else' :)
            or $state[$p:lk] = 378274                       (: 'if' ':' 'else' :)
            or $state[$p:lk] = 378275                       (: 'insert' ':' 'else' :)
            or $state[$p:lk] = 378277                       (: 'label-elements' ':' 'else' :)
            or $state[$p:lk] = 378278                       (: 'library' ':' 'else' :)
            or $state[$p:lk] = 378279                       (: 'load' ':' 'else' :)
            or $state[$p:lk] = 378280                       (: 'make-absolute-uris' ':' 'else' :)
            or $state[$p:lk] = 378281                       (: 'namespace' ':' 'else' :)
            or $state[$p:lk] = 378282                       (: 'namespace-rename' ':' 'else' :)
            or $state[$p:lk] = 378283                       (: 'pack' ':' 'else' :)
            or $state[$p:lk] = 378284                       (: 'parameters' ':' 'else' :)
            or $state[$p:lk] = 378286                       (: 'pipeline' ':' 'else' :)
            or $state[$p:lk] = 378288                       (: 'rename' ':' 'else' :)
            or $state[$p:lk] = 378289                       (: 'replace' ':' 'else' :)
            or $state[$p:lk] = 378291                       (: 'set-attributes' ':' 'else' :)
            or $state[$p:lk] = 378292                       (: 'sink' ':' 'else' :)
            or $state[$p:lk] = 378293                       (: 'split-sequence' ':' 'else' :)
            or $state[$p:lk] = 378294                       (: 'step' ':' 'else' :)
            or $state[$p:lk] = 378295                       (: 'store' ':' 'else' :)
            or $state[$p:lk] = 378296                       (: 'string-replace' ':' 'else' :)
            or $state[$p:lk] = 378297                       (: 'try' ':' 'else' :)
            or $state[$p:lk] = 378298                       (: 'unescape-markup' ':' 'else' :)
            or $state[$p:lk] = 378299                       (: 'unwrap' ':' 'else' :)
            or $state[$p:lk] = 378300                       (: 'uuid' ':' 'else' :)
            or $state[$p:lk] = 378301                       (: 'validate-with-relax-ng' ':' 'else' :)
            or $state[$p:lk] = 378302                       (: 'validate-with-schematron' ':' 'else' :)
            or $state[$p:lk] = 378303                       (: 'validate-with-xml-schema' ':' 'else' :)
            or $state[$p:lk] = 378304                       (: 'variable' ':' 'else' :)
            or $state[$p:lk] = 378305                       (: 'viewport' ':' 'else' :)
            or $state[$p:lk] = 378306                       (: 'wrap' ':' 'else' :)
            or $state[$p:lk] = 378307                       (: 'wrap-sequence' ':' 'else' :)
            or $state[$p:lk] = 378308                       (: 'www-form-urldecode' ':' 'else' :)
            or $state[$p:lk] = 378309                       (: 'www-form-urlencode' ':' 'else' :)
            or $state[$p:lk] = 378310                       (: 'xinclude' ':' 'else' :)
            or $state[$p:lk] = 378311                       (: 'xquery' ':' 'else' :)
            or $state[$p:lk] = 378312                       (: 'xsl-formatter' ':' 'else' :)
            or $state[$p:lk] = 378313                       (: 'xslt' ':' 'else' :)
            or $state[$p:lk] = 411013                       (: NCName^Token ':' 'error' :)
            or $state[$p:lk] = 411022                       (: 'add-attribute' ':' 'error' :)
            or $state[$p:lk] = 411023                       (: 'add-xml-base' ':' 'error' :)
            or $state[$p:lk] = 411025                       (: 'compare' ':' 'error' :)
            or $state[$p:lk] = 411026                       (: 'count' ':' 'error' :)
            or $state[$p:lk] = 411027                       (: 'default' ':' 'error' :)
            or $state[$p:lk] = 411028                       (: 'delete' ':' 'error' :)
            or $state[$p:lk] = 411029                       (: 'directory-list' ':' 'error' :)
            or $state[$p:lk] = 411031                       (: 'else' ':' 'error' :)
            or $state[$p:lk] = 411033                       (: 'error' ':' 'error' :)
            or $state[$p:lk] = 411034                       (: 'escape-markup' ':' 'error' :)
            or $state[$p:lk] = 411035                       (: 'exec' ':' 'error' :)
            or $state[$p:lk] = 411036                       (: 'filter' ':' 'error' :)
            or $state[$p:lk] = 411037                       (: 'for-each' ':' 'error' :)
            or $state[$p:lk] = 411039                       (: 'hash' ':' 'error' :)
            or $state[$p:lk] = 411040                       (: 'http-request' ':' 'error' :)
            or $state[$p:lk] = 411041                       (: 'identity' ':' 'error' :)
            or $state[$p:lk] = 411042                       (: 'if' ':' 'error' :)
            or $state[$p:lk] = 411043                       (: 'insert' ':' 'error' :)
            or $state[$p:lk] = 411045                       (: 'label-elements' ':' 'error' :)
            or $state[$p:lk] = 411046                       (: 'library' ':' 'error' :)
            or $state[$p:lk] = 411047                       (: 'load' ':' 'error' :)
            or $state[$p:lk] = 411048                       (: 'make-absolute-uris' ':' 'error' :)
            or $state[$p:lk] = 411049                       (: 'namespace' ':' 'error' :)
            or $state[$p:lk] = 411050                       (: 'namespace-rename' ':' 'error' :)
            or $state[$p:lk] = 411051                       (: 'pack' ':' 'error' :)
            or $state[$p:lk] = 411052                       (: 'parameters' ':' 'error' :)
            or $state[$p:lk] = 411054                       (: 'pipeline' ':' 'error' :)
            or $state[$p:lk] = 411056                       (: 'rename' ':' 'error' :)
            or $state[$p:lk] = 411057                       (: 'replace' ':' 'error' :)
            or $state[$p:lk] = 411059                       (: 'set-attributes' ':' 'error' :)
            or $state[$p:lk] = 411060                       (: 'sink' ':' 'error' :)
            or $state[$p:lk] = 411061                       (: 'split-sequence' ':' 'error' :)
            or $state[$p:lk] = 411062                       (: 'step' ':' 'error' :)
            or $state[$p:lk] = 411063                       (: 'store' ':' 'error' :)
            or $state[$p:lk] = 411064                       (: 'string-replace' ':' 'error' :)
            or $state[$p:lk] = 411065                       (: 'try' ':' 'error' :)
            or $state[$p:lk] = 411066                       (: 'unescape-markup' ':' 'error' :)
            or $state[$p:lk] = 411067                       (: 'unwrap' ':' 'error' :)
            or $state[$p:lk] = 411068                       (: 'uuid' ':' 'error' :)
            or $state[$p:lk] = 411069                       (: 'validate-with-relax-ng' ':' 'error' :)
            or $state[$p:lk] = 411070                       (: 'validate-with-schematron' ':' 'error' :)
            or $state[$p:lk] = 411071                       (: 'validate-with-xml-schema' ':' 'error' :)
            or $state[$p:lk] = 411072                       (: 'variable' ':' 'error' :)
            or $state[$p:lk] = 411073                       (: 'viewport' ':' 'error' :)
            or $state[$p:lk] = 411074                       (: 'wrap' ':' 'error' :)
            or $state[$p:lk] = 411075                       (: 'wrap-sequence' ':' 'error' :)
            or $state[$p:lk] = 411076                       (: 'www-form-urldecode' ':' 'error' :)
            or $state[$p:lk] = 411077                       (: 'www-form-urlencode' ':' 'error' :)
            or $state[$p:lk] = 411078                       (: 'xinclude' ':' 'error' :)
            or $state[$p:lk] = 411079                       (: 'xquery' ':' 'error' :)
            or $state[$p:lk] = 411080                       (: 'xsl-formatter' ':' 'error' :)
            or $state[$p:lk] = 411081                       (: 'xslt' ':' 'error' :)
            or $state[$p:lk] = 427397                       (: NCName^Token ':' 'escape-markup' :)
            or $state[$p:lk] = 427406                       (: 'add-attribute' ':' 'escape-markup' :)
            or $state[$p:lk] = 427407                       (: 'add-xml-base' ':' 'escape-markup' :)
            or $state[$p:lk] = 427409                       (: 'compare' ':' 'escape-markup' :)
            or $state[$p:lk] = 427410                       (: 'count' ':' 'escape-markup' :)
            or $state[$p:lk] = 427411                       (: 'default' ':' 'escape-markup' :)
            or $state[$p:lk] = 427412                       (: 'delete' ':' 'escape-markup' :)
            or $state[$p:lk] = 427413                       (: 'directory-list' ':' 'escape-markup' :)
            or $state[$p:lk] = 427415                       (: 'else' ':' 'escape-markup' :)
            or $state[$p:lk] = 427417                       (: 'error' ':' 'escape-markup' :)
            or $state[$p:lk] = 427418                       (: 'escape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 427419                       (: 'exec' ':' 'escape-markup' :)
            or $state[$p:lk] = 427420                       (: 'filter' ':' 'escape-markup' :)
            or $state[$p:lk] = 427421                       (: 'for-each' ':' 'escape-markup' :)
            or $state[$p:lk] = 427423                       (: 'hash' ':' 'escape-markup' :)
            or $state[$p:lk] = 427424                       (: 'http-request' ':' 'escape-markup' :)
            or $state[$p:lk] = 427425                       (: 'identity' ':' 'escape-markup' :)
            or $state[$p:lk] = 427426                       (: 'if' ':' 'escape-markup' :)
            or $state[$p:lk] = 427427                       (: 'insert' ':' 'escape-markup' :)
            or $state[$p:lk] = 427429                       (: 'label-elements' ':' 'escape-markup' :)
            or $state[$p:lk] = 427430                       (: 'library' ':' 'escape-markup' :)
            or $state[$p:lk] = 427431                       (: 'load' ':' 'escape-markup' :)
            or $state[$p:lk] = 427432                       (: 'make-absolute-uris' ':' 'escape-markup' :)
            or $state[$p:lk] = 427433                       (: 'namespace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427434                       (: 'namespace-rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 427435                       (: 'pack' ':' 'escape-markup' :)
            or $state[$p:lk] = 427436                       (: 'parameters' ':' 'escape-markup' :)
            or $state[$p:lk] = 427438                       (: 'pipeline' ':' 'escape-markup' :)
            or $state[$p:lk] = 427440                       (: 'rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 427441                       (: 'replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427443                       (: 'set-attributes' ':' 'escape-markup' :)
            or $state[$p:lk] = 427444                       (: 'sink' ':' 'escape-markup' :)
            or $state[$p:lk] = 427445                       (: 'split-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 427446                       (: 'step' ':' 'escape-markup' :)
            or $state[$p:lk] = 427447                       (: 'store' ':' 'escape-markup' :)
            or $state[$p:lk] = 427448                       (: 'string-replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427449                       (: 'try' ':' 'escape-markup' :)
            or $state[$p:lk] = 427450                       (: 'unescape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 427451                       (: 'unwrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 427452                       (: 'uuid' ':' 'escape-markup' :)
            or $state[$p:lk] = 427453                       (: 'validate-with-relax-ng' ':' 'escape-markup' :)
            or $state[$p:lk] = 427454                       (: 'validate-with-schematron' ':' 'escape-markup' :)
            or $state[$p:lk] = 427455                       (: 'validate-with-xml-schema' ':' 'escape-markup' :)
            or $state[$p:lk] = 427456                       (: 'variable' ':' 'escape-markup' :)
            or $state[$p:lk] = 427457                       (: 'viewport' ':' 'escape-markup' :)
            or $state[$p:lk] = 427458                       (: 'wrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 427459                       (: 'wrap-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 427460                       (: 'www-form-urldecode' ':' 'escape-markup' :)
            or $state[$p:lk] = 427461                       (: 'www-form-urlencode' ':' 'escape-markup' :)
            or $state[$p:lk] = 427462                       (: 'xinclude' ':' 'escape-markup' :)
            or $state[$p:lk] = 427463                       (: 'xquery' ':' 'escape-markup' :)
            or $state[$p:lk] = 427464                       (: 'xsl-formatter' ':' 'escape-markup' :)
            or $state[$p:lk] = 427465                       (: 'xslt' ':' 'escape-markup' :)
            or $state[$p:lk] = 443781                       (: NCName^Token ':' 'exec' :)
            or $state[$p:lk] = 443790                       (: 'add-attribute' ':' 'exec' :)
            or $state[$p:lk] = 443791                       (: 'add-xml-base' ':' 'exec' :)
            or $state[$p:lk] = 443793                       (: 'compare' ':' 'exec' :)
            or $state[$p:lk] = 443794                       (: 'count' ':' 'exec' :)
            or $state[$p:lk] = 443795                       (: 'default' ':' 'exec' :)
            or $state[$p:lk] = 443796                       (: 'delete' ':' 'exec' :)
            or $state[$p:lk] = 443797                       (: 'directory-list' ':' 'exec' :)
            or $state[$p:lk] = 443799                       (: 'else' ':' 'exec' :)
            or $state[$p:lk] = 443801                       (: 'error' ':' 'exec' :)
            or $state[$p:lk] = 443802                       (: 'escape-markup' ':' 'exec' :)
            or $state[$p:lk] = 443803                       (: 'exec' ':' 'exec' :)
            or $state[$p:lk] = 443804                       (: 'filter' ':' 'exec' :)
            or $state[$p:lk] = 443805                       (: 'for-each' ':' 'exec' :)
            or $state[$p:lk] = 443807                       (: 'hash' ':' 'exec' :)
            or $state[$p:lk] = 443808                       (: 'http-request' ':' 'exec' :)
            or $state[$p:lk] = 443809                       (: 'identity' ':' 'exec' :)
            or $state[$p:lk] = 443810                       (: 'if' ':' 'exec' :)
            or $state[$p:lk] = 443811                       (: 'insert' ':' 'exec' :)
            or $state[$p:lk] = 443813                       (: 'label-elements' ':' 'exec' :)
            or $state[$p:lk] = 443814                       (: 'library' ':' 'exec' :)
            or $state[$p:lk] = 443815                       (: 'load' ':' 'exec' :)
            or $state[$p:lk] = 443816                       (: 'make-absolute-uris' ':' 'exec' :)
            or $state[$p:lk] = 443817                       (: 'namespace' ':' 'exec' :)
            or $state[$p:lk] = 443818                       (: 'namespace-rename' ':' 'exec' :)
            or $state[$p:lk] = 443819                       (: 'pack' ':' 'exec' :)
            or $state[$p:lk] = 443820                       (: 'parameters' ':' 'exec' :)
            or $state[$p:lk] = 443822                       (: 'pipeline' ':' 'exec' :)
            or $state[$p:lk] = 443824                       (: 'rename' ':' 'exec' :)
            or $state[$p:lk] = 443825                       (: 'replace' ':' 'exec' :)
            or $state[$p:lk] = 443827                       (: 'set-attributes' ':' 'exec' :)
            or $state[$p:lk] = 443828                       (: 'sink' ':' 'exec' :)
            or $state[$p:lk] = 443829                       (: 'split-sequence' ':' 'exec' :)
            or $state[$p:lk] = 443830                       (: 'step' ':' 'exec' :)
            or $state[$p:lk] = 443831                       (: 'store' ':' 'exec' :)
            or $state[$p:lk] = 443832                       (: 'string-replace' ':' 'exec' :)
            or $state[$p:lk] = 443833                       (: 'try' ':' 'exec' :)
            or $state[$p:lk] = 443834                       (: 'unescape-markup' ':' 'exec' :)
            or $state[$p:lk] = 443835                       (: 'unwrap' ':' 'exec' :)
            or $state[$p:lk] = 443836                       (: 'uuid' ':' 'exec' :)
            or $state[$p:lk] = 443837                       (: 'validate-with-relax-ng' ':' 'exec' :)
            or $state[$p:lk] = 443838                       (: 'validate-with-schematron' ':' 'exec' :)
            or $state[$p:lk] = 443839                       (: 'validate-with-xml-schema' ':' 'exec' :)
            or $state[$p:lk] = 443840                       (: 'variable' ':' 'exec' :)
            or $state[$p:lk] = 443841                       (: 'viewport' ':' 'exec' :)
            or $state[$p:lk] = 443842                       (: 'wrap' ':' 'exec' :)
            or $state[$p:lk] = 443843                       (: 'wrap-sequence' ':' 'exec' :)
            or $state[$p:lk] = 443844                       (: 'www-form-urldecode' ':' 'exec' :)
            or $state[$p:lk] = 443845                       (: 'www-form-urlencode' ':' 'exec' :)
            or $state[$p:lk] = 443846                       (: 'xinclude' ':' 'exec' :)
            or $state[$p:lk] = 443847                       (: 'xquery' ':' 'exec' :)
            or $state[$p:lk] = 443848                       (: 'xsl-formatter' ':' 'exec' :)
            or $state[$p:lk] = 443849                       (: 'xslt' ':' 'exec' :)
            or $state[$p:lk] = 460165                       (: NCName^Token ':' 'filter' :)
            or $state[$p:lk] = 460174                       (: 'add-attribute' ':' 'filter' :)
            or $state[$p:lk] = 460175                       (: 'add-xml-base' ':' 'filter' :)
            or $state[$p:lk] = 460177                       (: 'compare' ':' 'filter' :)
            or $state[$p:lk] = 460178                       (: 'count' ':' 'filter' :)
            or $state[$p:lk] = 460179                       (: 'default' ':' 'filter' :)
            or $state[$p:lk] = 460180                       (: 'delete' ':' 'filter' :)
            or $state[$p:lk] = 460181                       (: 'directory-list' ':' 'filter' :)
            or $state[$p:lk] = 460183                       (: 'else' ':' 'filter' :)
            or $state[$p:lk] = 460185                       (: 'error' ':' 'filter' :)
            or $state[$p:lk] = 460186                       (: 'escape-markup' ':' 'filter' :)
            or $state[$p:lk] = 460187                       (: 'exec' ':' 'filter' :)
            or $state[$p:lk] = 460188                       (: 'filter' ':' 'filter' :)
            or $state[$p:lk] = 460189                       (: 'for-each' ':' 'filter' :)
            or $state[$p:lk] = 460191                       (: 'hash' ':' 'filter' :)
            or $state[$p:lk] = 460192                       (: 'http-request' ':' 'filter' :)
            or $state[$p:lk] = 460193                       (: 'identity' ':' 'filter' :)
            or $state[$p:lk] = 460194                       (: 'if' ':' 'filter' :)
            or $state[$p:lk] = 460195                       (: 'insert' ':' 'filter' :)
            or $state[$p:lk] = 460197                       (: 'label-elements' ':' 'filter' :)
            or $state[$p:lk] = 460198                       (: 'library' ':' 'filter' :)
            or $state[$p:lk] = 460199                       (: 'load' ':' 'filter' :)
            or $state[$p:lk] = 460200                       (: 'make-absolute-uris' ':' 'filter' :)
            or $state[$p:lk] = 460201                       (: 'namespace' ':' 'filter' :)
            or $state[$p:lk] = 460202                       (: 'namespace-rename' ':' 'filter' :)
            or $state[$p:lk] = 460203                       (: 'pack' ':' 'filter' :)
            or $state[$p:lk] = 460204                       (: 'parameters' ':' 'filter' :)
            or $state[$p:lk] = 460206                       (: 'pipeline' ':' 'filter' :)
            or $state[$p:lk] = 460208                       (: 'rename' ':' 'filter' :)
            or $state[$p:lk] = 460209                       (: 'replace' ':' 'filter' :)
            or $state[$p:lk] = 460211                       (: 'set-attributes' ':' 'filter' :)
            or $state[$p:lk] = 460212                       (: 'sink' ':' 'filter' :)
            or $state[$p:lk] = 460213                       (: 'split-sequence' ':' 'filter' :)
            or $state[$p:lk] = 460214                       (: 'step' ':' 'filter' :)
            or $state[$p:lk] = 460215                       (: 'store' ':' 'filter' :)
            or $state[$p:lk] = 460216                       (: 'string-replace' ':' 'filter' :)
            or $state[$p:lk] = 460217                       (: 'try' ':' 'filter' :)
            or $state[$p:lk] = 460218                       (: 'unescape-markup' ':' 'filter' :)
            or $state[$p:lk] = 460219                       (: 'unwrap' ':' 'filter' :)
            or $state[$p:lk] = 460220                       (: 'uuid' ':' 'filter' :)
            or $state[$p:lk] = 460221                       (: 'validate-with-relax-ng' ':' 'filter' :)
            or $state[$p:lk] = 460222                       (: 'validate-with-schematron' ':' 'filter' :)
            or $state[$p:lk] = 460223                       (: 'validate-with-xml-schema' ':' 'filter' :)
            or $state[$p:lk] = 460224                       (: 'variable' ':' 'filter' :)
            or $state[$p:lk] = 460225                       (: 'viewport' ':' 'filter' :)
            or $state[$p:lk] = 460226                       (: 'wrap' ':' 'filter' :)
            or $state[$p:lk] = 460227                       (: 'wrap-sequence' ':' 'filter' :)
            or $state[$p:lk] = 460228                       (: 'www-form-urldecode' ':' 'filter' :)
            or $state[$p:lk] = 460229                       (: 'www-form-urlencode' ':' 'filter' :)
            or $state[$p:lk] = 460230                       (: 'xinclude' ':' 'filter' :)
            or $state[$p:lk] = 460231                       (: 'xquery' ':' 'filter' :)
            or $state[$p:lk] = 460232                       (: 'xsl-formatter' ':' 'filter' :)
            or $state[$p:lk] = 460233                       (: 'xslt' ':' 'filter' :)
            or $state[$p:lk] = 476549                       (: NCName^Token ':' 'for-each' :)
            or $state[$p:lk] = 476558                       (: 'add-attribute' ':' 'for-each' :)
            or $state[$p:lk] = 476559                       (: 'add-xml-base' ':' 'for-each' :)
            or $state[$p:lk] = 476561                       (: 'compare' ':' 'for-each' :)
            or $state[$p:lk] = 476562                       (: 'count' ':' 'for-each' :)
            or $state[$p:lk] = 476563                       (: 'default' ':' 'for-each' :)
            or $state[$p:lk] = 476564                       (: 'delete' ':' 'for-each' :)
            or $state[$p:lk] = 476565                       (: 'directory-list' ':' 'for-each' :)
            or $state[$p:lk] = 476567                       (: 'else' ':' 'for-each' :)
            or $state[$p:lk] = 476569                       (: 'error' ':' 'for-each' :)
            or $state[$p:lk] = 476570                       (: 'escape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 476571                       (: 'exec' ':' 'for-each' :)
            or $state[$p:lk] = 476572                       (: 'filter' ':' 'for-each' :)
            or $state[$p:lk] = 476573                       (: 'for-each' ':' 'for-each' :)
            or $state[$p:lk] = 476575                       (: 'hash' ':' 'for-each' :)
            or $state[$p:lk] = 476576                       (: 'http-request' ':' 'for-each' :)
            or $state[$p:lk] = 476577                       (: 'identity' ':' 'for-each' :)
            or $state[$p:lk] = 476578                       (: 'if' ':' 'for-each' :)
            or $state[$p:lk] = 476579                       (: 'insert' ':' 'for-each' :)
            or $state[$p:lk] = 476581                       (: 'label-elements' ':' 'for-each' :)
            or $state[$p:lk] = 476582                       (: 'library' ':' 'for-each' :)
            or $state[$p:lk] = 476583                       (: 'load' ':' 'for-each' :)
            or $state[$p:lk] = 476584                       (: 'make-absolute-uris' ':' 'for-each' :)
            or $state[$p:lk] = 476585                       (: 'namespace' ':' 'for-each' :)
            or $state[$p:lk] = 476586                       (: 'namespace-rename' ':' 'for-each' :)
            or $state[$p:lk] = 476587                       (: 'pack' ':' 'for-each' :)
            or $state[$p:lk] = 476588                       (: 'parameters' ':' 'for-each' :)
            or $state[$p:lk] = 476590                       (: 'pipeline' ':' 'for-each' :)
            or $state[$p:lk] = 476592                       (: 'rename' ':' 'for-each' :)
            or $state[$p:lk] = 476593                       (: 'replace' ':' 'for-each' :)
            or $state[$p:lk] = 476595                       (: 'set-attributes' ':' 'for-each' :)
            or $state[$p:lk] = 476596                       (: 'sink' ':' 'for-each' :)
            or $state[$p:lk] = 476597                       (: 'split-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 476598                       (: 'step' ':' 'for-each' :)
            or $state[$p:lk] = 476599                       (: 'store' ':' 'for-each' :)
            or $state[$p:lk] = 476600                       (: 'string-replace' ':' 'for-each' :)
            or $state[$p:lk] = 476601                       (: 'try' ':' 'for-each' :)
            or $state[$p:lk] = 476602                       (: 'unescape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 476603                       (: 'unwrap' ':' 'for-each' :)
            or $state[$p:lk] = 476604                       (: 'uuid' ':' 'for-each' :)
            or $state[$p:lk] = 476605                       (: 'validate-with-relax-ng' ':' 'for-each' :)
            or $state[$p:lk] = 476606                       (: 'validate-with-schematron' ':' 'for-each' :)
            or $state[$p:lk] = 476607                       (: 'validate-with-xml-schema' ':' 'for-each' :)
            or $state[$p:lk] = 476608                       (: 'variable' ':' 'for-each' :)
            or $state[$p:lk] = 476609                       (: 'viewport' ':' 'for-each' :)
            or $state[$p:lk] = 476610                       (: 'wrap' ':' 'for-each' :)
            or $state[$p:lk] = 476611                       (: 'wrap-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 476612                       (: 'www-form-urldecode' ':' 'for-each' :)
            or $state[$p:lk] = 476613                       (: 'www-form-urlencode' ':' 'for-each' :)
            or $state[$p:lk] = 476614                       (: 'xinclude' ':' 'for-each' :)
            or $state[$p:lk] = 476615                       (: 'xquery' ':' 'for-each' :)
            or $state[$p:lk] = 476616                       (: 'xsl-formatter' ':' 'for-each' :)
            or $state[$p:lk] = 476617                       (: 'xslt' ':' 'for-each' :)
            or $state[$p:lk] = 509317                       (: NCName^Token ':' 'hash' :)
            or $state[$p:lk] = 509326                       (: 'add-attribute' ':' 'hash' :)
            or $state[$p:lk] = 509327                       (: 'add-xml-base' ':' 'hash' :)
            or $state[$p:lk] = 509329                       (: 'compare' ':' 'hash' :)
            or $state[$p:lk] = 509330                       (: 'count' ':' 'hash' :)
            or $state[$p:lk] = 509331                       (: 'default' ':' 'hash' :)
            or $state[$p:lk] = 509332                       (: 'delete' ':' 'hash' :)
            or $state[$p:lk] = 509333                       (: 'directory-list' ':' 'hash' :)
            or $state[$p:lk] = 509335                       (: 'else' ':' 'hash' :)
            or $state[$p:lk] = 509337                       (: 'error' ':' 'hash' :)
            or $state[$p:lk] = 509338                       (: 'escape-markup' ':' 'hash' :)
            or $state[$p:lk] = 509339                       (: 'exec' ':' 'hash' :)
            or $state[$p:lk] = 509340                       (: 'filter' ':' 'hash' :)
            or $state[$p:lk] = 509341                       (: 'for-each' ':' 'hash' :)
            or $state[$p:lk] = 509343                       (: 'hash' ':' 'hash' :)
            or $state[$p:lk] = 509344                       (: 'http-request' ':' 'hash' :)
            or $state[$p:lk] = 509345                       (: 'identity' ':' 'hash' :)
            or $state[$p:lk] = 509346                       (: 'if' ':' 'hash' :)
            or $state[$p:lk] = 509347                       (: 'insert' ':' 'hash' :)
            or $state[$p:lk] = 509349                       (: 'label-elements' ':' 'hash' :)
            or $state[$p:lk] = 509350                       (: 'library' ':' 'hash' :)
            or $state[$p:lk] = 509351                       (: 'load' ':' 'hash' :)
            or $state[$p:lk] = 509352                       (: 'make-absolute-uris' ':' 'hash' :)
            or $state[$p:lk] = 509353                       (: 'namespace' ':' 'hash' :)
            or $state[$p:lk] = 509354                       (: 'namespace-rename' ':' 'hash' :)
            or $state[$p:lk] = 509355                       (: 'pack' ':' 'hash' :)
            or $state[$p:lk] = 509356                       (: 'parameters' ':' 'hash' :)
            or $state[$p:lk] = 509358                       (: 'pipeline' ':' 'hash' :)
            or $state[$p:lk] = 509360                       (: 'rename' ':' 'hash' :)
            or $state[$p:lk] = 509361                       (: 'replace' ':' 'hash' :)
            or $state[$p:lk] = 509363                       (: 'set-attributes' ':' 'hash' :)
            or $state[$p:lk] = 509364                       (: 'sink' ':' 'hash' :)
            or $state[$p:lk] = 509365                       (: 'split-sequence' ':' 'hash' :)
            or $state[$p:lk] = 509366                       (: 'step' ':' 'hash' :)
            or $state[$p:lk] = 509367                       (: 'store' ':' 'hash' :)
            or $state[$p:lk] = 509368                       (: 'string-replace' ':' 'hash' :)
            or $state[$p:lk] = 509369                       (: 'try' ':' 'hash' :)
            or $state[$p:lk] = 509370                       (: 'unescape-markup' ':' 'hash' :)
            or $state[$p:lk] = 509371                       (: 'unwrap' ':' 'hash' :)
            or $state[$p:lk] = 509372                       (: 'uuid' ':' 'hash' :)
            or $state[$p:lk] = 509373                       (: 'validate-with-relax-ng' ':' 'hash' :)
            or $state[$p:lk] = 509374                       (: 'validate-with-schematron' ':' 'hash' :)
            or $state[$p:lk] = 509375                       (: 'validate-with-xml-schema' ':' 'hash' :)
            or $state[$p:lk] = 509376                       (: 'variable' ':' 'hash' :)
            or $state[$p:lk] = 509377                       (: 'viewport' ':' 'hash' :)
            or $state[$p:lk] = 509378                       (: 'wrap' ':' 'hash' :)
            or $state[$p:lk] = 509379                       (: 'wrap-sequence' ':' 'hash' :)
            or $state[$p:lk] = 509380                       (: 'www-form-urldecode' ':' 'hash' :)
            or $state[$p:lk] = 509381                       (: 'www-form-urlencode' ':' 'hash' :)
            or $state[$p:lk] = 509382                       (: 'xinclude' ':' 'hash' :)
            or $state[$p:lk] = 509383                       (: 'xquery' ':' 'hash' :)
            or $state[$p:lk] = 509384                       (: 'xsl-formatter' ':' 'hash' :)
            or $state[$p:lk] = 509385                       (: 'xslt' ':' 'hash' :)
            or $state[$p:lk] = 525701                       (: NCName^Token ':' 'http-request' :)
            or $state[$p:lk] = 525710                       (: 'add-attribute' ':' 'http-request' :)
            or $state[$p:lk] = 525711                       (: 'add-xml-base' ':' 'http-request' :)
            or $state[$p:lk] = 525713                       (: 'compare' ':' 'http-request' :)
            or $state[$p:lk] = 525714                       (: 'count' ':' 'http-request' :)
            or $state[$p:lk] = 525715                       (: 'default' ':' 'http-request' :)
            or $state[$p:lk] = 525716                       (: 'delete' ':' 'http-request' :)
            or $state[$p:lk] = 525717                       (: 'directory-list' ':' 'http-request' :)
            or $state[$p:lk] = 525719                       (: 'else' ':' 'http-request' :)
            or $state[$p:lk] = 525721                       (: 'error' ':' 'http-request' :)
            or $state[$p:lk] = 525722                       (: 'escape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 525723                       (: 'exec' ':' 'http-request' :)
            or $state[$p:lk] = 525724                       (: 'filter' ':' 'http-request' :)
            or $state[$p:lk] = 525725                       (: 'for-each' ':' 'http-request' :)
            or $state[$p:lk] = 525727                       (: 'hash' ':' 'http-request' :)
            or $state[$p:lk] = 525728                       (: 'http-request' ':' 'http-request' :)
            or $state[$p:lk] = 525729                       (: 'identity' ':' 'http-request' :)
            or $state[$p:lk] = 525730                       (: 'if' ':' 'http-request' :)
            or $state[$p:lk] = 525731                       (: 'insert' ':' 'http-request' :)
            or $state[$p:lk] = 525733                       (: 'label-elements' ':' 'http-request' :)
            or $state[$p:lk] = 525734                       (: 'library' ':' 'http-request' :)
            or $state[$p:lk] = 525735                       (: 'load' ':' 'http-request' :)
            or $state[$p:lk] = 525736                       (: 'make-absolute-uris' ':' 'http-request' :)
            or $state[$p:lk] = 525737                       (: 'namespace' ':' 'http-request' :)
            or $state[$p:lk] = 525738                       (: 'namespace-rename' ':' 'http-request' :)
            or $state[$p:lk] = 525739                       (: 'pack' ':' 'http-request' :)
            or $state[$p:lk] = 525740                       (: 'parameters' ':' 'http-request' :)
            or $state[$p:lk] = 525742                       (: 'pipeline' ':' 'http-request' :)
            or $state[$p:lk] = 525744                       (: 'rename' ':' 'http-request' :)
            or $state[$p:lk] = 525745                       (: 'replace' ':' 'http-request' :)
            or $state[$p:lk] = 525747                       (: 'set-attributes' ':' 'http-request' :)
            or $state[$p:lk] = 525748                       (: 'sink' ':' 'http-request' :)
            or $state[$p:lk] = 525749                       (: 'split-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 525750                       (: 'step' ':' 'http-request' :)
            or $state[$p:lk] = 525751                       (: 'store' ':' 'http-request' :)
            or $state[$p:lk] = 525752                       (: 'string-replace' ':' 'http-request' :)
            or $state[$p:lk] = 525753                       (: 'try' ':' 'http-request' :)
            or $state[$p:lk] = 525754                       (: 'unescape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 525755                       (: 'unwrap' ':' 'http-request' :)
            or $state[$p:lk] = 525756                       (: 'uuid' ':' 'http-request' :)
            or $state[$p:lk] = 525757                       (: 'validate-with-relax-ng' ':' 'http-request' :)
            or $state[$p:lk] = 525758                       (: 'validate-with-schematron' ':' 'http-request' :)
            or $state[$p:lk] = 525759                       (: 'validate-with-xml-schema' ':' 'http-request' :)
            or $state[$p:lk] = 525760                       (: 'variable' ':' 'http-request' :)
            or $state[$p:lk] = 525761                       (: 'viewport' ':' 'http-request' :)
            or $state[$p:lk] = 525762                       (: 'wrap' ':' 'http-request' :)
            or $state[$p:lk] = 525763                       (: 'wrap-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 525764                       (: 'www-form-urldecode' ':' 'http-request' :)
            or $state[$p:lk] = 525765                       (: 'www-form-urlencode' ':' 'http-request' :)
            or $state[$p:lk] = 525766                       (: 'xinclude' ':' 'http-request' :)
            or $state[$p:lk] = 525767                       (: 'xquery' ':' 'http-request' :)
            or $state[$p:lk] = 525768                       (: 'xsl-formatter' ':' 'http-request' :)
            or $state[$p:lk] = 525769                       (: 'xslt' ':' 'http-request' :)
            or $state[$p:lk] = 542085                       (: NCName^Token ':' 'identity' :)
            or $state[$p:lk] = 542094                       (: 'add-attribute' ':' 'identity' :)
            or $state[$p:lk] = 542095                       (: 'add-xml-base' ':' 'identity' :)
            or $state[$p:lk] = 542097                       (: 'compare' ':' 'identity' :)
            or $state[$p:lk] = 542098                       (: 'count' ':' 'identity' :)
            or $state[$p:lk] = 542099                       (: 'default' ':' 'identity' :)
            or $state[$p:lk] = 542100                       (: 'delete' ':' 'identity' :)
            or $state[$p:lk] = 542101                       (: 'directory-list' ':' 'identity' :)
            or $state[$p:lk] = 542103                       (: 'else' ':' 'identity' :)
            or $state[$p:lk] = 542105                       (: 'error' ':' 'identity' :)
            or $state[$p:lk] = 542106                       (: 'escape-markup' ':' 'identity' :)
            or $state[$p:lk] = 542107                       (: 'exec' ':' 'identity' :)
            or $state[$p:lk] = 542108                       (: 'filter' ':' 'identity' :)
            or $state[$p:lk] = 542109                       (: 'for-each' ':' 'identity' :)
            or $state[$p:lk] = 542111                       (: 'hash' ':' 'identity' :)
            or $state[$p:lk] = 542112                       (: 'http-request' ':' 'identity' :)
            or $state[$p:lk] = 542113                       (: 'identity' ':' 'identity' :)
            or $state[$p:lk] = 542114                       (: 'if' ':' 'identity' :)
            or $state[$p:lk] = 542115                       (: 'insert' ':' 'identity' :)
            or $state[$p:lk] = 542117                       (: 'label-elements' ':' 'identity' :)
            or $state[$p:lk] = 542118                       (: 'library' ':' 'identity' :)
            or $state[$p:lk] = 542119                       (: 'load' ':' 'identity' :)
            or $state[$p:lk] = 542120                       (: 'make-absolute-uris' ':' 'identity' :)
            or $state[$p:lk] = 542121                       (: 'namespace' ':' 'identity' :)
            or $state[$p:lk] = 542122                       (: 'namespace-rename' ':' 'identity' :)
            or $state[$p:lk] = 542123                       (: 'pack' ':' 'identity' :)
            or $state[$p:lk] = 542124                       (: 'parameters' ':' 'identity' :)
            or $state[$p:lk] = 542126                       (: 'pipeline' ':' 'identity' :)
            or $state[$p:lk] = 542128                       (: 'rename' ':' 'identity' :)
            or $state[$p:lk] = 542129                       (: 'replace' ':' 'identity' :)
            or $state[$p:lk] = 542131                       (: 'set-attributes' ':' 'identity' :)
            or $state[$p:lk] = 542132                       (: 'sink' ':' 'identity' :)
            or $state[$p:lk] = 542133                       (: 'split-sequence' ':' 'identity' :)
            or $state[$p:lk] = 542134                       (: 'step' ':' 'identity' :)
            or $state[$p:lk] = 542135                       (: 'store' ':' 'identity' :)
            or $state[$p:lk] = 542136                       (: 'string-replace' ':' 'identity' :)
            or $state[$p:lk] = 542137                       (: 'try' ':' 'identity' :)
            or $state[$p:lk] = 542138                       (: 'unescape-markup' ':' 'identity' :)
            or $state[$p:lk] = 542139                       (: 'unwrap' ':' 'identity' :)
            or $state[$p:lk] = 542140                       (: 'uuid' ':' 'identity' :)
            or $state[$p:lk] = 542141                       (: 'validate-with-relax-ng' ':' 'identity' :)
            or $state[$p:lk] = 542142                       (: 'validate-with-schematron' ':' 'identity' :)
            or $state[$p:lk] = 542143                       (: 'validate-with-xml-schema' ':' 'identity' :)
            or $state[$p:lk] = 542144                       (: 'variable' ':' 'identity' :)
            or $state[$p:lk] = 542145                       (: 'viewport' ':' 'identity' :)
            or $state[$p:lk] = 542146                       (: 'wrap' ':' 'identity' :)
            or $state[$p:lk] = 542147                       (: 'wrap-sequence' ':' 'identity' :)
            or $state[$p:lk] = 542148                       (: 'www-form-urldecode' ':' 'identity' :)
            or $state[$p:lk] = 542149                       (: 'www-form-urlencode' ':' 'identity' :)
            or $state[$p:lk] = 542150                       (: 'xinclude' ':' 'identity' :)
            or $state[$p:lk] = 542151                       (: 'xquery' ':' 'identity' :)
            or $state[$p:lk] = 542152                       (: 'xsl-formatter' ':' 'identity' :)
            or $state[$p:lk] = 542153                       (: 'xslt' ':' 'identity' :)
            or $state[$p:lk] = 558469                       (: NCName^Token ':' 'if' :)
            or $state[$p:lk] = 558478                       (: 'add-attribute' ':' 'if' :)
            or $state[$p:lk] = 558479                       (: 'add-xml-base' ':' 'if' :)
            or $state[$p:lk] = 558481                       (: 'compare' ':' 'if' :)
            or $state[$p:lk] = 558482                       (: 'count' ':' 'if' :)
            or $state[$p:lk] = 558483                       (: 'default' ':' 'if' :)
            or $state[$p:lk] = 558484                       (: 'delete' ':' 'if' :)
            or $state[$p:lk] = 558485                       (: 'directory-list' ':' 'if' :)
            or $state[$p:lk] = 558487                       (: 'else' ':' 'if' :)
            or $state[$p:lk] = 558489                       (: 'error' ':' 'if' :)
            or $state[$p:lk] = 558490                       (: 'escape-markup' ':' 'if' :)
            or $state[$p:lk] = 558491                       (: 'exec' ':' 'if' :)
            or $state[$p:lk] = 558492                       (: 'filter' ':' 'if' :)
            or $state[$p:lk] = 558493                       (: 'for-each' ':' 'if' :)
            or $state[$p:lk] = 558495                       (: 'hash' ':' 'if' :)
            or $state[$p:lk] = 558496                       (: 'http-request' ':' 'if' :)
            or $state[$p:lk] = 558497                       (: 'identity' ':' 'if' :)
            or $state[$p:lk] = 558498                       (: 'if' ':' 'if' :)
            or $state[$p:lk] = 558499                       (: 'insert' ':' 'if' :)
            or $state[$p:lk] = 558501                       (: 'label-elements' ':' 'if' :)
            or $state[$p:lk] = 558502                       (: 'library' ':' 'if' :)
            or $state[$p:lk] = 558503                       (: 'load' ':' 'if' :)
            or $state[$p:lk] = 558504                       (: 'make-absolute-uris' ':' 'if' :)
            or $state[$p:lk] = 558505                       (: 'namespace' ':' 'if' :)
            or $state[$p:lk] = 558506                       (: 'namespace-rename' ':' 'if' :)
            or $state[$p:lk] = 558507                       (: 'pack' ':' 'if' :)
            or $state[$p:lk] = 558508                       (: 'parameters' ':' 'if' :)
            or $state[$p:lk] = 558510                       (: 'pipeline' ':' 'if' :)
            or $state[$p:lk] = 558512                       (: 'rename' ':' 'if' :)
            or $state[$p:lk] = 558513                       (: 'replace' ':' 'if' :)
            or $state[$p:lk] = 558515                       (: 'set-attributes' ':' 'if' :)
            or $state[$p:lk] = 558516                       (: 'sink' ':' 'if' :)
            or $state[$p:lk] = 558517                       (: 'split-sequence' ':' 'if' :)
            or $state[$p:lk] = 558518                       (: 'step' ':' 'if' :)
            or $state[$p:lk] = 558519                       (: 'store' ':' 'if' :)
            or $state[$p:lk] = 558520                       (: 'string-replace' ':' 'if' :)
            or $state[$p:lk] = 558521                       (: 'try' ':' 'if' :)
            or $state[$p:lk] = 558522                       (: 'unescape-markup' ':' 'if' :)
            or $state[$p:lk] = 558523                       (: 'unwrap' ':' 'if' :)
            or $state[$p:lk] = 558524                       (: 'uuid' ':' 'if' :)
            or $state[$p:lk] = 558525                       (: 'validate-with-relax-ng' ':' 'if' :)
            or $state[$p:lk] = 558526                       (: 'validate-with-schematron' ':' 'if' :)
            or $state[$p:lk] = 558527                       (: 'validate-with-xml-schema' ':' 'if' :)
            or $state[$p:lk] = 558528                       (: 'variable' ':' 'if' :)
            or $state[$p:lk] = 558529                       (: 'viewport' ':' 'if' :)
            or $state[$p:lk] = 558530                       (: 'wrap' ':' 'if' :)
            or $state[$p:lk] = 558531                       (: 'wrap-sequence' ':' 'if' :)
            or $state[$p:lk] = 558532                       (: 'www-form-urldecode' ':' 'if' :)
            or $state[$p:lk] = 558533                       (: 'www-form-urlencode' ':' 'if' :)
            or $state[$p:lk] = 558534                       (: 'xinclude' ':' 'if' :)
            or $state[$p:lk] = 558535                       (: 'xquery' ':' 'if' :)
            or $state[$p:lk] = 558536                       (: 'xsl-formatter' ':' 'if' :)
            or $state[$p:lk] = 558537                       (: 'xslt' ':' 'if' :)
            or $state[$p:lk] = 574853                       (: NCName^Token ':' 'insert' :)
            or $state[$p:lk] = 574862                       (: 'add-attribute' ':' 'insert' :)
            or $state[$p:lk] = 574863                       (: 'add-xml-base' ':' 'insert' :)
            or $state[$p:lk] = 574865                       (: 'compare' ':' 'insert' :)
            or $state[$p:lk] = 574866                       (: 'count' ':' 'insert' :)
            or $state[$p:lk] = 574867                       (: 'default' ':' 'insert' :)
            or $state[$p:lk] = 574868                       (: 'delete' ':' 'insert' :)
            or $state[$p:lk] = 574869                       (: 'directory-list' ':' 'insert' :)
            or $state[$p:lk] = 574871                       (: 'else' ':' 'insert' :)
            or $state[$p:lk] = 574873                       (: 'error' ':' 'insert' :)
            or $state[$p:lk] = 574874                       (: 'escape-markup' ':' 'insert' :)
            or $state[$p:lk] = 574875                       (: 'exec' ':' 'insert' :)
            or $state[$p:lk] = 574876                       (: 'filter' ':' 'insert' :)
            or $state[$p:lk] = 574877                       (: 'for-each' ':' 'insert' :)
            or $state[$p:lk] = 574879                       (: 'hash' ':' 'insert' :)
            or $state[$p:lk] = 574880                       (: 'http-request' ':' 'insert' :)
            or $state[$p:lk] = 574881                       (: 'identity' ':' 'insert' :)
            or $state[$p:lk] = 574882                       (: 'if' ':' 'insert' :)
            or $state[$p:lk] = 574883                       (: 'insert' ':' 'insert' :)
            or $state[$p:lk] = 574885                       (: 'label-elements' ':' 'insert' :)
            or $state[$p:lk] = 574886                       (: 'library' ':' 'insert' :)
            or $state[$p:lk] = 574887                       (: 'load' ':' 'insert' :)
            or $state[$p:lk] = 574888                       (: 'make-absolute-uris' ':' 'insert' :)
            or $state[$p:lk] = 574889                       (: 'namespace' ':' 'insert' :)
            or $state[$p:lk] = 574890                       (: 'namespace-rename' ':' 'insert' :)
            or $state[$p:lk] = 574891                       (: 'pack' ':' 'insert' :)
            or $state[$p:lk] = 574892                       (: 'parameters' ':' 'insert' :)
            or $state[$p:lk] = 574894                       (: 'pipeline' ':' 'insert' :)
            or $state[$p:lk] = 574896                       (: 'rename' ':' 'insert' :)
            or $state[$p:lk] = 574897                       (: 'replace' ':' 'insert' :)
            or $state[$p:lk] = 574899                       (: 'set-attributes' ':' 'insert' :)
            or $state[$p:lk] = 574900                       (: 'sink' ':' 'insert' :)
            or $state[$p:lk] = 574901                       (: 'split-sequence' ':' 'insert' :)
            or $state[$p:lk] = 574902                       (: 'step' ':' 'insert' :)
            or $state[$p:lk] = 574903                       (: 'store' ':' 'insert' :)
            or $state[$p:lk] = 574904                       (: 'string-replace' ':' 'insert' :)
            or $state[$p:lk] = 574905                       (: 'try' ':' 'insert' :)
            or $state[$p:lk] = 574906                       (: 'unescape-markup' ':' 'insert' :)
            or $state[$p:lk] = 574907                       (: 'unwrap' ':' 'insert' :)
            or $state[$p:lk] = 574908                       (: 'uuid' ':' 'insert' :)
            or $state[$p:lk] = 574909                       (: 'validate-with-relax-ng' ':' 'insert' :)
            or $state[$p:lk] = 574910                       (: 'validate-with-schematron' ':' 'insert' :)
            or $state[$p:lk] = 574911                       (: 'validate-with-xml-schema' ':' 'insert' :)
            or $state[$p:lk] = 574912                       (: 'variable' ':' 'insert' :)
            or $state[$p:lk] = 574913                       (: 'viewport' ':' 'insert' :)
            or $state[$p:lk] = 574914                       (: 'wrap' ':' 'insert' :)
            or $state[$p:lk] = 574915                       (: 'wrap-sequence' ':' 'insert' :)
            or $state[$p:lk] = 574916                       (: 'www-form-urldecode' ':' 'insert' :)
            or $state[$p:lk] = 574917                       (: 'www-form-urlencode' ':' 'insert' :)
            or $state[$p:lk] = 574918                       (: 'xinclude' ':' 'insert' :)
            or $state[$p:lk] = 574919                       (: 'xquery' ':' 'insert' :)
            or $state[$p:lk] = 574920                       (: 'xsl-formatter' ':' 'insert' :)
            or $state[$p:lk] = 574921                       (: 'xslt' ':' 'insert' :)
            or $state[$p:lk] = 607621                       (: NCName^Token ':' 'label-elements' :)
            or $state[$p:lk] = 607630                       (: 'add-attribute' ':' 'label-elements' :)
            or $state[$p:lk] = 607631                       (: 'add-xml-base' ':' 'label-elements' :)
            or $state[$p:lk] = 607633                       (: 'compare' ':' 'label-elements' :)
            or $state[$p:lk] = 607634                       (: 'count' ':' 'label-elements' :)
            or $state[$p:lk] = 607635                       (: 'default' ':' 'label-elements' :)
            or $state[$p:lk] = 607636                       (: 'delete' ':' 'label-elements' :)
            or $state[$p:lk] = 607637                       (: 'directory-list' ':' 'label-elements' :)
            or $state[$p:lk] = 607639                       (: 'else' ':' 'label-elements' :)
            or $state[$p:lk] = 607641                       (: 'error' ':' 'label-elements' :)
            or $state[$p:lk] = 607642                       (: 'escape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 607643                       (: 'exec' ':' 'label-elements' :)
            or $state[$p:lk] = 607644                       (: 'filter' ':' 'label-elements' :)
            or $state[$p:lk] = 607645                       (: 'for-each' ':' 'label-elements' :)
            or $state[$p:lk] = 607647                       (: 'hash' ':' 'label-elements' :)
            or $state[$p:lk] = 607648                       (: 'http-request' ':' 'label-elements' :)
            or $state[$p:lk] = 607649                       (: 'identity' ':' 'label-elements' :)
            or $state[$p:lk] = 607650                       (: 'if' ':' 'label-elements' :)
            or $state[$p:lk] = 607651                       (: 'insert' ':' 'label-elements' :)
            or $state[$p:lk] = 607653                       (: 'label-elements' ':' 'label-elements' :)
            or $state[$p:lk] = 607654                       (: 'library' ':' 'label-elements' :)
            or $state[$p:lk] = 607655                       (: 'load' ':' 'label-elements' :)
            or $state[$p:lk] = 607656                       (: 'make-absolute-uris' ':' 'label-elements' :)
            or $state[$p:lk] = 607657                       (: 'namespace' ':' 'label-elements' :)
            or $state[$p:lk] = 607658                       (: 'namespace-rename' ':' 'label-elements' :)
            or $state[$p:lk] = 607659                       (: 'pack' ':' 'label-elements' :)
            or $state[$p:lk] = 607660                       (: 'parameters' ':' 'label-elements' :)
            or $state[$p:lk] = 607662                       (: 'pipeline' ':' 'label-elements' :)
            or $state[$p:lk] = 607664                       (: 'rename' ':' 'label-elements' :)
            or $state[$p:lk] = 607665                       (: 'replace' ':' 'label-elements' :)
            or $state[$p:lk] = 607667                       (: 'set-attributes' ':' 'label-elements' :)
            or $state[$p:lk] = 607668                       (: 'sink' ':' 'label-elements' :)
            or $state[$p:lk] = 607669                       (: 'split-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 607670                       (: 'step' ':' 'label-elements' :)
            or $state[$p:lk] = 607671                       (: 'store' ':' 'label-elements' :)
            or $state[$p:lk] = 607672                       (: 'string-replace' ':' 'label-elements' :)
            or $state[$p:lk] = 607673                       (: 'try' ':' 'label-elements' :)
            or $state[$p:lk] = 607674                       (: 'unescape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 607675                       (: 'unwrap' ':' 'label-elements' :)
            or $state[$p:lk] = 607676                       (: 'uuid' ':' 'label-elements' :)
            or $state[$p:lk] = 607677                       (: 'validate-with-relax-ng' ':' 'label-elements' :)
            or $state[$p:lk] = 607678                       (: 'validate-with-schematron' ':' 'label-elements' :)
            or $state[$p:lk] = 607679                       (: 'validate-with-xml-schema' ':' 'label-elements' :)
            or $state[$p:lk] = 607680                       (: 'variable' ':' 'label-elements' :)
            or $state[$p:lk] = 607681                       (: 'viewport' ':' 'label-elements' :)
            or $state[$p:lk] = 607682                       (: 'wrap' ':' 'label-elements' :)
            or $state[$p:lk] = 607683                       (: 'wrap-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 607684                       (: 'www-form-urldecode' ':' 'label-elements' :)
            or $state[$p:lk] = 607685                       (: 'www-form-urlencode' ':' 'label-elements' :)
            or $state[$p:lk] = 607686                       (: 'xinclude' ':' 'label-elements' :)
            or $state[$p:lk] = 607687                       (: 'xquery' ':' 'label-elements' :)
            or $state[$p:lk] = 607688                       (: 'xsl-formatter' ':' 'label-elements' :)
            or $state[$p:lk] = 607689                       (: 'xslt' ':' 'label-elements' :)
            or $state[$p:lk] = 624005                       (: NCName^Token ':' 'library' :)
            or $state[$p:lk] = 624014                       (: 'add-attribute' ':' 'library' :)
            or $state[$p:lk] = 624015                       (: 'add-xml-base' ':' 'library' :)
            or $state[$p:lk] = 624017                       (: 'compare' ':' 'library' :)
            or $state[$p:lk] = 624018                       (: 'count' ':' 'library' :)
            or $state[$p:lk] = 624019                       (: 'default' ':' 'library' :)
            or $state[$p:lk] = 624020                       (: 'delete' ':' 'library' :)
            or $state[$p:lk] = 624021                       (: 'directory-list' ':' 'library' :)
            or $state[$p:lk] = 624023                       (: 'else' ':' 'library' :)
            or $state[$p:lk] = 624025                       (: 'error' ':' 'library' :)
            or $state[$p:lk] = 624026                       (: 'escape-markup' ':' 'library' :)
            or $state[$p:lk] = 624027                       (: 'exec' ':' 'library' :)
            or $state[$p:lk] = 624028                       (: 'filter' ':' 'library' :)
            or $state[$p:lk] = 624029                       (: 'for-each' ':' 'library' :)
            or $state[$p:lk] = 624031                       (: 'hash' ':' 'library' :)
            or $state[$p:lk] = 624032                       (: 'http-request' ':' 'library' :)
            or $state[$p:lk] = 624033                       (: 'identity' ':' 'library' :)
            or $state[$p:lk] = 624034                       (: 'if' ':' 'library' :)
            or $state[$p:lk] = 624035                       (: 'insert' ':' 'library' :)
            or $state[$p:lk] = 624037                       (: 'label-elements' ':' 'library' :)
            or $state[$p:lk] = 624038                       (: 'library' ':' 'library' :)
            or $state[$p:lk] = 624039                       (: 'load' ':' 'library' :)
            or $state[$p:lk] = 624040                       (: 'make-absolute-uris' ':' 'library' :)
            or $state[$p:lk] = 624041                       (: 'namespace' ':' 'library' :)
            or $state[$p:lk] = 624042                       (: 'namespace-rename' ':' 'library' :)
            or $state[$p:lk] = 624043                       (: 'pack' ':' 'library' :)
            or $state[$p:lk] = 624044                       (: 'parameters' ':' 'library' :)
            or $state[$p:lk] = 624046                       (: 'pipeline' ':' 'library' :)
            or $state[$p:lk] = 624048                       (: 'rename' ':' 'library' :)
            or $state[$p:lk] = 624049                       (: 'replace' ':' 'library' :)
            or $state[$p:lk] = 624051                       (: 'set-attributes' ':' 'library' :)
            or $state[$p:lk] = 624052                       (: 'sink' ':' 'library' :)
            or $state[$p:lk] = 624053                       (: 'split-sequence' ':' 'library' :)
            or $state[$p:lk] = 624054                       (: 'step' ':' 'library' :)
            or $state[$p:lk] = 624055                       (: 'store' ':' 'library' :)
            or $state[$p:lk] = 624056                       (: 'string-replace' ':' 'library' :)
            or $state[$p:lk] = 624057                       (: 'try' ':' 'library' :)
            or $state[$p:lk] = 624058                       (: 'unescape-markup' ':' 'library' :)
            or $state[$p:lk] = 624059                       (: 'unwrap' ':' 'library' :)
            or $state[$p:lk] = 624060                       (: 'uuid' ':' 'library' :)
            or $state[$p:lk] = 624061                       (: 'validate-with-relax-ng' ':' 'library' :)
            or $state[$p:lk] = 624062                       (: 'validate-with-schematron' ':' 'library' :)
            or $state[$p:lk] = 624063                       (: 'validate-with-xml-schema' ':' 'library' :)
            or $state[$p:lk] = 624064                       (: 'variable' ':' 'library' :)
            or $state[$p:lk] = 624065                       (: 'viewport' ':' 'library' :)
            or $state[$p:lk] = 624066                       (: 'wrap' ':' 'library' :)
            or $state[$p:lk] = 624067                       (: 'wrap-sequence' ':' 'library' :)
            or $state[$p:lk] = 624068                       (: 'www-form-urldecode' ':' 'library' :)
            or $state[$p:lk] = 624069                       (: 'www-form-urlencode' ':' 'library' :)
            or $state[$p:lk] = 624070                       (: 'xinclude' ':' 'library' :)
            or $state[$p:lk] = 624071                       (: 'xquery' ':' 'library' :)
            or $state[$p:lk] = 624072                       (: 'xsl-formatter' ':' 'library' :)
            or $state[$p:lk] = 624073                       (: 'xslt' ':' 'library' :)
            or $state[$p:lk] = 640389                       (: NCName^Token ':' 'load' :)
            or $state[$p:lk] = 640398                       (: 'add-attribute' ':' 'load' :)
            or $state[$p:lk] = 640399                       (: 'add-xml-base' ':' 'load' :)
            or $state[$p:lk] = 640401                       (: 'compare' ':' 'load' :)
            or $state[$p:lk] = 640402                       (: 'count' ':' 'load' :)
            or $state[$p:lk] = 640403                       (: 'default' ':' 'load' :)
            or $state[$p:lk] = 640404                       (: 'delete' ':' 'load' :)
            or $state[$p:lk] = 640405                       (: 'directory-list' ':' 'load' :)
            or $state[$p:lk] = 640407                       (: 'else' ':' 'load' :)
            or $state[$p:lk] = 640409                       (: 'error' ':' 'load' :)
            or $state[$p:lk] = 640410                       (: 'escape-markup' ':' 'load' :)
            or $state[$p:lk] = 640411                       (: 'exec' ':' 'load' :)
            or $state[$p:lk] = 640412                       (: 'filter' ':' 'load' :)
            or $state[$p:lk] = 640413                       (: 'for-each' ':' 'load' :)
            or $state[$p:lk] = 640415                       (: 'hash' ':' 'load' :)
            or $state[$p:lk] = 640416                       (: 'http-request' ':' 'load' :)
            or $state[$p:lk] = 640417                       (: 'identity' ':' 'load' :)
            or $state[$p:lk] = 640418                       (: 'if' ':' 'load' :)
            or $state[$p:lk] = 640419                       (: 'insert' ':' 'load' :)
            or $state[$p:lk] = 640421                       (: 'label-elements' ':' 'load' :)
            or $state[$p:lk] = 640422                       (: 'library' ':' 'load' :)
            or $state[$p:lk] = 640423                       (: 'load' ':' 'load' :)
            or $state[$p:lk] = 640424                       (: 'make-absolute-uris' ':' 'load' :)
            or $state[$p:lk] = 640425                       (: 'namespace' ':' 'load' :)
            or $state[$p:lk] = 640426                       (: 'namespace-rename' ':' 'load' :)
            or $state[$p:lk] = 640427                       (: 'pack' ':' 'load' :)
            or $state[$p:lk] = 640428                       (: 'parameters' ':' 'load' :)
            or $state[$p:lk] = 640430                       (: 'pipeline' ':' 'load' :)
            or $state[$p:lk] = 640432                       (: 'rename' ':' 'load' :)
            or $state[$p:lk] = 640433                       (: 'replace' ':' 'load' :)
            or $state[$p:lk] = 640435                       (: 'set-attributes' ':' 'load' :)
            or $state[$p:lk] = 640436                       (: 'sink' ':' 'load' :)
            or $state[$p:lk] = 640437                       (: 'split-sequence' ':' 'load' :)
            or $state[$p:lk] = 640438                       (: 'step' ':' 'load' :)
            or $state[$p:lk] = 640439                       (: 'store' ':' 'load' :)
            or $state[$p:lk] = 640440                       (: 'string-replace' ':' 'load' :)
            or $state[$p:lk] = 640441                       (: 'try' ':' 'load' :)
            or $state[$p:lk] = 640442                       (: 'unescape-markup' ':' 'load' :)
            or $state[$p:lk] = 640443                       (: 'unwrap' ':' 'load' :)
            or $state[$p:lk] = 640444                       (: 'uuid' ':' 'load' :)
            or $state[$p:lk] = 640445                       (: 'validate-with-relax-ng' ':' 'load' :)
            or $state[$p:lk] = 640446                       (: 'validate-with-schematron' ':' 'load' :)
            or $state[$p:lk] = 640447                       (: 'validate-with-xml-schema' ':' 'load' :)
            or $state[$p:lk] = 640448                       (: 'variable' ':' 'load' :)
            or $state[$p:lk] = 640449                       (: 'viewport' ':' 'load' :)
            or $state[$p:lk] = 640450                       (: 'wrap' ':' 'load' :)
            or $state[$p:lk] = 640451                       (: 'wrap-sequence' ':' 'load' :)
            or $state[$p:lk] = 640452                       (: 'www-form-urldecode' ':' 'load' :)
            or $state[$p:lk] = 640453                       (: 'www-form-urlencode' ':' 'load' :)
            or $state[$p:lk] = 640454                       (: 'xinclude' ':' 'load' :)
            or $state[$p:lk] = 640455                       (: 'xquery' ':' 'load' :)
            or $state[$p:lk] = 640456                       (: 'xsl-formatter' ':' 'load' :)
            or $state[$p:lk] = 640457                       (: 'xslt' ':' 'load' :)
            or $state[$p:lk] = 656773                       (: NCName^Token ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656782                       (: 'add-attribute' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656783                       (: 'add-xml-base' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656785                       (: 'compare' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656786                       (: 'count' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656787                       (: 'default' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656788                       (: 'delete' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656789                       (: 'directory-list' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656791                       (: 'else' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656793                       (: 'error' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656794                       (: 'escape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656795                       (: 'exec' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656796                       (: 'filter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656797                       (: 'for-each' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656799                       (: 'hash' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656800                       (: 'http-request' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656801                       (: 'identity' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656802                       (: 'if' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656803                       (: 'insert' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656805                       (: 'label-elements' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656806                       (: 'library' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656807                       (: 'load' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656808                       (: 'make-absolute-uris' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656809                       (: 'namespace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656810                       (: 'namespace-rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656811                       (: 'pack' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656812                       (: 'parameters' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656814                       (: 'pipeline' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656816                       (: 'rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656817                       (: 'replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656819                       (: 'set-attributes' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656820                       (: 'sink' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656821                       (: 'split-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656822                       (: 'step' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656823                       (: 'store' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656824                       (: 'string-replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656825                       (: 'try' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656826                       (: 'unescape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656827                       (: 'unwrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656828                       (: 'uuid' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656829                       (: 'validate-with-relax-ng' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656830                       (: 'validate-with-schematron' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656831                       (: 'validate-with-xml-schema' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656832                       (: 'variable' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656833                       (: 'viewport' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656834                       (: 'wrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656835                       (: 'wrap-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656836                       (: 'www-form-urldecode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656837                       (: 'www-form-urlencode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656838                       (: 'xinclude' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656839                       (: 'xquery' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656840                       (: 'xsl-formatter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656841                       (: 'xslt' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 673157                       (: NCName^Token ':' 'namespace' :)
            or $state[$p:lk] = 673166                       (: 'add-attribute' ':' 'namespace' :)
            or $state[$p:lk] = 673167                       (: 'add-xml-base' ':' 'namespace' :)
            or $state[$p:lk] = 673169                       (: 'compare' ':' 'namespace' :)
            or $state[$p:lk] = 673170                       (: 'count' ':' 'namespace' :)
            or $state[$p:lk] = 673171                       (: 'default' ':' 'namespace' :)
            or $state[$p:lk] = 673172                       (: 'delete' ':' 'namespace' :)
            or $state[$p:lk] = 673173                       (: 'directory-list' ':' 'namespace' :)
            or $state[$p:lk] = 673175                       (: 'else' ':' 'namespace' :)
            or $state[$p:lk] = 673177                       (: 'error' ':' 'namespace' :)
            or $state[$p:lk] = 673178                       (: 'escape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 673179                       (: 'exec' ':' 'namespace' :)
            or $state[$p:lk] = 673180                       (: 'filter' ':' 'namespace' :)
            or $state[$p:lk] = 673181                       (: 'for-each' ':' 'namespace' :)
            or $state[$p:lk] = 673183                       (: 'hash' ':' 'namespace' :)
            or $state[$p:lk] = 673184                       (: 'http-request' ':' 'namespace' :)
            or $state[$p:lk] = 673185                       (: 'identity' ':' 'namespace' :)
            or $state[$p:lk] = 673186                       (: 'if' ':' 'namespace' :)
            or $state[$p:lk] = 673187                       (: 'insert' ':' 'namespace' :)
            or $state[$p:lk] = 673189                       (: 'label-elements' ':' 'namespace' :)
            or $state[$p:lk] = 673190                       (: 'library' ':' 'namespace' :)
            or $state[$p:lk] = 673191                       (: 'load' ':' 'namespace' :)
            or $state[$p:lk] = 673192                       (: 'make-absolute-uris' ':' 'namespace' :)
            or $state[$p:lk] = 673193                       (: 'namespace' ':' 'namespace' :)
            or $state[$p:lk] = 673194                       (: 'namespace-rename' ':' 'namespace' :)
            or $state[$p:lk] = 673195                       (: 'pack' ':' 'namespace' :)
            or $state[$p:lk] = 673196                       (: 'parameters' ':' 'namespace' :)
            or $state[$p:lk] = 673198                       (: 'pipeline' ':' 'namespace' :)
            or $state[$p:lk] = 673200                       (: 'rename' ':' 'namespace' :)
            or $state[$p:lk] = 673201                       (: 'replace' ':' 'namespace' :)
            or $state[$p:lk] = 673203                       (: 'set-attributes' ':' 'namespace' :)
            or $state[$p:lk] = 673204                       (: 'sink' ':' 'namespace' :)
            or $state[$p:lk] = 673205                       (: 'split-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 673206                       (: 'step' ':' 'namespace' :)
            or $state[$p:lk] = 673207                       (: 'store' ':' 'namespace' :)
            or $state[$p:lk] = 673208                       (: 'string-replace' ':' 'namespace' :)
            or $state[$p:lk] = 673209                       (: 'try' ':' 'namespace' :)
            or $state[$p:lk] = 673210                       (: 'unescape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 673211                       (: 'unwrap' ':' 'namespace' :)
            or $state[$p:lk] = 673212                       (: 'uuid' ':' 'namespace' :)
            or $state[$p:lk] = 673213                       (: 'validate-with-relax-ng' ':' 'namespace' :)
            or $state[$p:lk] = 673214                       (: 'validate-with-schematron' ':' 'namespace' :)
            or $state[$p:lk] = 673215                       (: 'validate-with-xml-schema' ':' 'namespace' :)
            or $state[$p:lk] = 673216                       (: 'variable' ':' 'namespace' :)
            or $state[$p:lk] = 673217                       (: 'viewport' ':' 'namespace' :)
            or $state[$p:lk] = 673218                       (: 'wrap' ':' 'namespace' :)
            or $state[$p:lk] = 673219                       (: 'wrap-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 673220                       (: 'www-form-urldecode' ':' 'namespace' :)
            or $state[$p:lk] = 673221                       (: 'www-form-urlencode' ':' 'namespace' :)
            or $state[$p:lk] = 673222                       (: 'xinclude' ':' 'namespace' :)
            or $state[$p:lk] = 673223                       (: 'xquery' ':' 'namespace' :)
            or $state[$p:lk] = 673224                       (: 'xsl-formatter' ':' 'namespace' :)
            or $state[$p:lk] = 673225                       (: 'xslt' ':' 'namespace' :)
            or $state[$p:lk] = 689541                       (: NCName^Token ':' 'namespace-rename' :)
            or $state[$p:lk] = 689550                       (: 'add-attribute' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689551                       (: 'add-xml-base' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689553                       (: 'compare' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689554                       (: 'count' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689555                       (: 'default' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689556                       (: 'delete' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689557                       (: 'directory-list' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689559                       (: 'else' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689561                       (: 'error' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689562                       (: 'escape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689563                       (: 'exec' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689564                       (: 'filter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689565                       (: 'for-each' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689567                       (: 'hash' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689568                       (: 'http-request' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689569                       (: 'identity' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689570                       (: 'if' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689571                       (: 'insert' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689573                       (: 'label-elements' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689574                       (: 'library' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689575                       (: 'load' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689576                       (: 'make-absolute-uris' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689577                       (: 'namespace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689578                       (: 'namespace-rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689579                       (: 'pack' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689580                       (: 'parameters' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689582                       (: 'pipeline' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689584                       (: 'rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689585                       (: 'replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689587                       (: 'set-attributes' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689588                       (: 'sink' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689589                       (: 'split-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689590                       (: 'step' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689591                       (: 'store' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689592                       (: 'string-replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689593                       (: 'try' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689594                       (: 'unescape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689595                       (: 'unwrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689596                       (: 'uuid' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689597                       (: 'validate-with-relax-ng' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689598                       (: 'validate-with-schematron' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689599                       (: 'validate-with-xml-schema' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689600                       (: 'variable' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689601                       (: 'viewport' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689602                       (: 'wrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689603                       (: 'wrap-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689604                       (: 'www-form-urldecode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689605                       (: 'www-form-urlencode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689606                       (: 'xinclude' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689607                       (: 'xquery' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689608                       (: 'xsl-formatter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689609                       (: 'xslt' ':' 'namespace-rename' :)
            or $state[$p:lk] = 705925                       (: NCName^Token ':' 'pack' :)
            or $state[$p:lk] = 705934                       (: 'add-attribute' ':' 'pack' :)
            or $state[$p:lk] = 705935                       (: 'add-xml-base' ':' 'pack' :)
            or $state[$p:lk] = 705937                       (: 'compare' ':' 'pack' :)
            or $state[$p:lk] = 705938                       (: 'count' ':' 'pack' :)
            or $state[$p:lk] = 705939                       (: 'default' ':' 'pack' :)
            or $state[$p:lk] = 705940                       (: 'delete' ':' 'pack' :)
            or $state[$p:lk] = 705941                       (: 'directory-list' ':' 'pack' :)
            or $state[$p:lk] = 705943                       (: 'else' ':' 'pack' :)
            or $state[$p:lk] = 705945                       (: 'error' ':' 'pack' :)
            or $state[$p:lk] = 705946                       (: 'escape-markup' ':' 'pack' :)
            or $state[$p:lk] = 705947                       (: 'exec' ':' 'pack' :)
            or $state[$p:lk] = 705948                       (: 'filter' ':' 'pack' :)
            or $state[$p:lk] = 705949                       (: 'for-each' ':' 'pack' :)
            or $state[$p:lk] = 705951                       (: 'hash' ':' 'pack' :)
            or $state[$p:lk] = 705952                       (: 'http-request' ':' 'pack' :)
            or $state[$p:lk] = 705953                       (: 'identity' ':' 'pack' :)
            or $state[$p:lk] = 705954                       (: 'if' ':' 'pack' :)
            or $state[$p:lk] = 705955                       (: 'insert' ':' 'pack' :)
            or $state[$p:lk] = 705957                       (: 'label-elements' ':' 'pack' :)
            or $state[$p:lk] = 705958                       (: 'library' ':' 'pack' :)
            or $state[$p:lk] = 705959                       (: 'load' ':' 'pack' :)
            or $state[$p:lk] = 705960                       (: 'make-absolute-uris' ':' 'pack' :)
            or $state[$p:lk] = 705961                       (: 'namespace' ':' 'pack' :)
            or $state[$p:lk] = 705962                       (: 'namespace-rename' ':' 'pack' :)
            or $state[$p:lk] = 705963                       (: 'pack' ':' 'pack' :)
            or $state[$p:lk] = 705964                       (: 'parameters' ':' 'pack' :)
            or $state[$p:lk] = 705966                       (: 'pipeline' ':' 'pack' :)
            or $state[$p:lk] = 705968                       (: 'rename' ':' 'pack' :)
            or $state[$p:lk] = 705969                       (: 'replace' ':' 'pack' :)
            or $state[$p:lk] = 705971                       (: 'set-attributes' ':' 'pack' :)
            or $state[$p:lk] = 705972                       (: 'sink' ':' 'pack' :)
            or $state[$p:lk] = 705973                       (: 'split-sequence' ':' 'pack' :)
            or $state[$p:lk] = 705974                       (: 'step' ':' 'pack' :)
            or $state[$p:lk] = 705975                       (: 'store' ':' 'pack' :)
            or $state[$p:lk] = 705976                       (: 'string-replace' ':' 'pack' :)
            or $state[$p:lk] = 705977                       (: 'try' ':' 'pack' :)
            or $state[$p:lk] = 705978                       (: 'unescape-markup' ':' 'pack' :)
            or $state[$p:lk] = 705979                       (: 'unwrap' ':' 'pack' :)
            or $state[$p:lk] = 705980                       (: 'uuid' ':' 'pack' :)
            or $state[$p:lk] = 705981                       (: 'validate-with-relax-ng' ':' 'pack' :)
            or $state[$p:lk] = 705982                       (: 'validate-with-schematron' ':' 'pack' :)
            or $state[$p:lk] = 705983                       (: 'validate-with-xml-schema' ':' 'pack' :)
            or $state[$p:lk] = 705984                       (: 'variable' ':' 'pack' :)
            or $state[$p:lk] = 705985                       (: 'viewport' ':' 'pack' :)
            or $state[$p:lk] = 705986                       (: 'wrap' ':' 'pack' :)
            or $state[$p:lk] = 705987                       (: 'wrap-sequence' ':' 'pack' :)
            or $state[$p:lk] = 705988                       (: 'www-form-urldecode' ':' 'pack' :)
            or $state[$p:lk] = 705989                       (: 'www-form-urlencode' ':' 'pack' :)
            or $state[$p:lk] = 705990                       (: 'xinclude' ':' 'pack' :)
            or $state[$p:lk] = 705991                       (: 'xquery' ':' 'pack' :)
            or $state[$p:lk] = 705992                       (: 'xsl-formatter' ':' 'pack' :)
            or $state[$p:lk] = 705993                       (: 'xslt' ':' 'pack' :)
            or $state[$p:lk] = 722309                       (: NCName^Token ':' 'parameters' :)
            or $state[$p:lk] = 722318                       (: 'add-attribute' ':' 'parameters' :)
            or $state[$p:lk] = 722319                       (: 'add-xml-base' ':' 'parameters' :)
            or $state[$p:lk] = 722321                       (: 'compare' ':' 'parameters' :)
            or $state[$p:lk] = 722322                       (: 'count' ':' 'parameters' :)
            or $state[$p:lk] = 722323                       (: 'default' ':' 'parameters' :)
            or $state[$p:lk] = 722324                       (: 'delete' ':' 'parameters' :)
            or $state[$p:lk] = 722325                       (: 'directory-list' ':' 'parameters' :)
            or $state[$p:lk] = 722327                       (: 'else' ':' 'parameters' :)
            or $state[$p:lk] = 722329                       (: 'error' ':' 'parameters' :)
            or $state[$p:lk] = 722330                       (: 'escape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 722331                       (: 'exec' ':' 'parameters' :)
            or $state[$p:lk] = 722332                       (: 'filter' ':' 'parameters' :)
            or $state[$p:lk] = 722333                       (: 'for-each' ':' 'parameters' :)
            or $state[$p:lk] = 722335                       (: 'hash' ':' 'parameters' :)
            or $state[$p:lk] = 722336                       (: 'http-request' ':' 'parameters' :)
            or $state[$p:lk] = 722337                       (: 'identity' ':' 'parameters' :)
            or $state[$p:lk] = 722338                       (: 'if' ':' 'parameters' :)
            or $state[$p:lk] = 722339                       (: 'insert' ':' 'parameters' :)
            or $state[$p:lk] = 722341                       (: 'label-elements' ':' 'parameters' :)
            or $state[$p:lk] = 722342                       (: 'library' ':' 'parameters' :)
            or $state[$p:lk] = 722343                       (: 'load' ':' 'parameters' :)
            or $state[$p:lk] = 722344                       (: 'make-absolute-uris' ':' 'parameters' :)
            or $state[$p:lk] = 722345                       (: 'namespace' ':' 'parameters' :)
            or $state[$p:lk] = 722346                       (: 'namespace-rename' ':' 'parameters' :)
            or $state[$p:lk] = 722347                       (: 'pack' ':' 'parameters' :)
            or $state[$p:lk] = 722348                       (: 'parameters' ':' 'parameters' :)
            or $state[$p:lk] = 722350                       (: 'pipeline' ':' 'parameters' :)
            or $state[$p:lk] = 722352                       (: 'rename' ':' 'parameters' :)
            or $state[$p:lk] = 722353                       (: 'replace' ':' 'parameters' :)
            or $state[$p:lk] = 722355                       (: 'set-attributes' ':' 'parameters' :)
            or $state[$p:lk] = 722356                       (: 'sink' ':' 'parameters' :)
            or $state[$p:lk] = 722357                       (: 'split-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 722358                       (: 'step' ':' 'parameters' :)
            or $state[$p:lk] = 722359                       (: 'store' ':' 'parameters' :)
            or $state[$p:lk] = 722360                       (: 'string-replace' ':' 'parameters' :)
            or $state[$p:lk] = 722361                       (: 'try' ':' 'parameters' :)
            or $state[$p:lk] = 722362                       (: 'unescape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 722363                       (: 'unwrap' ':' 'parameters' :)
            or $state[$p:lk] = 722364                       (: 'uuid' ':' 'parameters' :)
            or $state[$p:lk] = 722365                       (: 'validate-with-relax-ng' ':' 'parameters' :)
            or $state[$p:lk] = 722366                       (: 'validate-with-schematron' ':' 'parameters' :)
            or $state[$p:lk] = 722367                       (: 'validate-with-xml-schema' ':' 'parameters' :)
            or $state[$p:lk] = 722368                       (: 'variable' ':' 'parameters' :)
            or $state[$p:lk] = 722369                       (: 'viewport' ':' 'parameters' :)
            or $state[$p:lk] = 722370                       (: 'wrap' ':' 'parameters' :)
            or $state[$p:lk] = 722371                       (: 'wrap-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 722372                       (: 'www-form-urldecode' ':' 'parameters' :)
            or $state[$p:lk] = 722373                       (: 'www-form-urlencode' ':' 'parameters' :)
            or $state[$p:lk] = 722374                       (: 'xinclude' ':' 'parameters' :)
            or $state[$p:lk] = 722375                       (: 'xquery' ':' 'parameters' :)
            or $state[$p:lk] = 722376                       (: 'xsl-formatter' ':' 'parameters' :)
            or $state[$p:lk] = 722377                       (: 'xslt' ':' 'parameters' :)
            or $state[$p:lk] = 755077                       (: NCName^Token ':' 'pipeline' :)
            or $state[$p:lk] = 755086                       (: 'add-attribute' ':' 'pipeline' :)
            or $state[$p:lk] = 755087                       (: 'add-xml-base' ':' 'pipeline' :)
            or $state[$p:lk] = 755089                       (: 'compare' ':' 'pipeline' :)
            or $state[$p:lk] = 755090                       (: 'count' ':' 'pipeline' :)
            or $state[$p:lk] = 755091                       (: 'default' ':' 'pipeline' :)
            or $state[$p:lk] = 755092                       (: 'delete' ':' 'pipeline' :)
            or $state[$p:lk] = 755093                       (: 'directory-list' ':' 'pipeline' :)
            or $state[$p:lk] = 755095                       (: 'else' ':' 'pipeline' :)
            or $state[$p:lk] = 755097                       (: 'error' ':' 'pipeline' :)
            or $state[$p:lk] = 755098                       (: 'escape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 755099                       (: 'exec' ':' 'pipeline' :)
            or $state[$p:lk] = 755100                       (: 'filter' ':' 'pipeline' :)
            or $state[$p:lk] = 755101                       (: 'for-each' ':' 'pipeline' :)
            or $state[$p:lk] = 755103                       (: 'hash' ':' 'pipeline' :)
            or $state[$p:lk] = 755104                       (: 'http-request' ':' 'pipeline' :)
            or $state[$p:lk] = 755105                       (: 'identity' ':' 'pipeline' :)
            or $state[$p:lk] = 755106                       (: 'if' ':' 'pipeline' :)
            or $state[$p:lk] = 755107                       (: 'insert' ':' 'pipeline' :)
            or $state[$p:lk] = 755109                       (: 'label-elements' ':' 'pipeline' :)
            or $state[$p:lk] = 755110                       (: 'library' ':' 'pipeline' :)
            or $state[$p:lk] = 755111                       (: 'load' ':' 'pipeline' :)
            or $state[$p:lk] = 755112                       (: 'make-absolute-uris' ':' 'pipeline' :)
            or $state[$p:lk] = 755113                       (: 'namespace' ':' 'pipeline' :)
            or $state[$p:lk] = 755114                       (: 'namespace-rename' ':' 'pipeline' :)
            or $state[$p:lk] = 755115                       (: 'pack' ':' 'pipeline' :)
            or $state[$p:lk] = 755116                       (: 'parameters' ':' 'pipeline' :)
            or $state[$p:lk] = 755118                       (: 'pipeline' ':' 'pipeline' :)
            or $state[$p:lk] = 755120                       (: 'rename' ':' 'pipeline' :)
            or $state[$p:lk] = 755121                       (: 'replace' ':' 'pipeline' :)
            or $state[$p:lk] = 755123                       (: 'set-attributes' ':' 'pipeline' :)
            or $state[$p:lk] = 755124                       (: 'sink' ':' 'pipeline' :)
            or $state[$p:lk] = 755125                       (: 'split-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 755126                       (: 'step' ':' 'pipeline' :)
            or $state[$p:lk] = 755127                       (: 'store' ':' 'pipeline' :)
            or $state[$p:lk] = 755128                       (: 'string-replace' ':' 'pipeline' :)
            or $state[$p:lk] = 755129                       (: 'try' ':' 'pipeline' :)
            or $state[$p:lk] = 755130                       (: 'unescape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 755131                       (: 'unwrap' ':' 'pipeline' :)
            or $state[$p:lk] = 755132                       (: 'uuid' ':' 'pipeline' :)
            or $state[$p:lk] = 755133                       (: 'validate-with-relax-ng' ':' 'pipeline' :)
            or $state[$p:lk] = 755134                       (: 'validate-with-schematron' ':' 'pipeline' :)
            or $state[$p:lk] = 755135                       (: 'validate-with-xml-schema' ':' 'pipeline' :)
            or $state[$p:lk] = 755136                       (: 'variable' ':' 'pipeline' :)
            or $state[$p:lk] = 755137                       (: 'viewport' ':' 'pipeline' :)
            or $state[$p:lk] = 755138                       (: 'wrap' ':' 'pipeline' :)
            or $state[$p:lk] = 755139                       (: 'wrap-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 755140                       (: 'www-form-urldecode' ':' 'pipeline' :)
            or $state[$p:lk] = 755141                       (: 'www-form-urlencode' ':' 'pipeline' :)
            or $state[$p:lk] = 755142                       (: 'xinclude' ':' 'pipeline' :)
            or $state[$p:lk] = 755143                       (: 'xquery' ':' 'pipeline' :)
            or $state[$p:lk] = 755144                       (: 'xsl-formatter' ':' 'pipeline' :)
            or $state[$p:lk] = 755145                       (: 'xslt' ':' 'pipeline' :)
            or $state[$p:lk] = 787845                       (: NCName^Token ':' 'rename' :)
            or $state[$p:lk] = 787854                       (: 'add-attribute' ':' 'rename' :)
            or $state[$p:lk] = 787855                       (: 'add-xml-base' ':' 'rename' :)
            or $state[$p:lk] = 787857                       (: 'compare' ':' 'rename' :)
            or $state[$p:lk] = 787858                       (: 'count' ':' 'rename' :)
            or $state[$p:lk] = 787859                       (: 'default' ':' 'rename' :)
            or $state[$p:lk] = 787860                       (: 'delete' ':' 'rename' :)
            or $state[$p:lk] = 787861                       (: 'directory-list' ':' 'rename' :)
            or $state[$p:lk] = 787863                       (: 'else' ':' 'rename' :)
            or $state[$p:lk] = 787865                       (: 'error' ':' 'rename' :)
            or $state[$p:lk] = 787866                       (: 'escape-markup' ':' 'rename' :)
            or $state[$p:lk] = 787867                       (: 'exec' ':' 'rename' :)
            or $state[$p:lk] = 787868                       (: 'filter' ':' 'rename' :)
            or $state[$p:lk] = 787869                       (: 'for-each' ':' 'rename' :)
            or $state[$p:lk] = 787871                       (: 'hash' ':' 'rename' :)
            or $state[$p:lk] = 787872                       (: 'http-request' ':' 'rename' :)
            or $state[$p:lk] = 787873                       (: 'identity' ':' 'rename' :)
            or $state[$p:lk] = 787874                       (: 'if' ':' 'rename' :)
            or $state[$p:lk] = 787875                       (: 'insert' ':' 'rename' :)
            or $state[$p:lk] = 787877                       (: 'label-elements' ':' 'rename' :)
            or $state[$p:lk] = 787878                       (: 'library' ':' 'rename' :)
            or $state[$p:lk] = 787879                       (: 'load' ':' 'rename' :)
            or $state[$p:lk] = 787880                       (: 'make-absolute-uris' ':' 'rename' :)
            or $state[$p:lk] = 787881                       (: 'namespace' ':' 'rename' :)
            or $state[$p:lk] = 787882                       (: 'namespace-rename' ':' 'rename' :)
            or $state[$p:lk] = 787883                       (: 'pack' ':' 'rename' :)
            or $state[$p:lk] = 787884                       (: 'parameters' ':' 'rename' :)
            or $state[$p:lk] = 787886                       (: 'pipeline' ':' 'rename' :)
            or $state[$p:lk] = 787888                       (: 'rename' ':' 'rename' :)
            or $state[$p:lk] = 787889                       (: 'replace' ':' 'rename' :)
            or $state[$p:lk] = 787891                       (: 'set-attributes' ':' 'rename' :)
            or $state[$p:lk] = 787892                       (: 'sink' ':' 'rename' :)
            or $state[$p:lk] = 787893                       (: 'split-sequence' ':' 'rename' :)
            or $state[$p:lk] = 787894                       (: 'step' ':' 'rename' :)
            or $state[$p:lk] = 787895                       (: 'store' ':' 'rename' :)
            or $state[$p:lk] = 787896                       (: 'string-replace' ':' 'rename' :)
            or $state[$p:lk] = 787897                       (: 'try' ':' 'rename' :)
            or $state[$p:lk] = 787898                       (: 'unescape-markup' ':' 'rename' :)
            or $state[$p:lk] = 787899                       (: 'unwrap' ':' 'rename' :)
            or $state[$p:lk] = 787900                       (: 'uuid' ':' 'rename' :)
            or $state[$p:lk] = 787901                       (: 'validate-with-relax-ng' ':' 'rename' :)
            or $state[$p:lk] = 787902                       (: 'validate-with-schematron' ':' 'rename' :)
            or $state[$p:lk] = 787903                       (: 'validate-with-xml-schema' ':' 'rename' :)
            or $state[$p:lk] = 787904                       (: 'variable' ':' 'rename' :)
            or $state[$p:lk] = 787905                       (: 'viewport' ':' 'rename' :)
            or $state[$p:lk] = 787906                       (: 'wrap' ':' 'rename' :)
            or $state[$p:lk] = 787907                       (: 'wrap-sequence' ':' 'rename' :)
            or $state[$p:lk] = 787908                       (: 'www-form-urldecode' ':' 'rename' :)
            or $state[$p:lk] = 787909                       (: 'www-form-urlencode' ':' 'rename' :)
            or $state[$p:lk] = 787910                       (: 'xinclude' ':' 'rename' :)
            or $state[$p:lk] = 787911                       (: 'xquery' ':' 'rename' :)
            or $state[$p:lk] = 787912                       (: 'xsl-formatter' ':' 'rename' :)
            or $state[$p:lk] = 787913                       (: 'xslt' ':' 'rename' :)
            or $state[$p:lk] = 804229                       (: NCName^Token ':' 'replace' :)
            or $state[$p:lk] = 804238                       (: 'add-attribute' ':' 'replace' :)
            or $state[$p:lk] = 804239                       (: 'add-xml-base' ':' 'replace' :)
            or $state[$p:lk] = 804241                       (: 'compare' ':' 'replace' :)
            or $state[$p:lk] = 804242                       (: 'count' ':' 'replace' :)
            or $state[$p:lk] = 804243                       (: 'default' ':' 'replace' :)
            or $state[$p:lk] = 804244                       (: 'delete' ':' 'replace' :)
            or $state[$p:lk] = 804245                       (: 'directory-list' ':' 'replace' :)
            or $state[$p:lk] = 804247                       (: 'else' ':' 'replace' :)
            or $state[$p:lk] = 804249                       (: 'error' ':' 'replace' :)
            or $state[$p:lk] = 804250                       (: 'escape-markup' ':' 'replace' :)
            or $state[$p:lk] = 804251                       (: 'exec' ':' 'replace' :)
            or $state[$p:lk] = 804252                       (: 'filter' ':' 'replace' :)
            or $state[$p:lk] = 804253                       (: 'for-each' ':' 'replace' :)
            or $state[$p:lk] = 804255                       (: 'hash' ':' 'replace' :)
            or $state[$p:lk] = 804256                       (: 'http-request' ':' 'replace' :)
            or $state[$p:lk] = 804257                       (: 'identity' ':' 'replace' :)
            or $state[$p:lk] = 804258                       (: 'if' ':' 'replace' :)
            or $state[$p:lk] = 804259                       (: 'insert' ':' 'replace' :)
            or $state[$p:lk] = 804261                       (: 'label-elements' ':' 'replace' :)
            or $state[$p:lk] = 804262                       (: 'library' ':' 'replace' :)
            or $state[$p:lk] = 804263                       (: 'load' ':' 'replace' :)
            or $state[$p:lk] = 804264                       (: 'make-absolute-uris' ':' 'replace' :)
            or $state[$p:lk] = 804265                       (: 'namespace' ':' 'replace' :)
            or $state[$p:lk] = 804266                       (: 'namespace-rename' ':' 'replace' :)
            or $state[$p:lk] = 804267                       (: 'pack' ':' 'replace' :)
            or $state[$p:lk] = 804268                       (: 'parameters' ':' 'replace' :)
            or $state[$p:lk] = 804270                       (: 'pipeline' ':' 'replace' :)
            or $state[$p:lk] = 804272                       (: 'rename' ':' 'replace' :)
            or $state[$p:lk] = 804273                       (: 'replace' ':' 'replace' :)
            or $state[$p:lk] = 804275                       (: 'set-attributes' ':' 'replace' :)
            or $state[$p:lk] = 804276                       (: 'sink' ':' 'replace' :)
            or $state[$p:lk] = 804277                       (: 'split-sequence' ':' 'replace' :)
            or $state[$p:lk] = 804278                       (: 'step' ':' 'replace' :)
            or $state[$p:lk] = 804279                       (: 'store' ':' 'replace' :)
            or $state[$p:lk] = 804280                       (: 'string-replace' ':' 'replace' :)
            or $state[$p:lk] = 804281                       (: 'try' ':' 'replace' :)
            or $state[$p:lk] = 804282                       (: 'unescape-markup' ':' 'replace' :)
            or $state[$p:lk] = 804283                       (: 'unwrap' ':' 'replace' :)
            or $state[$p:lk] = 804284                       (: 'uuid' ':' 'replace' :)
            or $state[$p:lk] = 804285                       (: 'validate-with-relax-ng' ':' 'replace' :)
            or $state[$p:lk] = 804286                       (: 'validate-with-schematron' ':' 'replace' :)
            or $state[$p:lk] = 804287                       (: 'validate-with-xml-schema' ':' 'replace' :)
            or $state[$p:lk] = 804288                       (: 'variable' ':' 'replace' :)
            or $state[$p:lk] = 804289                       (: 'viewport' ':' 'replace' :)
            or $state[$p:lk] = 804290                       (: 'wrap' ':' 'replace' :)
            or $state[$p:lk] = 804291                       (: 'wrap-sequence' ':' 'replace' :)
            or $state[$p:lk] = 804292                       (: 'www-form-urldecode' ':' 'replace' :)
            or $state[$p:lk] = 804293                       (: 'www-form-urlencode' ':' 'replace' :)
            or $state[$p:lk] = 804294                       (: 'xinclude' ':' 'replace' :)
            or $state[$p:lk] = 804295                       (: 'xquery' ':' 'replace' :)
            or $state[$p:lk] = 804296                       (: 'xsl-formatter' ':' 'replace' :)
            or $state[$p:lk] = 804297                       (: 'xslt' ':' 'replace' :)
            or $state[$p:lk] = 836997                       (: NCName^Token ':' 'set-attributes' :)
            or $state[$p:lk] = 837006                       (: 'add-attribute' ':' 'set-attributes' :)
            or $state[$p:lk] = 837007                       (: 'add-xml-base' ':' 'set-attributes' :)
            or $state[$p:lk] = 837009                       (: 'compare' ':' 'set-attributes' :)
            or $state[$p:lk] = 837010                       (: 'count' ':' 'set-attributes' :)
            or $state[$p:lk] = 837011                       (: 'default' ':' 'set-attributes' :)
            or $state[$p:lk] = 837012                       (: 'delete' ':' 'set-attributes' :)
            or $state[$p:lk] = 837013                       (: 'directory-list' ':' 'set-attributes' :)
            or $state[$p:lk] = 837015                       (: 'else' ':' 'set-attributes' :)
            or $state[$p:lk] = 837017                       (: 'error' ':' 'set-attributes' :)
            or $state[$p:lk] = 837018                       (: 'escape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 837019                       (: 'exec' ':' 'set-attributes' :)
            or $state[$p:lk] = 837020                       (: 'filter' ':' 'set-attributes' :)
            or $state[$p:lk] = 837021                       (: 'for-each' ':' 'set-attributes' :)
            or $state[$p:lk] = 837023                       (: 'hash' ':' 'set-attributes' :)
            or $state[$p:lk] = 837024                       (: 'http-request' ':' 'set-attributes' :)
            or $state[$p:lk] = 837025                       (: 'identity' ':' 'set-attributes' :)
            or $state[$p:lk] = 837026                       (: 'if' ':' 'set-attributes' :)
            or $state[$p:lk] = 837027                       (: 'insert' ':' 'set-attributes' :)
            or $state[$p:lk] = 837029                       (: 'label-elements' ':' 'set-attributes' :)
            or $state[$p:lk] = 837030                       (: 'library' ':' 'set-attributes' :)
            or $state[$p:lk] = 837031                       (: 'load' ':' 'set-attributes' :)
            or $state[$p:lk] = 837032                       (: 'make-absolute-uris' ':' 'set-attributes' :)
            or $state[$p:lk] = 837033                       (: 'namespace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837034                       (: 'namespace-rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 837035                       (: 'pack' ':' 'set-attributes' :)
            or $state[$p:lk] = 837036                       (: 'parameters' ':' 'set-attributes' :)
            or $state[$p:lk] = 837038                       (: 'pipeline' ':' 'set-attributes' :)
            or $state[$p:lk] = 837040                       (: 'rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 837041                       (: 'replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837043                       (: 'set-attributes' ':' 'set-attributes' :)
            or $state[$p:lk] = 837044                       (: 'sink' ':' 'set-attributes' :)
            or $state[$p:lk] = 837045                       (: 'split-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 837046                       (: 'step' ':' 'set-attributes' :)
            or $state[$p:lk] = 837047                       (: 'store' ':' 'set-attributes' :)
            or $state[$p:lk] = 837048                       (: 'string-replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837049                       (: 'try' ':' 'set-attributes' :)
            or $state[$p:lk] = 837050                       (: 'unescape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 837051                       (: 'unwrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 837052                       (: 'uuid' ':' 'set-attributes' :)
            or $state[$p:lk] = 837053                       (: 'validate-with-relax-ng' ':' 'set-attributes' :)
            or $state[$p:lk] = 837054                       (: 'validate-with-schematron' ':' 'set-attributes' :)
            or $state[$p:lk] = 837055                       (: 'validate-with-xml-schema' ':' 'set-attributes' :)
            or $state[$p:lk] = 837056                       (: 'variable' ':' 'set-attributes' :)
            or $state[$p:lk] = 837057                       (: 'viewport' ':' 'set-attributes' :)
            or $state[$p:lk] = 837058                       (: 'wrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 837059                       (: 'wrap-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 837060                       (: 'www-form-urldecode' ':' 'set-attributes' :)
            or $state[$p:lk] = 837061                       (: 'www-form-urlencode' ':' 'set-attributes' :)
            or $state[$p:lk] = 837062                       (: 'xinclude' ':' 'set-attributes' :)
            or $state[$p:lk] = 837063                       (: 'xquery' ':' 'set-attributes' :)
            or $state[$p:lk] = 837064                       (: 'xsl-formatter' ':' 'set-attributes' :)
            or $state[$p:lk] = 837065                       (: 'xslt' ':' 'set-attributes' :)
            or $state[$p:lk] = 853381                       (: NCName^Token ':' 'sink' :)
            or $state[$p:lk] = 853390                       (: 'add-attribute' ':' 'sink' :)
            or $state[$p:lk] = 853391                       (: 'add-xml-base' ':' 'sink' :)
            or $state[$p:lk] = 853393                       (: 'compare' ':' 'sink' :)
            or $state[$p:lk] = 853394                       (: 'count' ':' 'sink' :)
            or $state[$p:lk] = 853395                       (: 'default' ':' 'sink' :)
            or $state[$p:lk] = 853396                       (: 'delete' ':' 'sink' :)
            or $state[$p:lk] = 853397                       (: 'directory-list' ':' 'sink' :)
            or $state[$p:lk] = 853399                       (: 'else' ':' 'sink' :)
            or $state[$p:lk] = 853401                       (: 'error' ':' 'sink' :)
            or $state[$p:lk] = 853402                       (: 'escape-markup' ':' 'sink' :)
            or $state[$p:lk] = 853403                       (: 'exec' ':' 'sink' :)
            or $state[$p:lk] = 853404                       (: 'filter' ':' 'sink' :)
            or $state[$p:lk] = 853405                       (: 'for-each' ':' 'sink' :)
            or $state[$p:lk] = 853407                       (: 'hash' ':' 'sink' :)
            or $state[$p:lk] = 853408                       (: 'http-request' ':' 'sink' :)
            or $state[$p:lk] = 853409                       (: 'identity' ':' 'sink' :)
            or $state[$p:lk] = 853410                       (: 'if' ':' 'sink' :)
            or $state[$p:lk] = 853411                       (: 'insert' ':' 'sink' :)
            or $state[$p:lk] = 853413                       (: 'label-elements' ':' 'sink' :)
            or $state[$p:lk] = 853414                       (: 'library' ':' 'sink' :)
            or $state[$p:lk] = 853415                       (: 'load' ':' 'sink' :)
            or $state[$p:lk] = 853416                       (: 'make-absolute-uris' ':' 'sink' :)
            or $state[$p:lk] = 853417                       (: 'namespace' ':' 'sink' :)
            or $state[$p:lk] = 853418                       (: 'namespace-rename' ':' 'sink' :)
            or $state[$p:lk] = 853419                       (: 'pack' ':' 'sink' :)
            or $state[$p:lk] = 853420                       (: 'parameters' ':' 'sink' :)
            or $state[$p:lk] = 853422                       (: 'pipeline' ':' 'sink' :)
            or $state[$p:lk] = 853424                       (: 'rename' ':' 'sink' :)
            or $state[$p:lk] = 853425                       (: 'replace' ':' 'sink' :)
            or $state[$p:lk] = 853427                       (: 'set-attributes' ':' 'sink' :)
            or $state[$p:lk] = 853428                       (: 'sink' ':' 'sink' :)
            or $state[$p:lk] = 853429                       (: 'split-sequence' ':' 'sink' :)
            or $state[$p:lk] = 853430                       (: 'step' ':' 'sink' :)
            or $state[$p:lk] = 853431                       (: 'store' ':' 'sink' :)
            or $state[$p:lk] = 853432                       (: 'string-replace' ':' 'sink' :)
            or $state[$p:lk] = 853433                       (: 'try' ':' 'sink' :)
            or $state[$p:lk] = 853434                       (: 'unescape-markup' ':' 'sink' :)
            or $state[$p:lk] = 853435                       (: 'unwrap' ':' 'sink' :)
            or $state[$p:lk] = 853436                       (: 'uuid' ':' 'sink' :)
            or $state[$p:lk] = 853437                       (: 'validate-with-relax-ng' ':' 'sink' :)
            or $state[$p:lk] = 853438                       (: 'validate-with-schematron' ':' 'sink' :)
            or $state[$p:lk] = 853439                       (: 'validate-with-xml-schema' ':' 'sink' :)
            or $state[$p:lk] = 853440                       (: 'variable' ':' 'sink' :)
            or $state[$p:lk] = 853441                       (: 'viewport' ':' 'sink' :)
            or $state[$p:lk] = 853442                       (: 'wrap' ':' 'sink' :)
            or $state[$p:lk] = 853443                       (: 'wrap-sequence' ':' 'sink' :)
            or $state[$p:lk] = 853444                       (: 'www-form-urldecode' ':' 'sink' :)
            or $state[$p:lk] = 853445                       (: 'www-form-urlencode' ':' 'sink' :)
            or $state[$p:lk] = 853446                       (: 'xinclude' ':' 'sink' :)
            or $state[$p:lk] = 853447                       (: 'xquery' ':' 'sink' :)
            or $state[$p:lk] = 853448                       (: 'xsl-formatter' ':' 'sink' :)
            or $state[$p:lk] = 853449                       (: 'xslt' ':' 'sink' :)
            or $state[$p:lk] = 869765                       (: NCName^Token ':' 'split-sequence' :)
            or $state[$p:lk] = 869774                       (: 'add-attribute' ':' 'split-sequence' :)
            or $state[$p:lk] = 869775                       (: 'add-xml-base' ':' 'split-sequence' :)
            or $state[$p:lk] = 869777                       (: 'compare' ':' 'split-sequence' :)
            or $state[$p:lk] = 869778                       (: 'count' ':' 'split-sequence' :)
            or $state[$p:lk] = 869779                       (: 'default' ':' 'split-sequence' :)
            or $state[$p:lk] = 869780                       (: 'delete' ':' 'split-sequence' :)
            or $state[$p:lk] = 869781                       (: 'directory-list' ':' 'split-sequence' :)
            or $state[$p:lk] = 869783                       (: 'else' ':' 'split-sequence' :)
            or $state[$p:lk] = 869785                       (: 'error' ':' 'split-sequence' :)
            or $state[$p:lk] = 869786                       (: 'escape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 869787                       (: 'exec' ':' 'split-sequence' :)
            or $state[$p:lk] = 869788                       (: 'filter' ':' 'split-sequence' :)
            or $state[$p:lk] = 869789                       (: 'for-each' ':' 'split-sequence' :)
            or $state[$p:lk] = 869791                       (: 'hash' ':' 'split-sequence' :)
            or $state[$p:lk] = 869792                       (: 'http-request' ':' 'split-sequence' :)
            or $state[$p:lk] = 869793                       (: 'identity' ':' 'split-sequence' :)
            or $state[$p:lk] = 869794                       (: 'if' ':' 'split-sequence' :)
            or $state[$p:lk] = 869795                       (: 'insert' ':' 'split-sequence' :)
            or $state[$p:lk] = 869797                       (: 'label-elements' ':' 'split-sequence' :)
            or $state[$p:lk] = 869798                       (: 'library' ':' 'split-sequence' :)
            or $state[$p:lk] = 869799                       (: 'load' ':' 'split-sequence' :)
            or $state[$p:lk] = 869800                       (: 'make-absolute-uris' ':' 'split-sequence' :)
            or $state[$p:lk] = 869801                       (: 'namespace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869802                       (: 'namespace-rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 869803                       (: 'pack' ':' 'split-sequence' :)
            or $state[$p:lk] = 869804                       (: 'parameters' ':' 'split-sequence' :)
            or $state[$p:lk] = 869806                       (: 'pipeline' ':' 'split-sequence' :)
            or $state[$p:lk] = 869808                       (: 'rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 869809                       (: 'replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869811                       (: 'set-attributes' ':' 'split-sequence' :)
            or $state[$p:lk] = 869812                       (: 'sink' ':' 'split-sequence' :)
            or $state[$p:lk] = 869813                       (: 'split-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 869814                       (: 'step' ':' 'split-sequence' :)
            or $state[$p:lk] = 869815                       (: 'store' ':' 'split-sequence' :)
            or $state[$p:lk] = 869816                       (: 'string-replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869817                       (: 'try' ':' 'split-sequence' :)
            or $state[$p:lk] = 869818                       (: 'unescape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 869819                       (: 'unwrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 869820                       (: 'uuid' ':' 'split-sequence' :)
            or $state[$p:lk] = 869821                       (: 'validate-with-relax-ng' ':' 'split-sequence' :)
            or $state[$p:lk] = 869822                       (: 'validate-with-schematron' ':' 'split-sequence' :)
            or $state[$p:lk] = 869823                       (: 'validate-with-xml-schema' ':' 'split-sequence' :)
            or $state[$p:lk] = 869824                       (: 'variable' ':' 'split-sequence' :)
            or $state[$p:lk] = 869825                       (: 'viewport' ':' 'split-sequence' :)
            or $state[$p:lk] = 869826                       (: 'wrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 869827                       (: 'wrap-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 869828                       (: 'www-form-urldecode' ':' 'split-sequence' :)
            or $state[$p:lk] = 869829                       (: 'www-form-urlencode' ':' 'split-sequence' :)
            or $state[$p:lk] = 869830                       (: 'xinclude' ':' 'split-sequence' :)
            or $state[$p:lk] = 869831                       (: 'xquery' ':' 'split-sequence' :)
            or $state[$p:lk] = 869832                       (: 'xsl-formatter' ':' 'split-sequence' :)
            or $state[$p:lk] = 869833                       (: 'xslt' ':' 'split-sequence' :)
            or $state[$p:lk] = 886149                       (: NCName^Token ':' 'step' :)
            or $state[$p:lk] = 886158                       (: 'add-attribute' ':' 'step' :)
            or $state[$p:lk] = 886159                       (: 'add-xml-base' ':' 'step' :)
            or $state[$p:lk] = 886161                       (: 'compare' ':' 'step' :)
            or $state[$p:lk] = 886162                       (: 'count' ':' 'step' :)
            or $state[$p:lk] = 886163                       (: 'default' ':' 'step' :)
            or $state[$p:lk] = 886164                       (: 'delete' ':' 'step' :)
            or $state[$p:lk] = 886165                       (: 'directory-list' ':' 'step' :)
            or $state[$p:lk] = 886167                       (: 'else' ':' 'step' :)
            or $state[$p:lk] = 886169                       (: 'error' ':' 'step' :)
            or $state[$p:lk] = 886170                       (: 'escape-markup' ':' 'step' :)
            or $state[$p:lk] = 886171                       (: 'exec' ':' 'step' :)
            or $state[$p:lk] = 886172                       (: 'filter' ':' 'step' :)
            or $state[$p:lk] = 886173                       (: 'for-each' ':' 'step' :)
            or $state[$p:lk] = 886175                       (: 'hash' ':' 'step' :)
            or $state[$p:lk] = 886176                       (: 'http-request' ':' 'step' :)
            or $state[$p:lk] = 886177                       (: 'identity' ':' 'step' :)
            or $state[$p:lk] = 886178                       (: 'if' ':' 'step' :)
            or $state[$p:lk] = 886179                       (: 'insert' ':' 'step' :)
            or $state[$p:lk] = 886181                       (: 'label-elements' ':' 'step' :)
            or $state[$p:lk] = 886182                       (: 'library' ':' 'step' :)
            or $state[$p:lk] = 886183                       (: 'load' ':' 'step' :)
            or $state[$p:lk] = 886184                       (: 'make-absolute-uris' ':' 'step' :)
            or $state[$p:lk] = 886185                       (: 'namespace' ':' 'step' :)
            or $state[$p:lk] = 886186                       (: 'namespace-rename' ':' 'step' :)
            or $state[$p:lk] = 886187                       (: 'pack' ':' 'step' :)
            or $state[$p:lk] = 886188                       (: 'parameters' ':' 'step' :)
            or $state[$p:lk] = 886190                       (: 'pipeline' ':' 'step' :)
            or $state[$p:lk] = 886192                       (: 'rename' ':' 'step' :)
            or $state[$p:lk] = 886193                       (: 'replace' ':' 'step' :)
            or $state[$p:lk] = 886195                       (: 'set-attributes' ':' 'step' :)
            or $state[$p:lk] = 886196                       (: 'sink' ':' 'step' :)
            or $state[$p:lk] = 886197                       (: 'split-sequence' ':' 'step' :)
            or $state[$p:lk] = 886198                       (: 'step' ':' 'step' :)
            or $state[$p:lk] = 886199                       (: 'store' ':' 'step' :)
            or $state[$p:lk] = 886200                       (: 'string-replace' ':' 'step' :)
            or $state[$p:lk] = 886201                       (: 'try' ':' 'step' :)
            or $state[$p:lk] = 886202                       (: 'unescape-markup' ':' 'step' :)
            or $state[$p:lk] = 886203                       (: 'unwrap' ':' 'step' :)
            or $state[$p:lk] = 886204                       (: 'uuid' ':' 'step' :)
            or $state[$p:lk] = 886205                       (: 'validate-with-relax-ng' ':' 'step' :)
            or $state[$p:lk] = 886206                       (: 'validate-with-schematron' ':' 'step' :)
            or $state[$p:lk] = 886207                       (: 'validate-with-xml-schema' ':' 'step' :)
            or $state[$p:lk] = 886208                       (: 'variable' ':' 'step' :)
            or $state[$p:lk] = 886209                       (: 'viewport' ':' 'step' :)
            or $state[$p:lk] = 886210                       (: 'wrap' ':' 'step' :)
            or $state[$p:lk] = 886211                       (: 'wrap-sequence' ':' 'step' :)
            or $state[$p:lk] = 886212                       (: 'www-form-urldecode' ':' 'step' :)
            or $state[$p:lk] = 886213                       (: 'www-form-urlencode' ':' 'step' :)
            or $state[$p:lk] = 886214                       (: 'xinclude' ':' 'step' :)
            or $state[$p:lk] = 886215                       (: 'xquery' ':' 'step' :)
            or $state[$p:lk] = 886216                       (: 'xsl-formatter' ':' 'step' :)
            or $state[$p:lk] = 886217                       (: 'xslt' ':' 'step' :)
            or $state[$p:lk] = 902533                       (: NCName^Token ':' 'store' :)
            or $state[$p:lk] = 902542                       (: 'add-attribute' ':' 'store' :)
            or $state[$p:lk] = 902543                       (: 'add-xml-base' ':' 'store' :)
            or $state[$p:lk] = 902545                       (: 'compare' ':' 'store' :)
            or $state[$p:lk] = 902546                       (: 'count' ':' 'store' :)
            or $state[$p:lk] = 902547                       (: 'default' ':' 'store' :)
            or $state[$p:lk] = 902548                       (: 'delete' ':' 'store' :)
            or $state[$p:lk] = 902549                       (: 'directory-list' ':' 'store' :)
            or $state[$p:lk] = 902551                       (: 'else' ':' 'store' :)
            or $state[$p:lk] = 902553                       (: 'error' ':' 'store' :)
            or $state[$p:lk] = 902554                       (: 'escape-markup' ':' 'store' :)
            or $state[$p:lk] = 902555                       (: 'exec' ':' 'store' :)
            or $state[$p:lk] = 902556                       (: 'filter' ':' 'store' :)
            or $state[$p:lk] = 902557                       (: 'for-each' ':' 'store' :)
            or $state[$p:lk] = 902559                       (: 'hash' ':' 'store' :)
            or $state[$p:lk] = 902560                       (: 'http-request' ':' 'store' :)
            or $state[$p:lk] = 902561                       (: 'identity' ':' 'store' :)
            or $state[$p:lk] = 902562                       (: 'if' ':' 'store' :)
            or $state[$p:lk] = 902563                       (: 'insert' ':' 'store' :)
            or $state[$p:lk] = 902565                       (: 'label-elements' ':' 'store' :)
            or $state[$p:lk] = 902566                       (: 'library' ':' 'store' :)
            or $state[$p:lk] = 902567                       (: 'load' ':' 'store' :)
            or $state[$p:lk] = 902568                       (: 'make-absolute-uris' ':' 'store' :)
            or $state[$p:lk] = 902569                       (: 'namespace' ':' 'store' :)
            or $state[$p:lk] = 902570                       (: 'namespace-rename' ':' 'store' :)
            or $state[$p:lk] = 902571                       (: 'pack' ':' 'store' :)
            or $state[$p:lk] = 902572                       (: 'parameters' ':' 'store' :)
            or $state[$p:lk] = 902574                       (: 'pipeline' ':' 'store' :)
            or $state[$p:lk] = 902576                       (: 'rename' ':' 'store' :)
            or $state[$p:lk] = 902577                       (: 'replace' ':' 'store' :)
            or $state[$p:lk] = 902579                       (: 'set-attributes' ':' 'store' :)
            or $state[$p:lk] = 902580                       (: 'sink' ':' 'store' :)
            or $state[$p:lk] = 902581                       (: 'split-sequence' ':' 'store' :)
            or $state[$p:lk] = 902582                       (: 'step' ':' 'store' :)
            or $state[$p:lk] = 902583                       (: 'store' ':' 'store' :)
            or $state[$p:lk] = 902584                       (: 'string-replace' ':' 'store' :)
            or $state[$p:lk] = 902585                       (: 'try' ':' 'store' :)
            or $state[$p:lk] = 902586                       (: 'unescape-markup' ':' 'store' :)
            or $state[$p:lk] = 902587                       (: 'unwrap' ':' 'store' :)
            or $state[$p:lk] = 902588                       (: 'uuid' ':' 'store' :)
            or $state[$p:lk] = 902589                       (: 'validate-with-relax-ng' ':' 'store' :)
            or $state[$p:lk] = 902590                       (: 'validate-with-schematron' ':' 'store' :)
            or $state[$p:lk] = 902591                       (: 'validate-with-xml-schema' ':' 'store' :)
            or $state[$p:lk] = 902592                       (: 'variable' ':' 'store' :)
            or $state[$p:lk] = 902593                       (: 'viewport' ':' 'store' :)
            or $state[$p:lk] = 902594                       (: 'wrap' ':' 'store' :)
            or $state[$p:lk] = 902595                       (: 'wrap-sequence' ':' 'store' :)
            or $state[$p:lk] = 902596                       (: 'www-form-urldecode' ':' 'store' :)
            or $state[$p:lk] = 902597                       (: 'www-form-urlencode' ':' 'store' :)
            or $state[$p:lk] = 902598                       (: 'xinclude' ':' 'store' :)
            or $state[$p:lk] = 902599                       (: 'xquery' ':' 'store' :)
            or $state[$p:lk] = 902600                       (: 'xsl-formatter' ':' 'store' :)
            or $state[$p:lk] = 902601                       (: 'xslt' ':' 'store' :)
            or $state[$p:lk] = 918917                       (: NCName^Token ':' 'string-replace' :)
            or $state[$p:lk] = 918926                       (: 'add-attribute' ':' 'string-replace' :)
            or $state[$p:lk] = 918927                       (: 'add-xml-base' ':' 'string-replace' :)
            or $state[$p:lk] = 918929                       (: 'compare' ':' 'string-replace' :)
            or $state[$p:lk] = 918930                       (: 'count' ':' 'string-replace' :)
            or $state[$p:lk] = 918931                       (: 'default' ':' 'string-replace' :)
            or $state[$p:lk] = 918932                       (: 'delete' ':' 'string-replace' :)
            or $state[$p:lk] = 918933                       (: 'directory-list' ':' 'string-replace' :)
            or $state[$p:lk] = 918935                       (: 'else' ':' 'string-replace' :)
            or $state[$p:lk] = 918937                       (: 'error' ':' 'string-replace' :)
            or $state[$p:lk] = 918938                       (: 'escape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 918939                       (: 'exec' ':' 'string-replace' :)
            or $state[$p:lk] = 918940                       (: 'filter' ':' 'string-replace' :)
            or $state[$p:lk] = 918941                       (: 'for-each' ':' 'string-replace' :)
            or $state[$p:lk] = 918943                       (: 'hash' ':' 'string-replace' :)
            or $state[$p:lk] = 918944                       (: 'http-request' ':' 'string-replace' :)
            or $state[$p:lk] = 918945                       (: 'identity' ':' 'string-replace' :)
            or $state[$p:lk] = 918946                       (: 'if' ':' 'string-replace' :)
            or $state[$p:lk] = 918947                       (: 'insert' ':' 'string-replace' :)
            or $state[$p:lk] = 918949                       (: 'label-elements' ':' 'string-replace' :)
            or $state[$p:lk] = 918950                       (: 'library' ':' 'string-replace' :)
            or $state[$p:lk] = 918951                       (: 'load' ':' 'string-replace' :)
            or $state[$p:lk] = 918952                       (: 'make-absolute-uris' ':' 'string-replace' :)
            or $state[$p:lk] = 918953                       (: 'namespace' ':' 'string-replace' :)
            or $state[$p:lk] = 918954                       (: 'namespace-rename' ':' 'string-replace' :)
            or $state[$p:lk] = 918955                       (: 'pack' ':' 'string-replace' :)
            or $state[$p:lk] = 918956                       (: 'parameters' ':' 'string-replace' :)
            or $state[$p:lk] = 918958                       (: 'pipeline' ':' 'string-replace' :)
            or $state[$p:lk] = 918960                       (: 'rename' ':' 'string-replace' :)
            or $state[$p:lk] = 918961                       (: 'replace' ':' 'string-replace' :)
            or $state[$p:lk] = 918963                       (: 'set-attributes' ':' 'string-replace' :)
            or $state[$p:lk] = 918964                       (: 'sink' ':' 'string-replace' :)
            or $state[$p:lk] = 918965                       (: 'split-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 918966                       (: 'step' ':' 'string-replace' :)
            or $state[$p:lk] = 918967                       (: 'store' ':' 'string-replace' :)
            or $state[$p:lk] = 918968                       (: 'string-replace' ':' 'string-replace' :)
            or $state[$p:lk] = 918969                       (: 'try' ':' 'string-replace' :)
            or $state[$p:lk] = 918970                       (: 'unescape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 918971                       (: 'unwrap' ':' 'string-replace' :)
            or $state[$p:lk] = 918972                       (: 'uuid' ':' 'string-replace' :)
            or $state[$p:lk] = 918973                       (: 'validate-with-relax-ng' ':' 'string-replace' :)
            or $state[$p:lk] = 918974                       (: 'validate-with-schematron' ':' 'string-replace' :)
            or $state[$p:lk] = 918975                       (: 'validate-with-xml-schema' ':' 'string-replace' :)
            or $state[$p:lk] = 918976                       (: 'variable' ':' 'string-replace' :)
            or $state[$p:lk] = 918977                       (: 'viewport' ':' 'string-replace' :)
            or $state[$p:lk] = 918978                       (: 'wrap' ':' 'string-replace' :)
            or $state[$p:lk] = 918979                       (: 'wrap-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 918980                       (: 'www-form-urldecode' ':' 'string-replace' :)
            or $state[$p:lk] = 918981                       (: 'www-form-urlencode' ':' 'string-replace' :)
            or $state[$p:lk] = 918982                       (: 'xinclude' ':' 'string-replace' :)
            or $state[$p:lk] = 918983                       (: 'xquery' ':' 'string-replace' :)
            or $state[$p:lk] = 918984                       (: 'xsl-formatter' ':' 'string-replace' :)
            or $state[$p:lk] = 918985                       (: 'xslt' ':' 'string-replace' :)
            or $state[$p:lk] = 935301                       (: NCName^Token ':' 'try' :)
            or $state[$p:lk] = 935310                       (: 'add-attribute' ':' 'try' :)
            or $state[$p:lk] = 935311                       (: 'add-xml-base' ':' 'try' :)
            or $state[$p:lk] = 935313                       (: 'compare' ':' 'try' :)
            or $state[$p:lk] = 935314                       (: 'count' ':' 'try' :)
            or $state[$p:lk] = 935315                       (: 'default' ':' 'try' :)
            or $state[$p:lk] = 935316                       (: 'delete' ':' 'try' :)
            or $state[$p:lk] = 935317                       (: 'directory-list' ':' 'try' :)
            or $state[$p:lk] = 935319                       (: 'else' ':' 'try' :)
            or $state[$p:lk] = 935321                       (: 'error' ':' 'try' :)
            or $state[$p:lk] = 935322                       (: 'escape-markup' ':' 'try' :)
            or $state[$p:lk] = 935323                       (: 'exec' ':' 'try' :)
            or $state[$p:lk] = 935324                       (: 'filter' ':' 'try' :)
            or $state[$p:lk] = 935325                       (: 'for-each' ':' 'try' :)
            or $state[$p:lk] = 935327                       (: 'hash' ':' 'try' :)
            or $state[$p:lk] = 935328                       (: 'http-request' ':' 'try' :)
            or $state[$p:lk] = 935329                       (: 'identity' ':' 'try' :)
            or $state[$p:lk] = 935330                       (: 'if' ':' 'try' :)
            or $state[$p:lk] = 935331                       (: 'insert' ':' 'try' :)
            or $state[$p:lk] = 935333                       (: 'label-elements' ':' 'try' :)
            or $state[$p:lk] = 935334                       (: 'library' ':' 'try' :)
            or $state[$p:lk] = 935335                       (: 'load' ':' 'try' :)
            or $state[$p:lk] = 935336                       (: 'make-absolute-uris' ':' 'try' :)
            or $state[$p:lk] = 935337                       (: 'namespace' ':' 'try' :)
            or $state[$p:lk] = 935338                       (: 'namespace-rename' ':' 'try' :)
            or $state[$p:lk] = 935339                       (: 'pack' ':' 'try' :)
            or $state[$p:lk] = 935340                       (: 'parameters' ':' 'try' :)
            or $state[$p:lk] = 935342                       (: 'pipeline' ':' 'try' :)
            or $state[$p:lk] = 935344                       (: 'rename' ':' 'try' :)
            or $state[$p:lk] = 935345                       (: 'replace' ':' 'try' :)
            or $state[$p:lk] = 935347                       (: 'set-attributes' ':' 'try' :)
            or $state[$p:lk] = 935348                       (: 'sink' ':' 'try' :)
            or $state[$p:lk] = 935349                       (: 'split-sequence' ':' 'try' :)
            or $state[$p:lk] = 935350                       (: 'step' ':' 'try' :)
            or $state[$p:lk] = 935351                       (: 'store' ':' 'try' :)
            or $state[$p:lk] = 935352                       (: 'string-replace' ':' 'try' :)
            or $state[$p:lk] = 935353                       (: 'try' ':' 'try' :)
            or $state[$p:lk] = 935354                       (: 'unescape-markup' ':' 'try' :)
            or $state[$p:lk] = 935355                       (: 'unwrap' ':' 'try' :)
            or $state[$p:lk] = 935356                       (: 'uuid' ':' 'try' :)
            or $state[$p:lk] = 935357                       (: 'validate-with-relax-ng' ':' 'try' :)
            or $state[$p:lk] = 935358                       (: 'validate-with-schematron' ':' 'try' :)
            or $state[$p:lk] = 935359                       (: 'validate-with-xml-schema' ':' 'try' :)
            or $state[$p:lk] = 935360                       (: 'variable' ':' 'try' :)
            or $state[$p:lk] = 935361                       (: 'viewport' ':' 'try' :)
            or $state[$p:lk] = 935362                       (: 'wrap' ':' 'try' :)
            or $state[$p:lk] = 935363                       (: 'wrap-sequence' ':' 'try' :)
            or $state[$p:lk] = 935364                       (: 'www-form-urldecode' ':' 'try' :)
            or $state[$p:lk] = 935365                       (: 'www-form-urlencode' ':' 'try' :)
            or $state[$p:lk] = 935366                       (: 'xinclude' ':' 'try' :)
            or $state[$p:lk] = 935367                       (: 'xquery' ':' 'try' :)
            or $state[$p:lk] = 935368                       (: 'xsl-formatter' ':' 'try' :)
            or $state[$p:lk] = 935369                       (: 'xslt' ':' 'try' :)
            or $state[$p:lk] = 951685                       (: NCName^Token ':' 'unescape-markup' :)
            or $state[$p:lk] = 951694                       (: 'add-attribute' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951695                       (: 'add-xml-base' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951697                       (: 'compare' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951698                       (: 'count' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951699                       (: 'default' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951700                       (: 'delete' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951701                       (: 'directory-list' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951703                       (: 'else' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951705                       (: 'error' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951706                       (: 'escape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951707                       (: 'exec' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951708                       (: 'filter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951709                       (: 'for-each' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951711                       (: 'hash' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951712                       (: 'http-request' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951713                       (: 'identity' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951714                       (: 'if' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951715                       (: 'insert' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951717                       (: 'label-elements' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951718                       (: 'library' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951719                       (: 'load' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951720                       (: 'make-absolute-uris' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951721                       (: 'namespace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951722                       (: 'namespace-rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951723                       (: 'pack' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951724                       (: 'parameters' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951726                       (: 'pipeline' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951728                       (: 'rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951729                       (: 'replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951731                       (: 'set-attributes' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951732                       (: 'sink' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951733                       (: 'split-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951734                       (: 'step' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951735                       (: 'store' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951736                       (: 'string-replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951737                       (: 'try' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951738                       (: 'unescape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951739                       (: 'unwrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951740                       (: 'uuid' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951741                       (: 'validate-with-relax-ng' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951742                       (: 'validate-with-schematron' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951743                       (: 'validate-with-xml-schema' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951744                       (: 'variable' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951745                       (: 'viewport' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951746                       (: 'wrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951747                       (: 'wrap-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951748                       (: 'www-form-urldecode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951749                       (: 'www-form-urlencode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951750                       (: 'xinclude' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951751                       (: 'xquery' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951752                       (: 'xsl-formatter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951753                       (: 'xslt' ':' 'unescape-markup' :)
            or $state[$p:lk] = 968069                       (: NCName^Token ':' 'unwrap' :)
            or $state[$p:lk] = 968078                       (: 'add-attribute' ':' 'unwrap' :)
            or $state[$p:lk] = 968079                       (: 'add-xml-base' ':' 'unwrap' :)
            or $state[$p:lk] = 968081                       (: 'compare' ':' 'unwrap' :)
            or $state[$p:lk] = 968082                       (: 'count' ':' 'unwrap' :)
            or $state[$p:lk] = 968083                       (: 'default' ':' 'unwrap' :)
            or $state[$p:lk] = 968084                       (: 'delete' ':' 'unwrap' :)
            or $state[$p:lk] = 968085                       (: 'directory-list' ':' 'unwrap' :)
            or $state[$p:lk] = 968087                       (: 'else' ':' 'unwrap' :)
            or $state[$p:lk] = 968089                       (: 'error' ':' 'unwrap' :)
            or $state[$p:lk] = 968090                       (: 'escape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 968091                       (: 'exec' ':' 'unwrap' :)
            or $state[$p:lk] = 968092                       (: 'filter' ':' 'unwrap' :)
            or $state[$p:lk] = 968093                       (: 'for-each' ':' 'unwrap' :)
            or $state[$p:lk] = 968095                       (: 'hash' ':' 'unwrap' :)
            or $state[$p:lk] = 968096                       (: 'http-request' ':' 'unwrap' :)
            or $state[$p:lk] = 968097                       (: 'identity' ':' 'unwrap' :)
            or $state[$p:lk] = 968098                       (: 'if' ':' 'unwrap' :)
            or $state[$p:lk] = 968099                       (: 'insert' ':' 'unwrap' :)
            or $state[$p:lk] = 968101                       (: 'label-elements' ':' 'unwrap' :)
            or $state[$p:lk] = 968102                       (: 'library' ':' 'unwrap' :)
            or $state[$p:lk] = 968103                       (: 'load' ':' 'unwrap' :)
            or $state[$p:lk] = 968104                       (: 'make-absolute-uris' ':' 'unwrap' :)
            or $state[$p:lk] = 968105                       (: 'namespace' ':' 'unwrap' :)
            or $state[$p:lk] = 968106                       (: 'namespace-rename' ':' 'unwrap' :)
            or $state[$p:lk] = 968107                       (: 'pack' ':' 'unwrap' :)
            or $state[$p:lk] = 968108                       (: 'parameters' ':' 'unwrap' :)
            or $state[$p:lk] = 968110                       (: 'pipeline' ':' 'unwrap' :)
            or $state[$p:lk] = 968112                       (: 'rename' ':' 'unwrap' :)
            or $state[$p:lk] = 968113                       (: 'replace' ':' 'unwrap' :)
            or $state[$p:lk] = 968115                       (: 'set-attributes' ':' 'unwrap' :)
            or $state[$p:lk] = 968116                       (: 'sink' ':' 'unwrap' :)
            or $state[$p:lk] = 968117                       (: 'split-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 968118                       (: 'step' ':' 'unwrap' :)
            or $state[$p:lk] = 968119                       (: 'store' ':' 'unwrap' :)
            or $state[$p:lk] = 968120                       (: 'string-replace' ':' 'unwrap' :)
            or $state[$p:lk] = 968121                       (: 'try' ':' 'unwrap' :)
            or $state[$p:lk] = 968122                       (: 'unescape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 968123                       (: 'unwrap' ':' 'unwrap' :)
            or $state[$p:lk] = 968124                       (: 'uuid' ':' 'unwrap' :)
            or $state[$p:lk] = 968125                       (: 'validate-with-relax-ng' ':' 'unwrap' :)
            or $state[$p:lk] = 968126                       (: 'validate-with-schematron' ':' 'unwrap' :)
            or $state[$p:lk] = 968127                       (: 'validate-with-xml-schema' ':' 'unwrap' :)
            or $state[$p:lk] = 968128                       (: 'variable' ':' 'unwrap' :)
            or $state[$p:lk] = 968129                       (: 'viewport' ':' 'unwrap' :)
            or $state[$p:lk] = 968130                       (: 'wrap' ':' 'unwrap' :)
            or $state[$p:lk] = 968131                       (: 'wrap-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 968132                       (: 'www-form-urldecode' ':' 'unwrap' :)
            or $state[$p:lk] = 968133                       (: 'www-form-urlencode' ':' 'unwrap' :)
            or $state[$p:lk] = 968134                       (: 'xinclude' ':' 'unwrap' :)
            or $state[$p:lk] = 968135                       (: 'xquery' ':' 'unwrap' :)
            or $state[$p:lk] = 968136                       (: 'xsl-formatter' ':' 'unwrap' :)
            or $state[$p:lk] = 968137                       (: 'xslt' ':' 'unwrap' :)
            or $state[$p:lk] = 984453                       (: NCName^Token ':' 'uuid' :)
            or $state[$p:lk] = 984462                       (: 'add-attribute' ':' 'uuid' :)
            or $state[$p:lk] = 984463                       (: 'add-xml-base' ':' 'uuid' :)
            or $state[$p:lk] = 984465                       (: 'compare' ':' 'uuid' :)
            or $state[$p:lk] = 984466                       (: 'count' ':' 'uuid' :)
            or $state[$p:lk] = 984467                       (: 'default' ':' 'uuid' :)
            or $state[$p:lk] = 984468                       (: 'delete' ':' 'uuid' :)
            or $state[$p:lk] = 984469                       (: 'directory-list' ':' 'uuid' :)
            or $state[$p:lk] = 984471                       (: 'else' ':' 'uuid' :)
            or $state[$p:lk] = 984473                       (: 'error' ':' 'uuid' :)
            or $state[$p:lk] = 984474                       (: 'escape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 984475                       (: 'exec' ':' 'uuid' :)
            or $state[$p:lk] = 984476                       (: 'filter' ':' 'uuid' :)
            or $state[$p:lk] = 984477                       (: 'for-each' ':' 'uuid' :)
            or $state[$p:lk] = 984479                       (: 'hash' ':' 'uuid' :)
            or $state[$p:lk] = 984480                       (: 'http-request' ':' 'uuid' :)
            or $state[$p:lk] = 984481                       (: 'identity' ':' 'uuid' :)
            or $state[$p:lk] = 984482                       (: 'if' ':' 'uuid' :)
            or $state[$p:lk] = 984483                       (: 'insert' ':' 'uuid' :)
            or $state[$p:lk] = 984485                       (: 'label-elements' ':' 'uuid' :)
            or $state[$p:lk] = 984486                       (: 'library' ':' 'uuid' :)
            or $state[$p:lk] = 984487                       (: 'load' ':' 'uuid' :)
            or $state[$p:lk] = 984488                       (: 'make-absolute-uris' ':' 'uuid' :)
            or $state[$p:lk] = 984489                       (: 'namespace' ':' 'uuid' :)
            or $state[$p:lk] = 984490                       (: 'namespace-rename' ':' 'uuid' :)
            or $state[$p:lk] = 984491                       (: 'pack' ':' 'uuid' :)
            or $state[$p:lk] = 984492                       (: 'parameters' ':' 'uuid' :)
            or $state[$p:lk] = 984494                       (: 'pipeline' ':' 'uuid' :)
            or $state[$p:lk] = 984496                       (: 'rename' ':' 'uuid' :)
            or $state[$p:lk] = 984497                       (: 'replace' ':' 'uuid' :)
            or $state[$p:lk] = 984499                       (: 'set-attributes' ':' 'uuid' :)
            or $state[$p:lk] = 984500                       (: 'sink' ':' 'uuid' :)
            or $state[$p:lk] = 984501                       (: 'split-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 984502                       (: 'step' ':' 'uuid' :)
            or $state[$p:lk] = 984503                       (: 'store' ':' 'uuid' :)
            or $state[$p:lk] = 984504                       (: 'string-replace' ':' 'uuid' :)
            or $state[$p:lk] = 984505                       (: 'try' ':' 'uuid' :)
            or $state[$p:lk] = 984506                       (: 'unescape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 984507                       (: 'unwrap' ':' 'uuid' :)
            or $state[$p:lk] = 984508                       (: 'uuid' ':' 'uuid' :)
            or $state[$p:lk] = 984509                       (: 'validate-with-relax-ng' ':' 'uuid' :)
            or $state[$p:lk] = 984510                       (: 'validate-with-schematron' ':' 'uuid' :)
            or $state[$p:lk] = 984511                       (: 'validate-with-xml-schema' ':' 'uuid' :)
            or $state[$p:lk] = 984512                       (: 'variable' ':' 'uuid' :)
            or $state[$p:lk] = 984513                       (: 'viewport' ':' 'uuid' :)
            or $state[$p:lk] = 984514                       (: 'wrap' ':' 'uuid' :)
            or $state[$p:lk] = 984515                       (: 'wrap-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 984516                       (: 'www-form-urldecode' ':' 'uuid' :)
            or $state[$p:lk] = 984517                       (: 'www-form-urlencode' ':' 'uuid' :)
            or $state[$p:lk] = 984518                       (: 'xinclude' ':' 'uuid' :)
            or $state[$p:lk] = 984519                       (: 'xquery' ':' 'uuid' :)
            or $state[$p:lk] = 984520                       (: 'xsl-formatter' ':' 'uuid' :)
            or $state[$p:lk] = 984521                       (: 'xslt' ':' 'uuid' :)
            or $state[$p:lk] = 1000837                      (: NCName^Token ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000846                      (: 'add-attribute' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000847                      (: 'add-xml-base' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000849                      (: 'compare' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000850                      (: 'count' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000851                      (: 'default' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000852                      (: 'delete' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000853                      (: 'directory-list' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000855                      (: 'else' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000857                      (: 'error' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000858                      (: 'escape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000859                      (: 'exec' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000860                      (: 'filter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000861                      (: 'for-each' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000863                      (: 'hash' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000864                      (: 'http-request' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000865                      (: 'identity' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000866                      (: 'if' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000867                      (: 'insert' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000869                      (: 'label-elements' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000870                      (: 'library' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000871                      (: 'load' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000872                      (: 'make-absolute-uris' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000873                      (: 'namespace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000874                      (: 'namespace-rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000875                      (: 'pack' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000876                      (: 'parameters' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000878                      (: 'pipeline' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000880                      (: 'rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000881                      (: 'replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000883                      (: 'set-attributes' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000884                      (: 'sink' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000885                      (: 'split-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000886                      (: 'step' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000887                      (: 'store' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000888                      (: 'string-replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000889                      (: 'try' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000890                      (: 'unescape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000891                      (: 'unwrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000892                      (: 'uuid' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000893                      (: 'validate-with-relax-ng' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000894                      (: 'validate-with-schematron' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000895                      (: 'validate-with-xml-schema' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000896                      (: 'variable' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000897                      (: 'viewport' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000898                      (: 'wrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000899                      (: 'wrap-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000900                      (: 'www-form-urldecode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000901                      (: 'www-form-urlencode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000902                      (: 'xinclude' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000903                      (: 'xquery' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000904                      (: 'xsl-formatter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000905                      (: 'xslt' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1017221                      (: NCName^Token ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017230                      (: 'add-attribute' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017231                      (: 'add-xml-base' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017233                      (: 'compare' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017234                      (: 'count' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017235                      (: 'default' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017236                      (: 'delete' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017237                      (: 'directory-list' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017239                      (: 'else' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017241                      (: 'error' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017242                      (: 'escape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017243                      (: 'exec' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017244                      (: 'filter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017245                      (: 'for-each' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017247                      (: 'hash' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017248                      (: 'http-request' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017249                      (: 'identity' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017250                      (: 'if' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017251                      (: 'insert' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017253                      (: 'label-elements' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017254                      (: 'library' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017255                      (: 'load' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017256                      (: 'make-absolute-uris' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017257                      (: 'namespace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017258                      (: 'namespace-rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017259                      (: 'pack' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017260                      (: 'parameters' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017262                      (: 'pipeline' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017264                      (: 'rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017265                      (: 'replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017267                      (: 'set-attributes' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017268                      (: 'sink' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017269                      (: 'split-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017270                      (: 'step' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017271                      (: 'store' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017272                      (: 'string-replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017273                      (: 'try' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017274                      (: 'unescape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017275                      (: 'unwrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017276                      (: 'uuid' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017277                      (: 'validate-with-relax-ng' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017278                      (: 'validate-with-schematron' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017279                      (: 'validate-with-xml-schema' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017280                      (: 'variable' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017281                      (: 'viewport' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017282                      (: 'wrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017283                      (: 'wrap-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017284                      (: 'www-form-urldecode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017285                      (: 'www-form-urlencode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017286                      (: 'xinclude' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017287                      (: 'xquery' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017288                      (: 'xsl-formatter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017289                      (: 'xslt' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1033605                      (: NCName^Token ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033614                      (: 'add-attribute' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033615                      (: 'add-xml-base' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033617                      (: 'compare' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033618                      (: 'count' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033619                      (: 'default' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033620                      (: 'delete' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033621                      (: 'directory-list' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033623                      (: 'else' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033625                      (: 'error' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033626                      (: 'escape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033627                      (: 'exec' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033628                      (: 'filter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033629                      (: 'for-each' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033631                      (: 'hash' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033632                      (: 'http-request' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033633                      (: 'identity' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033634                      (: 'if' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033635                      (: 'insert' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033637                      (: 'label-elements' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033638                      (: 'library' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033639                      (: 'load' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033640                      (: 'make-absolute-uris' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033641                      (: 'namespace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033642                      (: 'namespace-rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033643                      (: 'pack' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033644                      (: 'parameters' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033646                      (: 'pipeline' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033648                      (: 'rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033649                      (: 'replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033651                      (: 'set-attributes' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033652                      (: 'sink' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033653                      (: 'split-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033654                      (: 'step' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033655                      (: 'store' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033656                      (: 'string-replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033657                      (: 'try' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033658                      (: 'unescape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033659                      (: 'unwrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033660                      (: 'uuid' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033661                      (: 'validate-with-relax-ng' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033662                      (: 'validate-with-schematron' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033663                      (: 'validate-with-xml-schema' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033664                      (: 'variable' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033665                      (: 'viewport' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033666                      (: 'wrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033667                      (: 'wrap-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033668                      (: 'www-form-urldecode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033669                      (: 'www-form-urlencode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033670                      (: 'xinclude' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033671                      (: 'xquery' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033672                      (: 'xsl-formatter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033673                      (: 'xslt' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1049989                      (: NCName^Token ':' 'variable' :)
            or $state[$p:lk] = 1049998                      (: 'add-attribute' ':' 'variable' :)
            or $state[$p:lk] = 1049999                      (: 'add-xml-base' ':' 'variable' :)
            or $state[$p:lk] = 1050001                      (: 'compare' ':' 'variable' :)
            or $state[$p:lk] = 1050002                      (: 'count' ':' 'variable' :)
            or $state[$p:lk] = 1050003                      (: 'default' ':' 'variable' :)
            or $state[$p:lk] = 1050004                      (: 'delete' ':' 'variable' :)
            or $state[$p:lk] = 1050005                      (: 'directory-list' ':' 'variable' :)
            or $state[$p:lk] = 1050007                      (: 'else' ':' 'variable' :)
            or $state[$p:lk] = 1050009                      (: 'error' ':' 'variable' :)
            or $state[$p:lk] = 1050010                      (: 'escape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1050011                      (: 'exec' ':' 'variable' :)
            or $state[$p:lk] = 1050012                      (: 'filter' ':' 'variable' :)
            or $state[$p:lk] = 1050013                      (: 'for-each' ':' 'variable' :)
            or $state[$p:lk] = 1050015                      (: 'hash' ':' 'variable' :)
            or $state[$p:lk] = 1050016                      (: 'http-request' ':' 'variable' :)
            or $state[$p:lk] = 1050017                      (: 'identity' ':' 'variable' :)
            or $state[$p:lk] = 1050018                      (: 'if' ':' 'variable' :)
            or $state[$p:lk] = 1050019                      (: 'insert' ':' 'variable' :)
            or $state[$p:lk] = 1050021                      (: 'label-elements' ':' 'variable' :)
            or $state[$p:lk] = 1050022                      (: 'library' ':' 'variable' :)
            or $state[$p:lk] = 1050023                      (: 'load' ':' 'variable' :)
            or $state[$p:lk] = 1050024                      (: 'make-absolute-uris' ':' 'variable' :)
            or $state[$p:lk] = 1050025                      (: 'namespace' ':' 'variable' :)
            or $state[$p:lk] = 1050026                      (: 'namespace-rename' ':' 'variable' :)
            or $state[$p:lk] = 1050027                      (: 'pack' ':' 'variable' :)
            or $state[$p:lk] = 1050028                      (: 'parameters' ':' 'variable' :)
            or $state[$p:lk] = 1050030                      (: 'pipeline' ':' 'variable' :)
            or $state[$p:lk] = 1050032                      (: 'rename' ':' 'variable' :)
            or $state[$p:lk] = 1050033                      (: 'replace' ':' 'variable' :)
            or $state[$p:lk] = 1050035                      (: 'set-attributes' ':' 'variable' :)
            or $state[$p:lk] = 1050036                      (: 'sink' ':' 'variable' :)
            or $state[$p:lk] = 1050037                      (: 'split-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1050038                      (: 'step' ':' 'variable' :)
            or $state[$p:lk] = 1050039                      (: 'store' ':' 'variable' :)
            or $state[$p:lk] = 1050040                      (: 'string-replace' ':' 'variable' :)
            or $state[$p:lk] = 1050041                      (: 'try' ':' 'variable' :)
            or $state[$p:lk] = 1050042                      (: 'unescape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1050043                      (: 'unwrap' ':' 'variable' :)
            or $state[$p:lk] = 1050044                      (: 'uuid' ':' 'variable' :)
            or $state[$p:lk] = 1050045                      (: 'validate-with-relax-ng' ':' 'variable' :)
            or $state[$p:lk] = 1050046                      (: 'validate-with-schematron' ':' 'variable' :)
            or $state[$p:lk] = 1050047                      (: 'validate-with-xml-schema' ':' 'variable' :)
            or $state[$p:lk] = 1050048                      (: 'variable' ':' 'variable' :)
            or $state[$p:lk] = 1050049                      (: 'viewport' ':' 'variable' :)
            or $state[$p:lk] = 1050050                      (: 'wrap' ':' 'variable' :)
            or $state[$p:lk] = 1050051                      (: 'wrap-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1050052                      (: 'www-form-urldecode' ':' 'variable' :)
            or $state[$p:lk] = 1050053                      (: 'www-form-urlencode' ':' 'variable' :)
            or $state[$p:lk] = 1050054                      (: 'xinclude' ':' 'variable' :)
            or $state[$p:lk] = 1050055                      (: 'xquery' ':' 'variable' :)
            or $state[$p:lk] = 1050056                      (: 'xsl-formatter' ':' 'variable' :)
            or $state[$p:lk] = 1050057                      (: 'xslt' ':' 'variable' :)
            or $state[$p:lk] = 1050117                      (: NCName^Token '=' 'variable' :)
            or $state[$p:lk] = 1050126                      (: 'add-attribute' '=' 'variable' :)
            or $state[$p:lk] = 1050127                      (: 'add-xml-base' '=' 'variable' :)
            or $state[$p:lk] = 1050129                      (: 'compare' '=' 'variable' :)
            or $state[$p:lk] = 1050130                      (: 'count' '=' 'variable' :)
            or $state[$p:lk] = 1050131                      (: 'default' '=' 'variable' :)
            or $state[$p:lk] = 1050132                      (: 'delete' '=' 'variable' :)
            or $state[$p:lk] = 1050133                      (: 'directory-list' '=' 'variable' :)
            or $state[$p:lk] = 1050135                      (: 'else' '=' 'variable' :)
            or $state[$p:lk] = 1050137                      (: 'error' '=' 'variable' :)
            or $state[$p:lk] = 1050138                      (: 'escape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1050139                      (: 'exec' '=' 'variable' :)
            or $state[$p:lk] = 1050140                      (: 'filter' '=' 'variable' :)
            or $state[$p:lk] = 1050141                      (: 'for-each' '=' 'variable' :)
            or $state[$p:lk] = 1050143                      (: 'hash' '=' 'variable' :)
            or $state[$p:lk] = 1050144                      (: 'http-request' '=' 'variable' :)
            or $state[$p:lk] = 1050145                      (: 'identity' '=' 'variable' :)
            or $state[$p:lk] = 1050146                      (: 'if' '=' 'variable' :)
            or $state[$p:lk] = 1050147                      (: 'insert' '=' 'variable' :)
            or $state[$p:lk] = 1050149                      (: 'label-elements' '=' 'variable' :)
            or $state[$p:lk] = 1050150                      (: 'library' '=' 'variable' :)
            or $state[$p:lk] = 1050151                      (: 'load' '=' 'variable' :)
            or $state[$p:lk] = 1050152                      (: 'make-absolute-uris' '=' 'variable' :)
            or $state[$p:lk] = 1050153                      (: 'namespace' '=' 'variable' :)
            or $state[$p:lk] = 1050154                      (: 'namespace-rename' '=' 'variable' :)
            or $state[$p:lk] = 1050155                      (: 'pack' '=' 'variable' :)
            or $state[$p:lk] = 1050156                      (: 'parameters' '=' 'variable' :)
            or $state[$p:lk] = 1050158                      (: 'pipeline' '=' 'variable' :)
            or $state[$p:lk] = 1050160                      (: 'rename' '=' 'variable' :)
            or $state[$p:lk] = 1050161                      (: 'replace' '=' 'variable' :)
            or $state[$p:lk] = 1050163                      (: 'set-attributes' '=' 'variable' :)
            or $state[$p:lk] = 1050164                      (: 'sink' '=' 'variable' :)
            or $state[$p:lk] = 1050165                      (: 'split-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1050166                      (: 'step' '=' 'variable' :)
            or $state[$p:lk] = 1050167                      (: 'store' '=' 'variable' :)
            or $state[$p:lk] = 1050168                      (: 'string-replace' '=' 'variable' :)
            or $state[$p:lk] = 1050169                      (: 'try' '=' 'variable' :)
            or $state[$p:lk] = 1050170                      (: 'unescape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1050171                      (: 'unwrap' '=' 'variable' :)
            or $state[$p:lk] = 1050172                      (: 'uuid' '=' 'variable' :)
            or $state[$p:lk] = 1050173                      (: 'validate-with-relax-ng' '=' 'variable' :)
            or $state[$p:lk] = 1050174                      (: 'validate-with-schematron' '=' 'variable' :)
            or $state[$p:lk] = 1050175                      (: 'validate-with-xml-schema' '=' 'variable' :)
            or $state[$p:lk] = 1050176                      (: 'variable' '=' 'variable' :)
            or $state[$p:lk] = 1050177                      (: 'viewport' '=' 'variable' :)
            or $state[$p:lk] = 1050178                      (: 'wrap' '=' 'variable' :)
            or $state[$p:lk] = 1050179                      (: 'wrap-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1050180                      (: 'www-form-urldecode' '=' 'variable' :)
            or $state[$p:lk] = 1050181                      (: 'www-form-urlencode' '=' 'variable' :)
            or $state[$p:lk] = 1050182                      (: 'xinclude' '=' 'variable' :)
            or $state[$p:lk] = 1050183                      (: 'xquery' '=' 'variable' :)
            or $state[$p:lk] = 1050184                      (: 'xsl-formatter' '=' 'variable' :)
            or $state[$p:lk] = 1050185                      (: 'xslt' '=' 'variable' :)
            or $state[$p:lk] = 1066373                      (: NCName^Token ':' 'viewport' :)
            or $state[$p:lk] = 1066382                      (: 'add-attribute' ':' 'viewport' :)
            or $state[$p:lk] = 1066383                      (: 'add-xml-base' ':' 'viewport' :)
            or $state[$p:lk] = 1066385                      (: 'compare' ':' 'viewport' :)
            or $state[$p:lk] = 1066386                      (: 'count' ':' 'viewport' :)
            or $state[$p:lk] = 1066387                      (: 'default' ':' 'viewport' :)
            or $state[$p:lk] = 1066388                      (: 'delete' ':' 'viewport' :)
            or $state[$p:lk] = 1066389                      (: 'directory-list' ':' 'viewport' :)
            or $state[$p:lk] = 1066391                      (: 'else' ':' 'viewport' :)
            or $state[$p:lk] = 1066393                      (: 'error' ':' 'viewport' :)
            or $state[$p:lk] = 1066394                      (: 'escape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1066395                      (: 'exec' ':' 'viewport' :)
            or $state[$p:lk] = 1066396                      (: 'filter' ':' 'viewport' :)
            or $state[$p:lk] = 1066397                      (: 'for-each' ':' 'viewport' :)
            or $state[$p:lk] = 1066399                      (: 'hash' ':' 'viewport' :)
            or $state[$p:lk] = 1066400                      (: 'http-request' ':' 'viewport' :)
            or $state[$p:lk] = 1066401                      (: 'identity' ':' 'viewport' :)
            or $state[$p:lk] = 1066402                      (: 'if' ':' 'viewport' :)
            or $state[$p:lk] = 1066403                      (: 'insert' ':' 'viewport' :)
            or $state[$p:lk] = 1066405                      (: 'label-elements' ':' 'viewport' :)
            or $state[$p:lk] = 1066406                      (: 'library' ':' 'viewport' :)
            or $state[$p:lk] = 1066407                      (: 'load' ':' 'viewport' :)
            or $state[$p:lk] = 1066408                      (: 'make-absolute-uris' ':' 'viewport' :)
            or $state[$p:lk] = 1066409                      (: 'namespace' ':' 'viewport' :)
            or $state[$p:lk] = 1066410                      (: 'namespace-rename' ':' 'viewport' :)
            or $state[$p:lk] = 1066411                      (: 'pack' ':' 'viewport' :)
            or $state[$p:lk] = 1066412                      (: 'parameters' ':' 'viewport' :)
            or $state[$p:lk] = 1066414                      (: 'pipeline' ':' 'viewport' :)
            or $state[$p:lk] = 1066416                      (: 'rename' ':' 'viewport' :)
            or $state[$p:lk] = 1066417                      (: 'replace' ':' 'viewport' :)
            or $state[$p:lk] = 1066419                      (: 'set-attributes' ':' 'viewport' :)
            or $state[$p:lk] = 1066420                      (: 'sink' ':' 'viewport' :)
            or $state[$p:lk] = 1066421                      (: 'split-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1066422                      (: 'step' ':' 'viewport' :)
            or $state[$p:lk] = 1066423                      (: 'store' ':' 'viewport' :)
            or $state[$p:lk] = 1066424                      (: 'string-replace' ':' 'viewport' :)
            or $state[$p:lk] = 1066425                      (: 'try' ':' 'viewport' :)
            or $state[$p:lk] = 1066426                      (: 'unescape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1066427                      (: 'unwrap' ':' 'viewport' :)
            or $state[$p:lk] = 1066428                      (: 'uuid' ':' 'viewport' :)
            or $state[$p:lk] = 1066429                      (: 'validate-with-relax-ng' ':' 'viewport' :)
            or $state[$p:lk] = 1066430                      (: 'validate-with-schematron' ':' 'viewport' :)
            or $state[$p:lk] = 1066431                      (: 'validate-with-xml-schema' ':' 'viewport' :)
            or $state[$p:lk] = 1066432                      (: 'variable' ':' 'viewport' :)
            or $state[$p:lk] = 1066433                      (: 'viewport' ':' 'viewport' :)
            or $state[$p:lk] = 1066434                      (: 'wrap' ':' 'viewport' :)
            or $state[$p:lk] = 1066435                      (: 'wrap-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1066436                      (: 'www-form-urldecode' ':' 'viewport' :)
            or $state[$p:lk] = 1066437                      (: 'www-form-urlencode' ':' 'viewport' :)
            or $state[$p:lk] = 1066438                      (: 'xinclude' ':' 'viewport' :)
            or $state[$p:lk] = 1066439                      (: 'xquery' ':' 'viewport' :)
            or $state[$p:lk] = 1066440                      (: 'xsl-formatter' ':' 'viewport' :)
            or $state[$p:lk] = 1066441                      (: 'xslt' ':' 'viewport' :)
            or $state[$p:lk] = 1082757                      (: NCName^Token ':' 'wrap' :)
            or $state[$p:lk] = 1082766                      (: 'add-attribute' ':' 'wrap' :)
            or $state[$p:lk] = 1082767                      (: 'add-xml-base' ':' 'wrap' :)
            or $state[$p:lk] = 1082769                      (: 'compare' ':' 'wrap' :)
            or $state[$p:lk] = 1082770                      (: 'count' ':' 'wrap' :)
            or $state[$p:lk] = 1082771                      (: 'default' ':' 'wrap' :)
            or $state[$p:lk] = 1082772                      (: 'delete' ':' 'wrap' :)
            or $state[$p:lk] = 1082773                      (: 'directory-list' ':' 'wrap' :)
            or $state[$p:lk] = 1082775                      (: 'else' ':' 'wrap' :)
            or $state[$p:lk] = 1082777                      (: 'error' ':' 'wrap' :)
            or $state[$p:lk] = 1082778                      (: 'escape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1082779                      (: 'exec' ':' 'wrap' :)
            or $state[$p:lk] = 1082780                      (: 'filter' ':' 'wrap' :)
            or $state[$p:lk] = 1082781                      (: 'for-each' ':' 'wrap' :)
            or $state[$p:lk] = 1082783                      (: 'hash' ':' 'wrap' :)
            or $state[$p:lk] = 1082784                      (: 'http-request' ':' 'wrap' :)
            or $state[$p:lk] = 1082785                      (: 'identity' ':' 'wrap' :)
            or $state[$p:lk] = 1082786                      (: 'if' ':' 'wrap' :)
            or $state[$p:lk] = 1082787                      (: 'insert' ':' 'wrap' :)
            or $state[$p:lk] = 1082789                      (: 'label-elements' ':' 'wrap' :)
            or $state[$p:lk] = 1082790                      (: 'library' ':' 'wrap' :)
            or $state[$p:lk] = 1082791                      (: 'load' ':' 'wrap' :)
            or $state[$p:lk] = 1082792                      (: 'make-absolute-uris' ':' 'wrap' :)
            or $state[$p:lk] = 1082793                      (: 'namespace' ':' 'wrap' :)
            or $state[$p:lk] = 1082794                      (: 'namespace-rename' ':' 'wrap' :)
            or $state[$p:lk] = 1082795                      (: 'pack' ':' 'wrap' :)
            or $state[$p:lk] = 1082796                      (: 'parameters' ':' 'wrap' :)
            or $state[$p:lk] = 1082798                      (: 'pipeline' ':' 'wrap' :)
            or $state[$p:lk] = 1082800                      (: 'rename' ':' 'wrap' :)
            or $state[$p:lk] = 1082801                      (: 'replace' ':' 'wrap' :)
            or $state[$p:lk] = 1082803                      (: 'set-attributes' ':' 'wrap' :)
            or $state[$p:lk] = 1082804                      (: 'sink' ':' 'wrap' :)
            or $state[$p:lk] = 1082805                      (: 'split-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1082806                      (: 'step' ':' 'wrap' :)
            or $state[$p:lk] = 1082807                      (: 'store' ':' 'wrap' :)
            or $state[$p:lk] = 1082808                      (: 'string-replace' ':' 'wrap' :)
            or $state[$p:lk] = 1082809                      (: 'try' ':' 'wrap' :)
            or $state[$p:lk] = 1082810                      (: 'unescape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1082811                      (: 'unwrap' ':' 'wrap' :)
            or $state[$p:lk] = 1082812                      (: 'uuid' ':' 'wrap' :)
            or $state[$p:lk] = 1082813                      (: 'validate-with-relax-ng' ':' 'wrap' :)
            or $state[$p:lk] = 1082814                      (: 'validate-with-schematron' ':' 'wrap' :)
            or $state[$p:lk] = 1082815                      (: 'validate-with-xml-schema' ':' 'wrap' :)
            or $state[$p:lk] = 1082816                      (: 'variable' ':' 'wrap' :)
            or $state[$p:lk] = 1082817                      (: 'viewport' ':' 'wrap' :)
            or $state[$p:lk] = 1082818                      (: 'wrap' ':' 'wrap' :)
            or $state[$p:lk] = 1082819                      (: 'wrap-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1082820                      (: 'www-form-urldecode' ':' 'wrap' :)
            or $state[$p:lk] = 1082821                      (: 'www-form-urlencode' ':' 'wrap' :)
            or $state[$p:lk] = 1082822                      (: 'xinclude' ':' 'wrap' :)
            or $state[$p:lk] = 1082823                      (: 'xquery' ':' 'wrap' :)
            or $state[$p:lk] = 1082824                      (: 'xsl-formatter' ':' 'wrap' :)
            or $state[$p:lk] = 1082825                      (: 'xslt' ':' 'wrap' :)
            or $state[$p:lk] = 1099141                      (: NCName^Token ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099150                      (: 'add-attribute' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099151                      (: 'add-xml-base' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099153                      (: 'compare' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099154                      (: 'count' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099155                      (: 'default' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099156                      (: 'delete' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099157                      (: 'directory-list' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099159                      (: 'else' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099161                      (: 'error' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099162                      (: 'escape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099163                      (: 'exec' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099164                      (: 'filter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099165                      (: 'for-each' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099167                      (: 'hash' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099168                      (: 'http-request' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099169                      (: 'identity' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099170                      (: 'if' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099171                      (: 'insert' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099173                      (: 'label-elements' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099174                      (: 'library' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099175                      (: 'load' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099176                      (: 'make-absolute-uris' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099177                      (: 'namespace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099178                      (: 'namespace-rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099179                      (: 'pack' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099180                      (: 'parameters' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099182                      (: 'pipeline' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099184                      (: 'rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099185                      (: 'replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099187                      (: 'set-attributes' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099188                      (: 'sink' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099189                      (: 'split-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099190                      (: 'step' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099191                      (: 'store' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099192                      (: 'string-replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099193                      (: 'try' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099194                      (: 'unescape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099195                      (: 'unwrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099196                      (: 'uuid' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099197                      (: 'validate-with-relax-ng' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099198                      (: 'validate-with-schematron' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099199                      (: 'validate-with-xml-schema' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099200                      (: 'variable' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099201                      (: 'viewport' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099202                      (: 'wrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099203                      (: 'wrap-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099204                      (: 'www-form-urldecode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099205                      (: 'www-form-urlencode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099206                      (: 'xinclude' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099207                      (: 'xquery' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099208                      (: 'xsl-formatter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099209                      (: 'xslt' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1115525                      (: NCName^Token ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115534                      (: 'add-attribute' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115535                      (: 'add-xml-base' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115537                      (: 'compare' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115538                      (: 'count' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115539                      (: 'default' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115540                      (: 'delete' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115541                      (: 'directory-list' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115543                      (: 'else' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115545                      (: 'error' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115546                      (: 'escape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115547                      (: 'exec' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115548                      (: 'filter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115549                      (: 'for-each' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115551                      (: 'hash' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115552                      (: 'http-request' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115553                      (: 'identity' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115554                      (: 'if' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115555                      (: 'insert' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115557                      (: 'label-elements' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115558                      (: 'library' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115559                      (: 'load' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115560                      (: 'make-absolute-uris' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115561                      (: 'namespace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115562                      (: 'namespace-rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115563                      (: 'pack' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115564                      (: 'parameters' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115566                      (: 'pipeline' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115568                      (: 'rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115569                      (: 'replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115571                      (: 'set-attributes' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115572                      (: 'sink' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115573                      (: 'split-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115574                      (: 'step' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115575                      (: 'store' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115576                      (: 'string-replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115577                      (: 'try' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115578                      (: 'unescape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115579                      (: 'unwrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115580                      (: 'uuid' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115581                      (: 'validate-with-relax-ng' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115582                      (: 'validate-with-schematron' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115583                      (: 'validate-with-xml-schema' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115584                      (: 'variable' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115585                      (: 'viewport' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115586                      (: 'wrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115587                      (: 'wrap-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115588                      (: 'www-form-urldecode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115589                      (: 'www-form-urlencode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115590                      (: 'xinclude' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115591                      (: 'xquery' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115592                      (: 'xsl-formatter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115593                      (: 'xslt' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1131909                      (: NCName^Token ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131918                      (: 'add-attribute' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131919                      (: 'add-xml-base' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131921                      (: 'compare' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131922                      (: 'count' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131923                      (: 'default' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131924                      (: 'delete' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131925                      (: 'directory-list' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131927                      (: 'else' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131929                      (: 'error' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131930                      (: 'escape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131931                      (: 'exec' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131932                      (: 'filter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131933                      (: 'for-each' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131935                      (: 'hash' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131936                      (: 'http-request' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131937                      (: 'identity' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131938                      (: 'if' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131939                      (: 'insert' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131941                      (: 'label-elements' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131942                      (: 'library' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131943                      (: 'load' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131944                      (: 'make-absolute-uris' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131945                      (: 'namespace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131946                      (: 'namespace-rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131947                      (: 'pack' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131948                      (: 'parameters' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131950                      (: 'pipeline' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131952                      (: 'rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131953                      (: 'replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131955                      (: 'set-attributes' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131956                      (: 'sink' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131957                      (: 'split-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131958                      (: 'step' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131959                      (: 'store' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131960                      (: 'string-replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131961                      (: 'try' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131962                      (: 'unescape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131963                      (: 'unwrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131964                      (: 'uuid' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131965                      (: 'validate-with-relax-ng' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131966                      (: 'validate-with-schematron' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131967                      (: 'validate-with-xml-schema' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131968                      (: 'variable' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131969                      (: 'viewport' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131970                      (: 'wrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131971                      (: 'wrap-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131972                      (: 'www-form-urldecode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131973                      (: 'www-form-urlencode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131974                      (: 'xinclude' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131975                      (: 'xquery' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131976                      (: 'xsl-formatter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131977                      (: 'xslt' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1148293                      (: NCName^Token ':' 'xinclude' :)
            or $state[$p:lk] = 1148302                      (: 'add-attribute' ':' 'xinclude' :)
            or $state[$p:lk] = 1148303                      (: 'add-xml-base' ':' 'xinclude' :)
            or $state[$p:lk] = 1148305                      (: 'compare' ':' 'xinclude' :)
            or $state[$p:lk] = 1148306                      (: 'count' ':' 'xinclude' :)
            or $state[$p:lk] = 1148307                      (: 'default' ':' 'xinclude' :)
            or $state[$p:lk] = 1148308                      (: 'delete' ':' 'xinclude' :)
            or $state[$p:lk] = 1148309                      (: 'directory-list' ':' 'xinclude' :)
            or $state[$p:lk] = 1148311                      (: 'else' ':' 'xinclude' :)
            or $state[$p:lk] = 1148313                      (: 'error' ':' 'xinclude' :)
            or $state[$p:lk] = 1148314                      (: 'escape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1148315                      (: 'exec' ':' 'xinclude' :)
            or $state[$p:lk] = 1148316                      (: 'filter' ':' 'xinclude' :)
            or $state[$p:lk] = 1148317                      (: 'for-each' ':' 'xinclude' :)
            or $state[$p:lk] = 1148319                      (: 'hash' ':' 'xinclude' :)
            or $state[$p:lk] = 1148320                      (: 'http-request' ':' 'xinclude' :)
            or $state[$p:lk] = 1148321                      (: 'identity' ':' 'xinclude' :)
            or $state[$p:lk] = 1148322                      (: 'if' ':' 'xinclude' :)
            or $state[$p:lk] = 1148323                      (: 'insert' ':' 'xinclude' :)
            or $state[$p:lk] = 1148325                      (: 'label-elements' ':' 'xinclude' :)
            or $state[$p:lk] = 1148326                      (: 'library' ':' 'xinclude' :)
            or $state[$p:lk] = 1148327                      (: 'load' ':' 'xinclude' :)
            or $state[$p:lk] = 1148328                      (: 'make-absolute-uris' ':' 'xinclude' :)
            or $state[$p:lk] = 1148329                      (: 'namespace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148330                      (: 'namespace-rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1148331                      (: 'pack' ':' 'xinclude' :)
            or $state[$p:lk] = 1148332                      (: 'parameters' ':' 'xinclude' :)
            or $state[$p:lk] = 1148334                      (: 'pipeline' ':' 'xinclude' :)
            or $state[$p:lk] = 1148336                      (: 'rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1148337                      (: 'replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148339                      (: 'set-attributes' ':' 'xinclude' :)
            or $state[$p:lk] = 1148340                      (: 'sink' ':' 'xinclude' :)
            or $state[$p:lk] = 1148341                      (: 'split-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1148342                      (: 'step' ':' 'xinclude' :)
            or $state[$p:lk] = 1148343                      (: 'store' ':' 'xinclude' :)
            or $state[$p:lk] = 1148344                      (: 'string-replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148345                      (: 'try' ':' 'xinclude' :)
            or $state[$p:lk] = 1148346                      (: 'unescape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1148347                      (: 'unwrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1148348                      (: 'uuid' ':' 'xinclude' :)
            or $state[$p:lk] = 1148349                      (: 'validate-with-relax-ng' ':' 'xinclude' :)
            or $state[$p:lk] = 1148350                      (: 'validate-with-schematron' ':' 'xinclude' :)
            or $state[$p:lk] = 1148351                      (: 'validate-with-xml-schema' ':' 'xinclude' :)
            or $state[$p:lk] = 1148352                      (: 'variable' ':' 'xinclude' :)
            or $state[$p:lk] = 1148353                      (: 'viewport' ':' 'xinclude' :)
            or $state[$p:lk] = 1148354                      (: 'wrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1148355                      (: 'wrap-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1148356                      (: 'www-form-urldecode' ':' 'xinclude' :)
            or $state[$p:lk] = 1148357                      (: 'www-form-urlencode' ':' 'xinclude' :)
            or $state[$p:lk] = 1148358                      (: 'xinclude' ':' 'xinclude' :)
            or $state[$p:lk] = 1148359                      (: 'xquery' ':' 'xinclude' :)
            or $state[$p:lk] = 1148360                      (: 'xsl-formatter' ':' 'xinclude' :)
            or $state[$p:lk] = 1148361                      (: 'xslt' ':' 'xinclude' :)
            or $state[$p:lk] = 1164677                      (: NCName^Token ':' 'xquery' :)
            or $state[$p:lk] = 1164686                      (: 'add-attribute' ':' 'xquery' :)
            or $state[$p:lk] = 1164687                      (: 'add-xml-base' ':' 'xquery' :)
            or $state[$p:lk] = 1164689                      (: 'compare' ':' 'xquery' :)
            or $state[$p:lk] = 1164690                      (: 'count' ':' 'xquery' :)
            or $state[$p:lk] = 1164691                      (: 'default' ':' 'xquery' :)
            or $state[$p:lk] = 1164692                      (: 'delete' ':' 'xquery' :)
            or $state[$p:lk] = 1164693                      (: 'directory-list' ':' 'xquery' :)
            or $state[$p:lk] = 1164695                      (: 'else' ':' 'xquery' :)
            or $state[$p:lk] = 1164697                      (: 'error' ':' 'xquery' :)
            or $state[$p:lk] = 1164698                      (: 'escape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1164699                      (: 'exec' ':' 'xquery' :)
            or $state[$p:lk] = 1164700                      (: 'filter' ':' 'xquery' :)
            or $state[$p:lk] = 1164701                      (: 'for-each' ':' 'xquery' :)
            or $state[$p:lk] = 1164703                      (: 'hash' ':' 'xquery' :)
            or $state[$p:lk] = 1164704                      (: 'http-request' ':' 'xquery' :)
            or $state[$p:lk] = 1164705                      (: 'identity' ':' 'xquery' :)
            or $state[$p:lk] = 1164706                      (: 'if' ':' 'xquery' :)
            or $state[$p:lk] = 1164707                      (: 'insert' ':' 'xquery' :)
            or $state[$p:lk] = 1164709                      (: 'label-elements' ':' 'xquery' :)
            or $state[$p:lk] = 1164710                      (: 'library' ':' 'xquery' :)
            or $state[$p:lk] = 1164711                      (: 'load' ':' 'xquery' :)
            or $state[$p:lk] = 1164712                      (: 'make-absolute-uris' ':' 'xquery' :)
            or $state[$p:lk] = 1164713                      (: 'namespace' ':' 'xquery' :)
            or $state[$p:lk] = 1164714                      (: 'namespace-rename' ':' 'xquery' :)
            or $state[$p:lk] = 1164715                      (: 'pack' ':' 'xquery' :)
            or $state[$p:lk] = 1164716                      (: 'parameters' ':' 'xquery' :)
            or $state[$p:lk] = 1164718                      (: 'pipeline' ':' 'xquery' :)
            or $state[$p:lk] = 1164720                      (: 'rename' ':' 'xquery' :)
            or $state[$p:lk] = 1164721                      (: 'replace' ':' 'xquery' :)
            or $state[$p:lk] = 1164723                      (: 'set-attributes' ':' 'xquery' :)
            or $state[$p:lk] = 1164724                      (: 'sink' ':' 'xquery' :)
            or $state[$p:lk] = 1164725                      (: 'split-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1164726                      (: 'step' ':' 'xquery' :)
            or $state[$p:lk] = 1164727                      (: 'store' ':' 'xquery' :)
            or $state[$p:lk] = 1164728                      (: 'string-replace' ':' 'xquery' :)
            or $state[$p:lk] = 1164729                      (: 'try' ':' 'xquery' :)
            or $state[$p:lk] = 1164730                      (: 'unescape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1164731                      (: 'unwrap' ':' 'xquery' :)
            or $state[$p:lk] = 1164732                      (: 'uuid' ':' 'xquery' :)
            or $state[$p:lk] = 1164733                      (: 'validate-with-relax-ng' ':' 'xquery' :)
            or $state[$p:lk] = 1164734                      (: 'validate-with-schematron' ':' 'xquery' :)
            or $state[$p:lk] = 1164735                      (: 'validate-with-xml-schema' ':' 'xquery' :)
            or $state[$p:lk] = 1164736                      (: 'variable' ':' 'xquery' :)
            or $state[$p:lk] = 1164737                      (: 'viewport' ':' 'xquery' :)
            or $state[$p:lk] = 1164738                      (: 'wrap' ':' 'xquery' :)
            or $state[$p:lk] = 1164739                      (: 'wrap-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1164740                      (: 'www-form-urldecode' ':' 'xquery' :)
            or $state[$p:lk] = 1164741                      (: 'www-form-urlencode' ':' 'xquery' :)
            or $state[$p:lk] = 1164742                      (: 'xinclude' ':' 'xquery' :)
            or $state[$p:lk] = 1164743                      (: 'xquery' ':' 'xquery' :)
            or $state[$p:lk] = 1164744                      (: 'xsl-formatter' ':' 'xquery' :)
            or $state[$p:lk] = 1164745                      (: 'xslt' ':' 'xquery' :)
            or $state[$p:lk] = 1181061                      (: NCName^Token ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181070                      (: 'add-attribute' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181071                      (: 'add-xml-base' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181073                      (: 'compare' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181074                      (: 'count' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181075                      (: 'default' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181076                      (: 'delete' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181077                      (: 'directory-list' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181079                      (: 'else' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181081                      (: 'error' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181082                      (: 'escape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181083                      (: 'exec' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181084                      (: 'filter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181085                      (: 'for-each' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181087                      (: 'hash' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181088                      (: 'http-request' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181089                      (: 'identity' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181090                      (: 'if' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181091                      (: 'insert' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181093                      (: 'label-elements' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181094                      (: 'library' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181095                      (: 'load' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181096                      (: 'make-absolute-uris' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181097                      (: 'namespace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181098                      (: 'namespace-rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181099                      (: 'pack' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181100                      (: 'parameters' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181102                      (: 'pipeline' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181104                      (: 'rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181105                      (: 'replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181107                      (: 'set-attributes' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181108                      (: 'sink' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181109                      (: 'split-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181110                      (: 'step' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181111                      (: 'store' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181112                      (: 'string-replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181113                      (: 'try' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181114                      (: 'unescape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181115                      (: 'unwrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181116                      (: 'uuid' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181117                      (: 'validate-with-relax-ng' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181118                      (: 'validate-with-schematron' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181119                      (: 'validate-with-xml-schema' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181120                      (: 'variable' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181121                      (: 'viewport' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181122                      (: 'wrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181123                      (: 'wrap-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181124                      (: 'www-form-urldecode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181125                      (: 'www-form-urlencode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181126                      (: 'xinclude' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181127                      (: 'xquery' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181128                      (: 'xsl-formatter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181129                      (: 'xslt' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1197445                      (: NCName^Token ':' 'xslt' :)
            or $state[$p:lk] = 1197454                      (: 'add-attribute' ':' 'xslt' :)
            or $state[$p:lk] = 1197455                      (: 'add-xml-base' ':' 'xslt' :)
            or $state[$p:lk] = 1197457                      (: 'compare' ':' 'xslt' :)
            or $state[$p:lk] = 1197458                      (: 'count' ':' 'xslt' :)
            or $state[$p:lk] = 1197459                      (: 'default' ':' 'xslt' :)
            or $state[$p:lk] = 1197460                      (: 'delete' ':' 'xslt' :)
            or $state[$p:lk] = 1197461                      (: 'directory-list' ':' 'xslt' :)
            or $state[$p:lk] = 1197463                      (: 'else' ':' 'xslt' :)
            or $state[$p:lk] = 1197465                      (: 'error' ':' 'xslt' :)
            or $state[$p:lk] = 1197466                      (: 'escape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1197467                      (: 'exec' ':' 'xslt' :)
            or $state[$p:lk] = 1197468                      (: 'filter' ':' 'xslt' :)
            or $state[$p:lk] = 1197469                      (: 'for-each' ':' 'xslt' :)
            or $state[$p:lk] = 1197471                      (: 'hash' ':' 'xslt' :)
            or $state[$p:lk] = 1197472                      (: 'http-request' ':' 'xslt' :)
            or $state[$p:lk] = 1197473                      (: 'identity' ':' 'xslt' :)
            or $state[$p:lk] = 1197474                      (: 'if' ':' 'xslt' :)
            or $state[$p:lk] = 1197475                      (: 'insert' ':' 'xslt' :)
            or $state[$p:lk] = 1197477                      (: 'label-elements' ':' 'xslt' :)
            or $state[$p:lk] = 1197478                      (: 'library' ':' 'xslt' :)
            or $state[$p:lk] = 1197479                      (: 'load' ':' 'xslt' :)
            or $state[$p:lk] = 1197480                      (: 'make-absolute-uris' ':' 'xslt' :)
            or $state[$p:lk] = 1197481                      (: 'namespace' ':' 'xslt' :)
            or $state[$p:lk] = 1197482                      (: 'namespace-rename' ':' 'xslt' :)
            or $state[$p:lk] = 1197483                      (: 'pack' ':' 'xslt' :)
            or $state[$p:lk] = 1197484                      (: 'parameters' ':' 'xslt' :)
            or $state[$p:lk] = 1197486                      (: 'pipeline' ':' 'xslt' :)
            or $state[$p:lk] = 1197488                      (: 'rename' ':' 'xslt' :)
            or $state[$p:lk] = 1197489                      (: 'replace' ':' 'xslt' :)
            or $state[$p:lk] = 1197491                      (: 'set-attributes' ':' 'xslt' :)
            or $state[$p:lk] = 1197492                      (: 'sink' ':' 'xslt' :)
            or $state[$p:lk] = 1197493                      (: 'split-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1197494                      (: 'step' ':' 'xslt' :)
            or $state[$p:lk] = 1197495                      (: 'store' ':' 'xslt' :)
            or $state[$p:lk] = 1197496                      (: 'string-replace' ':' 'xslt' :)
            or $state[$p:lk] = 1197497                      (: 'try' ':' 'xslt' :)
            or $state[$p:lk] = 1197498                      (: 'unescape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1197499                      (: 'unwrap' ':' 'xslt' :)
            or $state[$p:lk] = 1197500                      (: 'uuid' ':' 'xslt' :)
            or $state[$p:lk] = 1197501                      (: 'validate-with-relax-ng' ':' 'xslt' :)
            or $state[$p:lk] = 1197502                      (: 'validate-with-schematron' ':' 'xslt' :)
            or $state[$p:lk] = 1197503                      (: 'validate-with-xml-schema' ':' 'xslt' :)
            or $state[$p:lk] = 1197504                      (: 'variable' ':' 'xslt' :)
            or $state[$p:lk] = 1197505                      (: 'viewport' ':' 'xslt' :)
            or $state[$p:lk] = 1197506                      (: 'wrap' ':' 'xslt' :)
            or $state[$p:lk] = 1197507                      (: 'wrap-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1197508                      (: 'www-form-urldecode' ':' 'xslt' :)
            or $state[$p:lk] = 1197509                      (: 'www-form-urlencode' ':' 'xslt' :)
            or $state[$p:lk] = 1197510                      (: 'xinclude' ':' 'xslt' :)
            or $state[$p:lk] = 1197511                      (: 'xquery' ':' 'xslt' :)
            or $state[$p:lk] = 1197512                      (: 'xsl-formatter' ':' 'xslt' :)
            or $state[$p:lk] = 1197513) then                (: 'xslt' ':' 'xslt' :)
        let $state := p:memoized($state, 1)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:try-variable($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, -1, 1)
              else
                p:memoize($backtrack, $state, -7, 1)
      else
        $state
    let $state :=
      if ($state[$p:lk] = -1) then
        let $state := p:parse-variable($input, $state)
        return $state
      else if ($state[$p:lk] = 925                          (: 'for-each' '(' :)
            or $state[$p:lk] = 3869                         (: 'for-each' 'from' :)
            or $state[$p:lk] = 9501) then                   (: 'for-each' '{' :)
        let $state := p:parse-forEachStep($input, $state)
        return $state
      else if ($state[$p:lk] = 961                          (: 'viewport' '(' :)
            or $state[$p:lk] = 3905                         (: 'viewport' 'from' :)
            or $state[$p:lk] = 9537) then                   (: 'viewport' '{' :)
        let $state := p:parse-viewportStep($input, $state)
        return $state
      else if ($state[$p:lk] = 930) then                    (: 'if' '(' :)
        let $state := p:parse-chooseStep($input, $state)
        return $state
      else if ($state[$p:lk] = 9529) then                   (: 'try' '{' :)
        let $state := p:parse-tryStep($input, $state)
        return $state
      else if ($state[$p:lk] = 74) then                     (: '{' :)
        let $state := p:parse-groupStep($input, $state)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:parse-atomicStep($input, $state)
        return $state
    let $state := p:lookahead1W(48, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    return
      if ($state[$p:l1] = 75) then                          (: '}' :)
        $state
      else
        p:parse-subpipeline-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production subpipeline (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-subpipeline-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(44, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
    let $state :=
      if ($state[$p:l1] = 34) then                          (: 'if' :)
        let $state := p:lookahead2W(30, $input, $state)     (: Whitespace | '(' | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1442) then                    (: 'if' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1570) then               (: 'if' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 57) then                     (: 'try' :)
        let $state := p:lookahead2W(35, $input, $state)     (: Whitespace | ':' | '=' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1465) then                    (: 'try' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1593) then               (: 'try' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 29                           (: 'viewport' :)
            or $state[$p:l1] = 65) then                     (: 'viewport' :)
        let $state := p:lookahead2W(41, $input, $state)     (: Whitespace | '(' | ':' | '=' | 'from' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1437                          (: 'viewport' ':' :)
           or $state[$p:lk] = 1473) then                    (: 'viewport' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1565                     (: 'viewport' '=' :)
                or $state[$p:lk] = 1601) then               (: 'viewport' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 5                            (: 'default' :)
            or $state[$p:l1] = 19                           (: 'else' :)
            or $state[$p:l1] = 23                           (: 'library' :)
            or $state[$p:l1] = 38                           (: 'namespace' :)
            or $state[$p:l1] = 41                           (: 'pipeline' :)
            or $state[$p:l1] = 46                           (: 'step' :)
            or $state[$p:l1] = 54                           (: 'variable' :)
            or $state[$p:l1] = 64) then                     (: 'variable' :)
        let $state := p:lookahead2W(25, $input, $state)     (: Whitespace | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1413                          (: 'default' ':' :)
           or $state[$p:lk] = 1427                          (: 'else' ':' :)
           or $state[$p:lk] = 1431                          (: 'library' ':' :)
           or $state[$p:lk] = 1446                          (: 'namespace' ':' :)
           or $state[$p:lk] = 1449                          (: 'pipeline' ':' :)
           or $state[$p:lk] = 1454                          (: 'step' ':' :)
           or $state[$p:lk] = 1462                          (: 'variable' ':' :)
           or $state[$p:lk] = 1472) then                    (: 'variable' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1541                     (: 'default' '=' :)
                or $state[$p:lk] = 1555                     (: 'else' '=' :)
                or $state[$p:lk] = 1559                     (: 'library' '=' :)
                or $state[$p:lk] = 1574                     (: 'namespace' '=' :)
                or $state[$p:lk] = 1577                     (: 'pipeline' '=' :)
                or $state[$p:lk] = 1582                     (: 'step' '=' :)
                or $state[$p:lk] = 1590                     (: 'variable' '=' :)
                or $state[$p:lk] = 1600) then               (: 'variable' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 14                           (: 'add-xml-base' :)
            or $state[$p:l1] = 15                           (: 'compare' :)
            or $state[$p:l1] = 17                           (: 'count' :)
            or $state[$p:l1] = 18                           (: 'delete' :)
            or $state[$p:l1] = 20                           (: 'directory-list' :)
            or $state[$p:l1] = 21                           (: 'error' :)
            or $state[$p:l1] = 25                           (: 'escape-markup' :)
            or $state[$p:l1] = 26                           (: 'exec' :)
            or $state[$p:l1] = 27                           (: 'filter' :)
            or $state[$p:l1] = 28                           (: 'hash' :)
            or $state[$p:l1] = 31                           (: 'http-request' :)
            or $state[$p:l1] = 32                           (: 'identity' :)
            or $state[$p:l1] = 33                           (: 'insert' :)
            or $state[$p:l1] = 35                           (: 'label-elements' :)
            or $state[$p:l1] = 37                           (: 'load' :)
            or $state[$p:l1] = 39                           (: 'make-absolute-uris' :)
            or $state[$p:l1] = 40                           (: 'namespace-rename' :)
            or $state[$p:l1] = 42                           (: 'pack' :)
            or $state[$p:l1] = 43                           (: 'parameters' :)
            or $state[$p:l1] = 44                           (: 'rename' :)
            or $state[$p:l1] = 48                           (: 'replace' :)
            or $state[$p:l1] = 49                           (: 'set-attributes' :)
            or $state[$p:l1] = 51                           (: 'sink' :)
            or $state[$p:l1] = 52                           (: 'split-sequence' :)
            or $state[$p:l1] = 53                           (: 'store' :)
            or $state[$p:l1] = 55                           (: 'string-replace' :)
            or $state[$p:l1] = 56                           (: 'unescape-markup' :)
            or $state[$p:l1] = 58                           (: 'unwrap' :)
            or $state[$p:l1] = 59                           (: 'uuid' :)
            or $state[$p:l1] = 60                           (: 'validate-with-relax-ng' :)
            or $state[$p:l1] = 61                           (: 'validate-with-schematron' :)
            or $state[$p:l1] = 62                           (: 'validate-with-xml-schema' :)
            or $state[$p:l1] = 63                           (: 'wrap' :)
            or $state[$p:l1] = 66                           (: 'wrap-sequence' :)
            or $state[$p:l1] = 67                           (: 'www-form-urldecode' :)
            or $state[$p:l1] = 68                           (: 'www-form-urlencode' :)
            or $state[$p:l1] = 69                           (: 'xinclude' :)
            or $state[$p:l1] = 70                           (: 'xquery' :)
            or $state[$p:l1] = 71                           (: 'xsl-formatter' :)
            or $state[$p:l1] = 72                           (: 'xslt' :)
            or $state[$p:l1] = 73) then                     (: 'xslt' :)
        let $state := p:lookahead2W(53, $input, $state)     (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
        let $state :=
          if ($state[$p:lk] = 1422                          (: 'add-xml-base' ':' :)
           or $state[$p:lk] = 1423                          (: 'compare' ':' :)
           or $state[$p:lk] = 1425                          (: 'count' ':' :)
           or $state[$p:lk] = 1426                          (: 'delete' ':' :)
           or $state[$p:lk] = 1428                          (: 'directory-list' ':' :)
           or $state[$p:lk] = 1429                          (: 'error' ':' :)
           or $state[$p:lk] = 1433                          (: 'escape-markup' ':' :)
           or $state[$p:lk] = 1434                          (: 'exec' ':' :)
           or $state[$p:lk] = 1435                          (: 'filter' ':' :)
           or $state[$p:lk] = 1436                          (: 'hash' ':' :)
           or $state[$p:lk] = 1439                          (: 'http-request' ':' :)
           or $state[$p:lk] = 1440                          (: 'identity' ':' :)
           or $state[$p:lk] = 1441                          (: 'insert' ':' :)
           or $state[$p:lk] = 1443                          (: 'label-elements' ':' :)
           or $state[$p:lk] = 1445                          (: 'load' ':' :)
           or $state[$p:lk] = 1447                          (: 'make-absolute-uris' ':' :)
           or $state[$p:lk] = 1448                          (: 'namespace-rename' ':' :)
           or $state[$p:lk] = 1450                          (: 'pack' ':' :)
           or $state[$p:lk] = 1451                          (: 'parameters' ':' :)
           or $state[$p:lk] = 1452                          (: 'rename' ':' :)
           or $state[$p:lk] = 1456                          (: 'replace' ':' :)
           or $state[$p:lk] = 1457                          (: 'set-attributes' ':' :)
           or $state[$p:lk] = 1459                          (: 'sink' ':' :)
           or $state[$p:lk] = 1460                          (: 'split-sequence' ':' :)
           or $state[$p:lk] = 1461                          (: 'store' ':' :)
           or $state[$p:lk] = 1463                          (: 'string-replace' ':' :)
           or $state[$p:lk] = 1464                          (: 'unescape-markup' ':' :)
           or $state[$p:lk] = 1466                          (: 'unwrap' ':' :)
           or $state[$p:lk] = 1467                          (: 'uuid' ':' :)
           or $state[$p:lk] = 1468                          (: 'validate-with-relax-ng' ':' :)
           or $state[$p:lk] = 1469                          (: 'validate-with-schematron' ':' :)
           or $state[$p:lk] = 1470                          (: 'validate-with-xml-schema' ':' :)
           or $state[$p:lk] = 1471                          (: 'wrap' ':' :)
           or $state[$p:lk] = 1474                          (: 'wrap-sequence' ':' :)
           or $state[$p:lk] = 1475                          (: 'www-form-urldecode' ':' :)
           or $state[$p:lk] = 1476                          (: 'www-form-urlencode' ':' :)
           or $state[$p:lk] = 1477                          (: 'xinclude' ':' :)
           or $state[$p:lk] = 1478                          (: 'xquery' ':' :)
           or $state[$p:lk] = 1479                          (: 'xsl-formatter' ':' :)
           or $state[$p:lk] = 1480                          (: 'xslt' ':' :)
           or $state[$p:lk] = 1481) then                    (: 'xslt' ':' :)
            let $state := p:lookahead3(42, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1550                     (: 'add-xml-base' '=' :)
                or $state[$p:lk] = 1551                     (: 'compare' '=' :)
                or $state[$p:lk] = 1553                     (: 'count' '=' :)
                or $state[$p:lk] = 1554                     (: 'delete' '=' :)
                or $state[$p:lk] = 1556                     (: 'directory-list' '=' :)
                or $state[$p:lk] = 1557                     (: 'error' '=' :)
                or $state[$p:lk] = 1561                     (: 'escape-markup' '=' :)
                or $state[$p:lk] = 1562                     (: 'exec' '=' :)
                or $state[$p:lk] = 1563                     (: 'filter' '=' :)
                or $state[$p:lk] = 1564                     (: 'hash' '=' :)
                or $state[$p:lk] = 1567                     (: 'http-request' '=' :)
                or $state[$p:lk] = 1568                     (: 'identity' '=' :)
                or $state[$p:lk] = 1569                     (: 'insert' '=' :)
                or $state[$p:lk] = 1571                     (: 'label-elements' '=' :)
                or $state[$p:lk] = 1573                     (: 'load' '=' :)
                or $state[$p:lk] = 1575                     (: 'make-absolute-uris' '=' :)
                or $state[$p:lk] = 1576                     (: 'namespace-rename' '=' :)
                or $state[$p:lk] = 1578                     (: 'pack' '=' :)
                or $state[$p:lk] = 1579                     (: 'parameters' '=' :)
                or $state[$p:lk] = 1580                     (: 'rename' '=' :)
                or $state[$p:lk] = 1584                     (: 'replace' '=' :)
                or $state[$p:lk] = 1585                     (: 'set-attributes' '=' :)
                or $state[$p:lk] = 1587                     (: 'sink' '=' :)
                or $state[$p:lk] = 1588                     (: 'split-sequence' '=' :)
                or $state[$p:lk] = 1589                     (: 'store' '=' :)
                or $state[$p:lk] = 1591                     (: 'string-replace' '=' :)
                or $state[$p:lk] = 1592                     (: 'unescape-markup' '=' :)
                or $state[$p:lk] = 1594                     (: 'unwrap' '=' :)
                or $state[$p:lk] = 1595                     (: 'uuid' '=' :)
                or $state[$p:lk] = 1596                     (: 'validate-with-relax-ng' '=' :)
                or $state[$p:lk] = 1597                     (: 'validate-with-schematron' '=' :)
                or $state[$p:lk] = 1598                     (: 'validate-with-xml-schema' '=' :)
                or $state[$p:lk] = 1599                     (: 'wrap' '=' :)
                or $state[$p:lk] = 1602                     (: 'wrap-sequence' '=' :)
                or $state[$p:lk] = 1603                     (: 'www-form-urldecode' '=' :)
                or $state[$p:lk] = 1604                     (: 'www-form-urlencode' '=' :)
                or $state[$p:lk] = 1605                     (: 'xinclude' '=' :)
                or $state[$p:lk] = 1606                     (: 'xquery' '=' :)
                or $state[$p:lk] = 1607                     (: 'xsl-formatter' '=' :)
                or $state[$p:lk] = 1608                     (: 'xslt' '=' :)
                or $state[$p:lk] = 1609) then               (: 'xslt' '=' :)
            let $state := p:lookahead3W(43, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 83333                        (: NCName^Token ':' NCName^Token :)
            or $state[$p:lk] = 83342                        (: 'add-attribute' ':' NCName^Token :)
            or $state[$p:lk] = 83343                        (: 'add-xml-base' ':' NCName^Token :)
            or $state[$p:lk] = 83345                        (: 'compare' ':' NCName^Token :)
            or $state[$p:lk] = 83346                        (: 'count' ':' NCName^Token :)
            or $state[$p:lk] = 83347                        (: 'default' ':' NCName^Token :)
            or $state[$p:lk] = 83348                        (: 'delete' ':' NCName^Token :)
            or $state[$p:lk] = 83349                        (: 'directory-list' ':' NCName^Token :)
            or $state[$p:lk] = 83351                        (: 'else' ':' NCName^Token :)
            or $state[$p:lk] = 83353                        (: 'error' ':' NCName^Token :)
            or $state[$p:lk] = 83354                        (: 'escape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83355                        (: 'exec' ':' NCName^Token :)
            or $state[$p:lk] = 83356                        (: 'filter' ':' NCName^Token :)
            or $state[$p:lk] = 83357                        (: 'for-each' ':' NCName^Token :)
            or $state[$p:lk] = 83359                        (: 'hash' ':' NCName^Token :)
            or $state[$p:lk] = 83360                        (: 'http-request' ':' NCName^Token :)
            or $state[$p:lk] = 83361                        (: 'identity' ':' NCName^Token :)
            or $state[$p:lk] = 83362                        (: 'if' ':' NCName^Token :)
            or $state[$p:lk] = 83363                        (: 'insert' ':' NCName^Token :)
            or $state[$p:lk] = 83365                        (: 'label-elements' ':' NCName^Token :)
            or $state[$p:lk] = 83366                        (: 'library' ':' NCName^Token :)
            or $state[$p:lk] = 83367                        (: 'load' ':' NCName^Token :)
            or $state[$p:lk] = 83368                        (: 'make-absolute-uris' ':' NCName^Token :)
            or $state[$p:lk] = 83369                        (: 'namespace' ':' NCName^Token :)
            or $state[$p:lk] = 83370                        (: 'namespace-rename' ':' NCName^Token :)
            or $state[$p:lk] = 83371                        (: 'pack' ':' NCName^Token :)
            or $state[$p:lk] = 83372                        (: 'parameters' ':' NCName^Token :)
            or $state[$p:lk] = 83374                        (: 'pipeline' ':' NCName^Token :)
            or $state[$p:lk] = 83376                        (: 'rename' ':' NCName^Token :)
            or $state[$p:lk] = 83377                        (: 'replace' ':' NCName^Token :)
            or $state[$p:lk] = 83379                        (: 'set-attributes' ':' NCName^Token :)
            or $state[$p:lk] = 83380                        (: 'sink' ':' NCName^Token :)
            or $state[$p:lk] = 83381                        (: 'split-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83382                        (: 'step' ':' NCName^Token :)
            or $state[$p:lk] = 83383                        (: 'store' ':' NCName^Token :)
            or $state[$p:lk] = 83384                        (: 'string-replace' ':' NCName^Token :)
            or $state[$p:lk] = 83385                        (: 'try' ':' NCName^Token :)
            or $state[$p:lk] = 83386                        (: 'unescape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83387                        (: 'unwrap' ':' NCName^Token :)
            or $state[$p:lk] = 83388                        (: 'uuid' ':' NCName^Token :)
            or $state[$p:lk] = 83389                        (: 'validate-with-relax-ng' ':' NCName^Token :)
            or $state[$p:lk] = 83390                        (: 'validate-with-schematron' ':' NCName^Token :)
            or $state[$p:lk] = 83391                        (: 'validate-with-xml-schema' ':' NCName^Token :)
            or $state[$p:lk] = 83392                        (: 'variable' ':' NCName^Token :)
            or $state[$p:lk] = 83393                        (: 'viewport' ':' NCName^Token :)
            or $state[$p:lk] = 83394                        (: 'wrap' ':' NCName^Token :)
            or $state[$p:lk] = 83395                        (: 'wrap-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83396                        (: 'www-form-urldecode' ':' NCName^Token :)
            or $state[$p:lk] = 83397                        (: 'www-form-urlencode' ':' NCName^Token :)
            or $state[$p:lk] = 83398                        (: 'xinclude' ':' NCName^Token :)
            or $state[$p:lk] = 83399                        (: 'xquery' ':' NCName^Token :)
            or $state[$p:lk] = 83400                        (: 'xsl-formatter' ':' NCName^Token :)
            or $state[$p:lk] = 83401                        (: 'xslt' ':' NCName^Token :)
            or $state[$p:lk] = 230789                       (: NCName^Token ':' 'add-attribute' :)
            or $state[$p:lk] = 230798                       (: 'add-attribute' ':' 'add-attribute' :)
            or $state[$p:lk] = 230799                       (: 'add-xml-base' ':' 'add-attribute' :)
            or $state[$p:lk] = 230801                       (: 'compare' ':' 'add-attribute' :)
            or $state[$p:lk] = 230802                       (: 'count' ':' 'add-attribute' :)
            or $state[$p:lk] = 230803                       (: 'default' ':' 'add-attribute' :)
            or $state[$p:lk] = 230804                       (: 'delete' ':' 'add-attribute' :)
            or $state[$p:lk] = 230805                       (: 'directory-list' ':' 'add-attribute' :)
            or $state[$p:lk] = 230807                       (: 'else' ':' 'add-attribute' :)
            or $state[$p:lk] = 230809                       (: 'error' ':' 'add-attribute' :)
            or $state[$p:lk] = 230810                       (: 'escape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 230811                       (: 'exec' ':' 'add-attribute' :)
            or $state[$p:lk] = 230812                       (: 'filter' ':' 'add-attribute' :)
            or $state[$p:lk] = 230813                       (: 'for-each' ':' 'add-attribute' :)
            or $state[$p:lk] = 230815                       (: 'hash' ':' 'add-attribute' :)
            or $state[$p:lk] = 230816                       (: 'http-request' ':' 'add-attribute' :)
            or $state[$p:lk] = 230817                       (: 'identity' ':' 'add-attribute' :)
            or $state[$p:lk] = 230818                       (: 'if' ':' 'add-attribute' :)
            or $state[$p:lk] = 230819                       (: 'insert' ':' 'add-attribute' :)
            or $state[$p:lk] = 230821                       (: 'label-elements' ':' 'add-attribute' :)
            or $state[$p:lk] = 230822                       (: 'library' ':' 'add-attribute' :)
            or $state[$p:lk] = 230823                       (: 'load' ':' 'add-attribute' :)
            or $state[$p:lk] = 230824                       (: 'make-absolute-uris' ':' 'add-attribute' :)
            or $state[$p:lk] = 230825                       (: 'namespace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230826                       (: 'namespace-rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 230827                       (: 'pack' ':' 'add-attribute' :)
            or $state[$p:lk] = 230828                       (: 'parameters' ':' 'add-attribute' :)
            or $state[$p:lk] = 230830                       (: 'pipeline' ':' 'add-attribute' :)
            or $state[$p:lk] = 230832                       (: 'rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 230833                       (: 'replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230835                       (: 'set-attributes' ':' 'add-attribute' :)
            or $state[$p:lk] = 230836                       (: 'sink' ':' 'add-attribute' :)
            or $state[$p:lk] = 230837                       (: 'split-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 230838                       (: 'step' ':' 'add-attribute' :)
            or $state[$p:lk] = 230839                       (: 'store' ':' 'add-attribute' :)
            or $state[$p:lk] = 230840                       (: 'string-replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 230841                       (: 'try' ':' 'add-attribute' :)
            or $state[$p:lk] = 230842                       (: 'unescape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 230843                       (: 'unwrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 230844                       (: 'uuid' ':' 'add-attribute' :)
            or $state[$p:lk] = 230845                       (: 'validate-with-relax-ng' ':' 'add-attribute' :)
            or $state[$p:lk] = 230846                       (: 'validate-with-schematron' ':' 'add-attribute' :)
            or $state[$p:lk] = 230847                       (: 'validate-with-xml-schema' ':' 'add-attribute' :)
            or $state[$p:lk] = 230848                       (: 'variable' ':' 'add-attribute' :)
            or $state[$p:lk] = 230849                       (: 'viewport' ':' 'add-attribute' :)
            or $state[$p:lk] = 230850                       (: 'wrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 230851                       (: 'wrap-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 230852                       (: 'www-form-urldecode' ':' 'add-attribute' :)
            or $state[$p:lk] = 230853                       (: 'www-form-urlencode' ':' 'add-attribute' :)
            or $state[$p:lk] = 230854                       (: 'xinclude' ':' 'add-attribute' :)
            or $state[$p:lk] = 230855                       (: 'xquery' ':' 'add-attribute' :)
            or $state[$p:lk] = 230856                       (: 'xsl-formatter' ':' 'add-attribute' :)
            or $state[$p:lk] = 230857                       (: 'xslt' ':' 'add-attribute' :)
            or $state[$p:lk] = 247173                       (: NCName^Token ':' 'add-xml-base' :)
            or $state[$p:lk] = 247182                       (: 'add-attribute' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247183                       (: 'add-xml-base' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247185                       (: 'compare' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247186                       (: 'count' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247187                       (: 'default' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247188                       (: 'delete' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247189                       (: 'directory-list' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247191                       (: 'else' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247193                       (: 'error' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247194                       (: 'escape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247195                       (: 'exec' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247196                       (: 'filter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247197                       (: 'for-each' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247199                       (: 'hash' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247200                       (: 'http-request' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247201                       (: 'identity' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247202                       (: 'if' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247203                       (: 'insert' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247205                       (: 'label-elements' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247206                       (: 'library' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247207                       (: 'load' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247208                       (: 'make-absolute-uris' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247209                       (: 'namespace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247210                       (: 'namespace-rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247211                       (: 'pack' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247212                       (: 'parameters' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247214                       (: 'pipeline' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247216                       (: 'rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247217                       (: 'replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247219                       (: 'set-attributes' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247220                       (: 'sink' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247221                       (: 'split-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247222                       (: 'step' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247223                       (: 'store' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247224                       (: 'string-replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247225                       (: 'try' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247226                       (: 'unescape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247227                       (: 'unwrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247228                       (: 'uuid' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247229                       (: 'validate-with-relax-ng' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247230                       (: 'validate-with-schematron' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247231                       (: 'validate-with-xml-schema' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247232                       (: 'variable' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247233                       (: 'viewport' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247234                       (: 'wrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247235                       (: 'wrap-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247236                       (: 'www-form-urldecode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247237                       (: 'www-form-urlencode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247238                       (: 'xinclude' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247239                       (: 'xquery' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247240                       (: 'xsl-formatter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 247241                       (: 'xslt' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279941                       (: NCName^Token ':' 'compare' :)
            or $state[$p:lk] = 279950                       (: 'add-attribute' ':' 'compare' :)
            or $state[$p:lk] = 279951                       (: 'add-xml-base' ':' 'compare' :)
            or $state[$p:lk] = 279953                       (: 'compare' ':' 'compare' :)
            or $state[$p:lk] = 279954                       (: 'count' ':' 'compare' :)
            or $state[$p:lk] = 279955                       (: 'default' ':' 'compare' :)
            or $state[$p:lk] = 279956                       (: 'delete' ':' 'compare' :)
            or $state[$p:lk] = 279957                       (: 'directory-list' ':' 'compare' :)
            or $state[$p:lk] = 279959                       (: 'else' ':' 'compare' :)
            or $state[$p:lk] = 279961                       (: 'error' ':' 'compare' :)
            or $state[$p:lk] = 279962                       (: 'escape-markup' ':' 'compare' :)
            or $state[$p:lk] = 279963                       (: 'exec' ':' 'compare' :)
            or $state[$p:lk] = 279964                       (: 'filter' ':' 'compare' :)
            or $state[$p:lk] = 279965                       (: 'for-each' ':' 'compare' :)
            or $state[$p:lk] = 279967                       (: 'hash' ':' 'compare' :)
            or $state[$p:lk] = 279968                       (: 'http-request' ':' 'compare' :)
            or $state[$p:lk] = 279969                       (: 'identity' ':' 'compare' :)
            or $state[$p:lk] = 279970                       (: 'if' ':' 'compare' :)
            or $state[$p:lk] = 279971                       (: 'insert' ':' 'compare' :)
            or $state[$p:lk] = 279973                       (: 'label-elements' ':' 'compare' :)
            or $state[$p:lk] = 279974                       (: 'library' ':' 'compare' :)
            or $state[$p:lk] = 279975                       (: 'load' ':' 'compare' :)
            or $state[$p:lk] = 279976                       (: 'make-absolute-uris' ':' 'compare' :)
            or $state[$p:lk] = 279977                       (: 'namespace' ':' 'compare' :)
            or $state[$p:lk] = 279978                       (: 'namespace-rename' ':' 'compare' :)
            or $state[$p:lk] = 279979                       (: 'pack' ':' 'compare' :)
            or $state[$p:lk] = 279980                       (: 'parameters' ':' 'compare' :)
            or $state[$p:lk] = 279982                       (: 'pipeline' ':' 'compare' :)
            or $state[$p:lk] = 279984                       (: 'rename' ':' 'compare' :)
            or $state[$p:lk] = 279985                       (: 'replace' ':' 'compare' :)
            or $state[$p:lk] = 279987                       (: 'set-attributes' ':' 'compare' :)
            or $state[$p:lk] = 279988                       (: 'sink' ':' 'compare' :)
            or $state[$p:lk] = 279989                       (: 'split-sequence' ':' 'compare' :)
            or $state[$p:lk] = 279990                       (: 'step' ':' 'compare' :)
            or $state[$p:lk] = 279991                       (: 'store' ':' 'compare' :)
            or $state[$p:lk] = 279992                       (: 'string-replace' ':' 'compare' :)
            or $state[$p:lk] = 279993                       (: 'try' ':' 'compare' :)
            or $state[$p:lk] = 279994                       (: 'unescape-markup' ':' 'compare' :)
            or $state[$p:lk] = 279995                       (: 'unwrap' ':' 'compare' :)
            or $state[$p:lk] = 279996                       (: 'uuid' ':' 'compare' :)
            or $state[$p:lk] = 279997                       (: 'validate-with-relax-ng' ':' 'compare' :)
            or $state[$p:lk] = 279998                       (: 'validate-with-schematron' ':' 'compare' :)
            or $state[$p:lk] = 279999                       (: 'validate-with-xml-schema' ':' 'compare' :)
            or $state[$p:lk] = 280000                       (: 'variable' ':' 'compare' :)
            or $state[$p:lk] = 280001                       (: 'viewport' ':' 'compare' :)
            or $state[$p:lk] = 280002                       (: 'wrap' ':' 'compare' :)
            or $state[$p:lk] = 280003                       (: 'wrap-sequence' ':' 'compare' :)
            or $state[$p:lk] = 280004                       (: 'www-form-urldecode' ':' 'compare' :)
            or $state[$p:lk] = 280005                       (: 'www-form-urlencode' ':' 'compare' :)
            or $state[$p:lk] = 280006                       (: 'xinclude' ':' 'compare' :)
            or $state[$p:lk] = 280007                       (: 'xquery' ':' 'compare' :)
            or $state[$p:lk] = 280008                       (: 'xsl-formatter' ':' 'compare' :)
            or $state[$p:lk] = 280009                       (: 'xslt' ':' 'compare' :)
            or $state[$p:lk] = 296325                       (: NCName^Token ':' 'count' :)
            or $state[$p:lk] = 296334                       (: 'add-attribute' ':' 'count' :)
            or $state[$p:lk] = 296335                       (: 'add-xml-base' ':' 'count' :)
            or $state[$p:lk] = 296337                       (: 'compare' ':' 'count' :)
            or $state[$p:lk] = 296338                       (: 'count' ':' 'count' :)
            or $state[$p:lk] = 296339                       (: 'default' ':' 'count' :)
            or $state[$p:lk] = 296340                       (: 'delete' ':' 'count' :)
            or $state[$p:lk] = 296341                       (: 'directory-list' ':' 'count' :)
            or $state[$p:lk] = 296343                       (: 'else' ':' 'count' :)
            or $state[$p:lk] = 296345                       (: 'error' ':' 'count' :)
            or $state[$p:lk] = 296346                       (: 'escape-markup' ':' 'count' :)
            or $state[$p:lk] = 296347                       (: 'exec' ':' 'count' :)
            or $state[$p:lk] = 296348                       (: 'filter' ':' 'count' :)
            or $state[$p:lk] = 296349                       (: 'for-each' ':' 'count' :)
            or $state[$p:lk] = 296351                       (: 'hash' ':' 'count' :)
            or $state[$p:lk] = 296352                       (: 'http-request' ':' 'count' :)
            or $state[$p:lk] = 296353                       (: 'identity' ':' 'count' :)
            or $state[$p:lk] = 296354                       (: 'if' ':' 'count' :)
            or $state[$p:lk] = 296355                       (: 'insert' ':' 'count' :)
            or $state[$p:lk] = 296357                       (: 'label-elements' ':' 'count' :)
            or $state[$p:lk] = 296358                       (: 'library' ':' 'count' :)
            or $state[$p:lk] = 296359                       (: 'load' ':' 'count' :)
            or $state[$p:lk] = 296360                       (: 'make-absolute-uris' ':' 'count' :)
            or $state[$p:lk] = 296361                       (: 'namespace' ':' 'count' :)
            or $state[$p:lk] = 296362                       (: 'namespace-rename' ':' 'count' :)
            or $state[$p:lk] = 296363                       (: 'pack' ':' 'count' :)
            or $state[$p:lk] = 296364                       (: 'parameters' ':' 'count' :)
            or $state[$p:lk] = 296366                       (: 'pipeline' ':' 'count' :)
            or $state[$p:lk] = 296368                       (: 'rename' ':' 'count' :)
            or $state[$p:lk] = 296369                       (: 'replace' ':' 'count' :)
            or $state[$p:lk] = 296371                       (: 'set-attributes' ':' 'count' :)
            or $state[$p:lk] = 296372                       (: 'sink' ':' 'count' :)
            or $state[$p:lk] = 296373                       (: 'split-sequence' ':' 'count' :)
            or $state[$p:lk] = 296374                       (: 'step' ':' 'count' :)
            or $state[$p:lk] = 296375                       (: 'store' ':' 'count' :)
            or $state[$p:lk] = 296376                       (: 'string-replace' ':' 'count' :)
            or $state[$p:lk] = 296377                       (: 'try' ':' 'count' :)
            or $state[$p:lk] = 296378                       (: 'unescape-markup' ':' 'count' :)
            or $state[$p:lk] = 296379                       (: 'unwrap' ':' 'count' :)
            or $state[$p:lk] = 296380                       (: 'uuid' ':' 'count' :)
            or $state[$p:lk] = 296381                       (: 'validate-with-relax-ng' ':' 'count' :)
            or $state[$p:lk] = 296382                       (: 'validate-with-schematron' ':' 'count' :)
            or $state[$p:lk] = 296383                       (: 'validate-with-xml-schema' ':' 'count' :)
            or $state[$p:lk] = 296384                       (: 'variable' ':' 'count' :)
            or $state[$p:lk] = 296385                       (: 'viewport' ':' 'count' :)
            or $state[$p:lk] = 296386                       (: 'wrap' ':' 'count' :)
            or $state[$p:lk] = 296387                       (: 'wrap-sequence' ':' 'count' :)
            or $state[$p:lk] = 296388                       (: 'www-form-urldecode' ':' 'count' :)
            or $state[$p:lk] = 296389                       (: 'www-form-urlencode' ':' 'count' :)
            or $state[$p:lk] = 296390                       (: 'xinclude' ':' 'count' :)
            or $state[$p:lk] = 296391                       (: 'xquery' ':' 'count' :)
            or $state[$p:lk] = 296392                       (: 'xsl-formatter' ':' 'count' :)
            or $state[$p:lk] = 296393                       (: 'xslt' ':' 'count' :)
            or $state[$p:lk] = 312709                       (: NCName^Token ':' 'default' :)
            or $state[$p:lk] = 312718                       (: 'add-attribute' ':' 'default' :)
            or $state[$p:lk] = 312719                       (: 'add-xml-base' ':' 'default' :)
            or $state[$p:lk] = 312721                       (: 'compare' ':' 'default' :)
            or $state[$p:lk] = 312722                       (: 'count' ':' 'default' :)
            or $state[$p:lk] = 312723                       (: 'default' ':' 'default' :)
            or $state[$p:lk] = 312724                       (: 'delete' ':' 'default' :)
            or $state[$p:lk] = 312725                       (: 'directory-list' ':' 'default' :)
            or $state[$p:lk] = 312727                       (: 'else' ':' 'default' :)
            or $state[$p:lk] = 312729                       (: 'error' ':' 'default' :)
            or $state[$p:lk] = 312730                       (: 'escape-markup' ':' 'default' :)
            or $state[$p:lk] = 312731                       (: 'exec' ':' 'default' :)
            or $state[$p:lk] = 312732                       (: 'filter' ':' 'default' :)
            or $state[$p:lk] = 312733                       (: 'for-each' ':' 'default' :)
            or $state[$p:lk] = 312735                       (: 'hash' ':' 'default' :)
            or $state[$p:lk] = 312736                       (: 'http-request' ':' 'default' :)
            or $state[$p:lk] = 312737                       (: 'identity' ':' 'default' :)
            or $state[$p:lk] = 312738                       (: 'if' ':' 'default' :)
            or $state[$p:lk] = 312739                       (: 'insert' ':' 'default' :)
            or $state[$p:lk] = 312741                       (: 'label-elements' ':' 'default' :)
            or $state[$p:lk] = 312742                       (: 'library' ':' 'default' :)
            or $state[$p:lk] = 312743                       (: 'load' ':' 'default' :)
            or $state[$p:lk] = 312744                       (: 'make-absolute-uris' ':' 'default' :)
            or $state[$p:lk] = 312745                       (: 'namespace' ':' 'default' :)
            or $state[$p:lk] = 312746                       (: 'namespace-rename' ':' 'default' :)
            or $state[$p:lk] = 312747                       (: 'pack' ':' 'default' :)
            or $state[$p:lk] = 312748                       (: 'parameters' ':' 'default' :)
            or $state[$p:lk] = 312750                       (: 'pipeline' ':' 'default' :)
            or $state[$p:lk] = 312752                       (: 'rename' ':' 'default' :)
            or $state[$p:lk] = 312753                       (: 'replace' ':' 'default' :)
            or $state[$p:lk] = 312755                       (: 'set-attributes' ':' 'default' :)
            or $state[$p:lk] = 312756                       (: 'sink' ':' 'default' :)
            or $state[$p:lk] = 312757                       (: 'split-sequence' ':' 'default' :)
            or $state[$p:lk] = 312758                       (: 'step' ':' 'default' :)
            or $state[$p:lk] = 312759                       (: 'store' ':' 'default' :)
            or $state[$p:lk] = 312760                       (: 'string-replace' ':' 'default' :)
            or $state[$p:lk] = 312761                       (: 'try' ':' 'default' :)
            or $state[$p:lk] = 312762                       (: 'unescape-markup' ':' 'default' :)
            or $state[$p:lk] = 312763                       (: 'unwrap' ':' 'default' :)
            or $state[$p:lk] = 312764                       (: 'uuid' ':' 'default' :)
            or $state[$p:lk] = 312765                       (: 'validate-with-relax-ng' ':' 'default' :)
            or $state[$p:lk] = 312766                       (: 'validate-with-schematron' ':' 'default' :)
            or $state[$p:lk] = 312767                       (: 'validate-with-xml-schema' ':' 'default' :)
            or $state[$p:lk] = 312768                       (: 'variable' ':' 'default' :)
            or $state[$p:lk] = 312769                       (: 'viewport' ':' 'default' :)
            or $state[$p:lk] = 312770                       (: 'wrap' ':' 'default' :)
            or $state[$p:lk] = 312771                       (: 'wrap-sequence' ':' 'default' :)
            or $state[$p:lk] = 312772                       (: 'www-form-urldecode' ':' 'default' :)
            or $state[$p:lk] = 312773                       (: 'www-form-urlencode' ':' 'default' :)
            or $state[$p:lk] = 312774                       (: 'xinclude' ':' 'default' :)
            or $state[$p:lk] = 312775                       (: 'xquery' ':' 'default' :)
            or $state[$p:lk] = 312776                       (: 'xsl-formatter' ':' 'default' :)
            or $state[$p:lk] = 312777                       (: 'xslt' ':' 'default' :)
            or $state[$p:lk] = 329093                       (: NCName^Token ':' 'delete' :)
            or $state[$p:lk] = 329102                       (: 'add-attribute' ':' 'delete' :)
            or $state[$p:lk] = 329103                       (: 'add-xml-base' ':' 'delete' :)
            or $state[$p:lk] = 329105                       (: 'compare' ':' 'delete' :)
            or $state[$p:lk] = 329106                       (: 'count' ':' 'delete' :)
            or $state[$p:lk] = 329107                       (: 'default' ':' 'delete' :)
            or $state[$p:lk] = 329108                       (: 'delete' ':' 'delete' :)
            or $state[$p:lk] = 329109                       (: 'directory-list' ':' 'delete' :)
            or $state[$p:lk] = 329111                       (: 'else' ':' 'delete' :)
            or $state[$p:lk] = 329113                       (: 'error' ':' 'delete' :)
            or $state[$p:lk] = 329114                       (: 'escape-markup' ':' 'delete' :)
            or $state[$p:lk] = 329115                       (: 'exec' ':' 'delete' :)
            or $state[$p:lk] = 329116                       (: 'filter' ':' 'delete' :)
            or $state[$p:lk] = 329117                       (: 'for-each' ':' 'delete' :)
            or $state[$p:lk] = 329119                       (: 'hash' ':' 'delete' :)
            or $state[$p:lk] = 329120                       (: 'http-request' ':' 'delete' :)
            or $state[$p:lk] = 329121                       (: 'identity' ':' 'delete' :)
            or $state[$p:lk] = 329122                       (: 'if' ':' 'delete' :)
            or $state[$p:lk] = 329123                       (: 'insert' ':' 'delete' :)
            or $state[$p:lk] = 329125                       (: 'label-elements' ':' 'delete' :)
            or $state[$p:lk] = 329126                       (: 'library' ':' 'delete' :)
            or $state[$p:lk] = 329127                       (: 'load' ':' 'delete' :)
            or $state[$p:lk] = 329128                       (: 'make-absolute-uris' ':' 'delete' :)
            or $state[$p:lk] = 329129                       (: 'namespace' ':' 'delete' :)
            or $state[$p:lk] = 329130                       (: 'namespace-rename' ':' 'delete' :)
            or $state[$p:lk] = 329131                       (: 'pack' ':' 'delete' :)
            or $state[$p:lk] = 329132                       (: 'parameters' ':' 'delete' :)
            or $state[$p:lk] = 329134                       (: 'pipeline' ':' 'delete' :)
            or $state[$p:lk] = 329136                       (: 'rename' ':' 'delete' :)
            or $state[$p:lk] = 329137                       (: 'replace' ':' 'delete' :)
            or $state[$p:lk] = 329139                       (: 'set-attributes' ':' 'delete' :)
            or $state[$p:lk] = 329140                       (: 'sink' ':' 'delete' :)
            or $state[$p:lk] = 329141                       (: 'split-sequence' ':' 'delete' :)
            or $state[$p:lk] = 329142                       (: 'step' ':' 'delete' :)
            or $state[$p:lk] = 329143                       (: 'store' ':' 'delete' :)
            or $state[$p:lk] = 329144                       (: 'string-replace' ':' 'delete' :)
            or $state[$p:lk] = 329145                       (: 'try' ':' 'delete' :)
            or $state[$p:lk] = 329146                       (: 'unescape-markup' ':' 'delete' :)
            or $state[$p:lk] = 329147                       (: 'unwrap' ':' 'delete' :)
            or $state[$p:lk] = 329148                       (: 'uuid' ':' 'delete' :)
            or $state[$p:lk] = 329149                       (: 'validate-with-relax-ng' ':' 'delete' :)
            or $state[$p:lk] = 329150                       (: 'validate-with-schematron' ':' 'delete' :)
            or $state[$p:lk] = 329151                       (: 'validate-with-xml-schema' ':' 'delete' :)
            or $state[$p:lk] = 329152                       (: 'variable' ':' 'delete' :)
            or $state[$p:lk] = 329153                       (: 'viewport' ':' 'delete' :)
            or $state[$p:lk] = 329154                       (: 'wrap' ':' 'delete' :)
            or $state[$p:lk] = 329155                       (: 'wrap-sequence' ':' 'delete' :)
            or $state[$p:lk] = 329156                       (: 'www-form-urldecode' ':' 'delete' :)
            or $state[$p:lk] = 329157                       (: 'www-form-urlencode' ':' 'delete' :)
            or $state[$p:lk] = 329158                       (: 'xinclude' ':' 'delete' :)
            or $state[$p:lk] = 329159                       (: 'xquery' ':' 'delete' :)
            or $state[$p:lk] = 329160                       (: 'xsl-formatter' ':' 'delete' :)
            or $state[$p:lk] = 329161                       (: 'xslt' ':' 'delete' :)
            or $state[$p:lk] = 345477                       (: NCName^Token ':' 'directory-list' :)
            or $state[$p:lk] = 345486                       (: 'add-attribute' ':' 'directory-list' :)
            or $state[$p:lk] = 345487                       (: 'add-xml-base' ':' 'directory-list' :)
            or $state[$p:lk] = 345489                       (: 'compare' ':' 'directory-list' :)
            or $state[$p:lk] = 345490                       (: 'count' ':' 'directory-list' :)
            or $state[$p:lk] = 345491                       (: 'default' ':' 'directory-list' :)
            or $state[$p:lk] = 345492                       (: 'delete' ':' 'directory-list' :)
            or $state[$p:lk] = 345493                       (: 'directory-list' ':' 'directory-list' :)
            or $state[$p:lk] = 345495                       (: 'else' ':' 'directory-list' :)
            or $state[$p:lk] = 345497                       (: 'error' ':' 'directory-list' :)
            or $state[$p:lk] = 345498                       (: 'escape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 345499                       (: 'exec' ':' 'directory-list' :)
            or $state[$p:lk] = 345500                       (: 'filter' ':' 'directory-list' :)
            or $state[$p:lk] = 345501                       (: 'for-each' ':' 'directory-list' :)
            or $state[$p:lk] = 345503                       (: 'hash' ':' 'directory-list' :)
            or $state[$p:lk] = 345504                       (: 'http-request' ':' 'directory-list' :)
            or $state[$p:lk] = 345505                       (: 'identity' ':' 'directory-list' :)
            or $state[$p:lk] = 345506                       (: 'if' ':' 'directory-list' :)
            or $state[$p:lk] = 345507                       (: 'insert' ':' 'directory-list' :)
            or $state[$p:lk] = 345509                       (: 'label-elements' ':' 'directory-list' :)
            or $state[$p:lk] = 345510                       (: 'library' ':' 'directory-list' :)
            or $state[$p:lk] = 345511                       (: 'load' ':' 'directory-list' :)
            or $state[$p:lk] = 345512                       (: 'make-absolute-uris' ':' 'directory-list' :)
            or $state[$p:lk] = 345513                       (: 'namespace' ':' 'directory-list' :)
            or $state[$p:lk] = 345514                       (: 'namespace-rename' ':' 'directory-list' :)
            or $state[$p:lk] = 345515                       (: 'pack' ':' 'directory-list' :)
            or $state[$p:lk] = 345516                       (: 'parameters' ':' 'directory-list' :)
            or $state[$p:lk] = 345518                       (: 'pipeline' ':' 'directory-list' :)
            or $state[$p:lk] = 345520                       (: 'rename' ':' 'directory-list' :)
            or $state[$p:lk] = 345521                       (: 'replace' ':' 'directory-list' :)
            or $state[$p:lk] = 345523                       (: 'set-attributes' ':' 'directory-list' :)
            or $state[$p:lk] = 345524                       (: 'sink' ':' 'directory-list' :)
            or $state[$p:lk] = 345525                       (: 'split-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 345526                       (: 'step' ':' 'directory-list' :)
            or $state[$p:lk] = 345527                       (: 'store' ':' 'directory-list' :)
            or $state[$p:lk] = 345528                       (: 'string-replace' ':' 'directory-list' :)
            or $state[$p:lk] = 345529                       (: 'try' ':' 'directory-list' :)
            or $state[$p:lk] = 345530                       (: 'unescape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 345531                       (: 'unwrap' ':' 'directory-list' :)
            or $state[$p:lk] = 345532                       (: 'uuid' ':' 'directory-list' :)
            or $state[$p:lk] = 345533                       (: 'validate-with-relax-ng' ':' 'directory-list' :)
            or $state[$p:lk] = 345534                       (: 'validate-with-schematron' ':' 'directory-list' :)
            or $state[$p:lk] = 345535                       (: 'validate-with-xml-schema' ':' 'directory-list' :)
            or $state[$p:lk] = 345536                       (: 'variable' ':' 'directory-list' :)
            or $state[$p:lk] = 345537                       (: 'viewport' ':' 'directory-list' :)
            or $state[$p:lk] = 345538                       (: 'wrap' ':' 'directory-list' :)
            or $state[$p:lk] = 345539                       (: 'wrap-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 345540                       (: 'www-form-urldecode' ':' 'directory-list' :)
            or $state[$p:lk] = 345541                       (: 'www-form-urlencode' ':' 'directory-list' :)
            or $state[$p:lk] = 345542                       (: 'xinclude' ':' 'directory-list' :)
            or $state[$p:lk] = 345543                       (: 'xquery' ':' 'directory-list' :)
            or $state[$p:lk] = 345544                       (: 'xsl-formatter' ':' 'directory-list' :)
            or $state[$p:lk] = 345545                       (: 'xslt' ':' 'directory-list' :)
            or $state[$p:lk] = 378245                       (: NCName^Token ':' 'else' :)
            or $state[$p:lk] = 378254                       (: 'add-attribute' ':' 'else' :)
            or $state[$p:lk] = 378255                       (: 'add-xml-base' ':' 'else' :)
            or $state[$p:lk] = 378257                       (: 'compare' ':' 'else' :)
            or $state[$p:lk] = 378258                       (: 'count' ':' 'else' :)
            or $state[$p:lk] = 378259                       (: 'default' ':' 'else' :)
            or $state[$p:lk] = 378260                       (: 'delete' ':' 'else' :)
            or $state[$p:lk] = 378261                       (: 'directory-list' ':' 'else' :)
            or $state[$p:lk] = 378263                       (: 'else' ':' 'else' :)
            or $state[$p:lk] = 378265                       (: 'error' ':' 'else' :)
            or $state[$p:lk] = 378266                       (: 'escape-markup' ':' 'else' :)
            or $state[$p:lk] = 378267                       (: 'exec' ':' 'else' :)
            or $state[$p:lk] = 378268                       (: 'filter' ':' 'else' :)
            or $state[$p:lk] = 378269                       (: 'for-each' ':' 'else' :)
            or $state[$p:lk] = 378271                       (: 'hash' ':' 'else' :)
            or $state[$p:lk] = 378272                       (: 'http-request' ':' 'else' :)
            or $state[$p:lk] = 378273                       (: 'identity' ':' 'else' :)
            or $state[$p:lk] = 378274                       (: 'if' ':' 'else' :)
            or $state[$p:lk] = 378275                       (: 'insert' ':' 'else' :)
            or $state[$p:lk] = 378277                       (: 'label-elements' ':' 'else' :)
            or $state[$p:lk] = 378278                       (: 'library' ':' 'else' :)
            or $state[$p:lk] = 378279                       (: 'load' ':' 'else' :)
            or $state[$p:lk] = 378280                       (: 'make-absolute-uris' ':' 'else' :)
            or $state[$p:lk] = 378281                       (: 'namespace' ':' 'else' :)
            or $state[$p:lk] = 378282                       (: 'namespace-rename' ':' 'else' :)
            or $state[$p:lk] = 378283                       (: 'pack' ':' 'else' :)
            or $state[$p:lk] = 378284                       (: 'parameters' ':' 'else' :)
            or $state[$p:lk] = 378286                       (: 'pipeline' ':' 'else' :)
            or $state[$p:lk] = 378288                       (: 'rename' ':' 'else' :)
            or $state[$p:lk] = 378289                       (: 'replace' ':' 'else' :)
            or $state[$p:lk] = 378291                       (: 'set-attributes' ':' 'else' :)
            or $state[$p:lk] = 378292                       (: 'sink' ':' 'else' :)
            or $state[$p:lk] = 378293                       (: 'split-sequence' ':' 'else' :)
            or $state[$p:lk] = 378294                       (: 'step' ':' 'else' :)
            or $state[$p:lk] = 378295                       (: 'store' ':' 'else' :)
            or $state[$p:lk] = 378296                       (: 'string-replace' ':' 'else' :)
            or $state[$p:lk] = 378297                       (: 'try' ':' 'else' :)
            or $state[$p:lk] = 378298                       (: 'unescape-markup' ':' 'else' :)
            or $state[$p:lk] = 378299                       (: 'unwrap' ':' 'else' :)
            or $state[$p:lk] = 378300                       (: 'uuid' ':' 'else' :)
            or $state[$p:lk] = 378301                       (: 'validate-with-relax-ng' ':' 'else' :)
            or $state[$p:lk] = 378302                       (: 'validate-with-schematron' ':' 'else' :)
            or $state[$p:lk] = 378303                       (: 'validate-with-xml-schema' ':' 'else' :)
            or $state[$p:lk] = 378304                       (: 'variable' ':' 'else' :)
            or $state[$p:lk] = 378305                       (: 'viewport' ':' 'else' :)
            or $state[$p:lk] = 378306                       (: 'wrap' ':' 'else' :)
            or $state[$p:lk] = 378307                       (: 'wrap-sequence' ':' 'else' :)
            or $state[$p:lk] = 378308                       (: 'www-form-urldecode' ':' 'else' :)
            or $state[$p:lk] = 378309                       (: 'www-form-urlencode' ':' 'else' :)
            or $state[$p:lk] = 378310                       (: 'xinclude' ':' 'else' :)
            or $state[$p:lk] = 378311                       (: 'xquery' ':' 'else' :)
            or $state[$p:lk] = 378312                       (: 'xsl-formatter' ':' 'else' :)
            or $state[$p:lk] = 378313                       (: 'xslt' ':' 'else' :)
            or $state[$p:lk] = 411013                       (: NCName^Token ':' 'error' :)
            or $state[$p:lk] = 411022                       (: 'add-attribute' ':' 'error' :)
            or $state[$p:lk] = 411023                       (: 'add-xml-base' ':' 'error' :)
            or $state[$p:lk] = 411025                       (: 'compare' ':' 'error' :)
            or $state[$p:lk] = 411026                       (: 'count' ':' 'error' :)
            or $state[$p:lk] = 411027                       (: 'default' ':' 'error' :)
            or $state[$p:lk] = 411028                       (: 'delete' ':' 'error' :)
            or $state[$p:lk] = 411029                       (: 'directory-list' ':' 'error' :)
            or $state[$p:lk] = 411031                       (: 'else' ':' 'error' :)
            or $state[$p:lk] = 411033                       (: 'error' ':' 'error' :)
            or $state[$p:lk] = 411034                       (: 'escape-markup' ':' 'error' :)
            or $state[$p:lk] = 411035                       (: 'exec' ':' 'error' :)
            or $state[$p:lk] = 411036                       (: 'filter' ':' 'error' :)
            or $state[$p:lk] = 411037                       (: 'for-each' ':' 'error' :)
            or $state[$p:lk] = 411039                       (: 'hash' ':' 'error' :)
            or $state[$p:lk] = 411040                       (: 'http-request' ':' 'error' :)
            or $state[$p:lk] = 411041                       (: 'identity' ':' 'error' :)
            or $state[$p:lk] = 411042                       (: 'if' ':' 'error' :)
            or $state[$p:lk] = 411043                       (: 'insert' ':' 'error' :)
            or $state[$p:lk] = 411045                       (: 'label-elements' ':' 'error' :)
            or $state[$p:lk] = 411046                       (: 'library' ':' 'error' :)
            or $state[$p:lk] = 411047                       (: 'load' ':' 'error' :)
            or $state[$p:lk] = 411048                       (: 'make-absolute-uris' ':' 'error' :)
            or $state[$p:lk] = 411049                       (: 'namespace' ':' 'error' :)
            or $state[$p:lk] = 411050                       (: 'namespace-rename' ':' 'error' :)
            or $state[$p:lk] = 411051                       (: 'pack' ':' 'error' :)
            or $state[$p:lk] = 411052                       (: 'parameters' ':' 'error' :)
            or $state[$p:lk] = 411054                       (: 'pipeline' ':' 'error' :)
            or $state[$p:lk] = 411056                       (: 'rename' ':' 'error' :)
            or $state[$p:lk] = 411057                       (: 'replace' ':' 'error' :)
            or $state[$p:lk] = 411059                       (: 'set-attributes' ':' 'error' :)
            or $state[$p:lk] = 411060                       (: 'sink' ':' 'error' :)
            or $state[$p:lk] = 411061                       (: 'split-sequence' ':' 'error' :)
            or $state[$p:lk] = 411062                       (: 'step' ':' 'error' :)
            or $state[$p:lk] = 411063                       (: 'store' ':' 'error' :)
            or $state[$p:lk] = 411064                       (: 'string-replace' ':' 'error' :)
            or $state[$p:lk] = 411065                       (: 'try' ':' 'error' :)
            or $state[$p:lk] = 411066                       (: 'unescape-markup' ':' 'error' :)
            or $state[$p:lk] = 411067                       (: 'unwrap' ':' 'error' :)
            or $state[$p:lk] = 411068                       (: 'uuid' ':' 'error' :)
            or $state[$p:lk] = 411069                       (: 'validate-with-relax-ng' ':' 'error' :)
            or $state[$p:lk] = 411070                       (: 'validate-with-schematron' ':' 'error' :)
            or $state[$p:lk] = 411071                       (: 'validate-with-xml-schema' ':' 'error' :)
            or $state[$p:lk] = 411072                       (: 'variable' ':' 'error' :)
            or $state[$p:lk] = 411073                       (: 'viewport' ':' 'error' :)
            or $state[$p:lk] = 411074                       (: 'wrap' ':' 'error' :)
            or $state[$p:lk] = 411075                       (: 'wrap-sequence' ':' 'error' :)
            or $state[$p:lk] = 411076                       (: 'www-form-urldecode' ':' 'error' :)
            or $state[$p:lk] = 411077                       (: 'www-form-urlencode' ':' 'error' :)
            or $state[$p:lk] = 411078                       (: 'xinclude' ':' 'error' :)
            or $state[$p:lk] = 411079                       (: 'xquery' ':' 'error' :)
            or $state[$p:lk] = 411080                       (: 'xsl-formatter' ':' 'error' :)
            or $state[$p:lk] = 411081                       (: 'xslt' ':' 'error' :)
            or $state[$p:lk] = 427397                       (: NCName^Token ':' 'escape-markup' :)
            or $state[$p:lk] = 427406                       (: 'add-attribute' ':' 'escape-markup' :)
            or $state[$p:lk] = 427407                       (: 'add-xml-base' ':' 'escape-markup' :)
            or $state[$p:lk] = 427409                       (: 'compare' ':' 'escape-markup' :)
            or $state[$p:lk] = 427410                       (: 'count' ':' 'escape-markup' :)
            or $state[$p:lk] = 427411                       (: 'default' ':' 'escape-markup' :)
            or $state[$p:lk] = 427412                       (: 'delete' ':' 'escape-markup' :)
            or $state[$p:lk] = 427413                       (: 'directory-list' ':' 'escape-markup' :)
            or $state[$p:lk] = 427415                       (: 'else' ':' 'escape-markup' :)
            or $state[$p:lk] = 427417                       (: 'error' ':' 'escape-markup' :)
            or $state[$p:lk] = 427418                       (: 'escape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 427419                       (: 'exec' ':' 'escape-markup' :)
            or $state[$p:lk] = 427420                       (: 'filter' ':' 'escape-markup' :)
            or $state[$p:lk] = 427421                       (: 'for-each' ':' 'escape-markup' :)
            or $state[$p:lk] = 427423                       (: 'hash' ':' 'escape-markup' :)
            or $state[$p:lk] = 427424                       (: 'http-request' ':' 'escape-markup' :)
            or $state[$p:lk] = 427425                       (: 'identity' ':' 'escape-markup' :)
            or $state[$p:lk] = 427426                       (: 'if' ':' 'escape-markup' :)
            or $state[$p:lk] = 427427                       (: 'insert' ':' 'escape-markup' :)
            or $state[$p:lk] = 427429                       (: 'label-elements' ':' 'escape-markup' :)
            or $state[$p:lk] = 427430                       (: 'library' ':' 'escape-markup' :)
            or $state[$p:lk] = 427431                       (: 'load' ':' 'escape-markup' :)
            or $state[$p:lk] = 427432                       (: 'make-absolute-uris' ':' 'escape-markup' :)
            or $state[$p:lk] = 427433                       (: 'namespace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427434                       (: 'namespace-rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 427435                       (: 'pack' ':' 'escape-markup' :)
            or $state[$p:lk] = 427436                       (: 'parameters' ':' 'escape-markup' :)
            or $state[$p:lk] = 427438                       (: 'pipeline' ':' 'escape-markup' :)
            or $state[$p:lk] = 427440                       (: 'rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 427441                       (: 'replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427443                       (: 'set-attributes' ':' 'escape-markup' :)
            or $state[$p:lk] = 427444                       (: 'sink' ':' 'escape-markup' :)
            or $state[$p:lk] = 427445                       (: 'split-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 427446                       (: 'step' ':' 'escape-markup' :)
            or $state[$p:lk] = 427447                       (: 'store' ':' 'escape-markup' :)
            or $state[$p:lk] = 427448                       (: 'string-replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 427449                       (: 'try' ':' 'escape-markup' :)
            or $state[$p:lk] = 427450                       (: 'unescape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 427451                       (: 'unwrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 427452                       (: 'uuid' ':' 'escape-markup' :)
            or $state[$p:lk] = 427453                       (: 'validate-with-relax-ng' ':' 'escape-markup' :)
            or $state[$p:lk] = 427454                       (: 'validate-with-schematron' ':' 'escape-markup' :)
            or $state[$p:lk] = 427455                       (: 'validate-with-xml-schema' ':' 'escape-markup' :)
            or $state[$p:lk] = 427456                       (: 'variable' ':' 'escape-markup' :)
            or $state[$p:lk] = 427457                       (: 'viewport' ':' 'escape-markup' :)
            or $state[$p:lk] = 427458                       (: 'wrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 427459                       (: 'wrap-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 427460                       (: 'www-form-urldecode' ':' 'escape-markup' :)
            or $state[$p:lk] = 427461                       (: 'www-form-urlencode' ':' 'escape-markup' :)
            or $state[$p:lk] = 427462                       (: 'xinclude' ':' 'escape-markup' :)
            or $state[$p:lk] = 427463                       (: 'xquery' ':' 'escape-markup' :)
            or $state[$p:lk] = 427464                       (: 'xsl-formatter' ':' 'escape-markup' :)
            or $state[$p:lk] = 427465                       (: 'xslt' ':' 'escape-markup' :)
            or $state[$p:lk] = 443781                       (: NCName^Token ':' 'exec' :)
            or $state[$p:lk] = 443790                       (: 'add-attribute' ':' 'exec' :)
            or $state[$p:lk] = 443791                       (: 'add-xml-base' ':' 'exec' :)
            or $state[$p:lk] = 443793                       (: 'compare' ':' 'exec' :)
            or $state[$p:lk] = 443794                       (: 'count' ':' 'exec' :)
            or $state[$p:lk] = 443795                       (: 'default' ':' 'exec' :)
            or $state[$p:lk] = 443796                       (: 'delete' ':' 'exec' :)
            or $state[$p:lk] = 443797                       (: 'directory-list' ':' 'exec' :)
            or $state[$p:lk] = 443799                       (: 'else' ':' 'exec' :)
            or $state[$p:lk] = 443801                       (: 'error' ':' 'exec' :)
            or $state[$p:lk] = 443802                       (: 'escape-markup' ':' 'exec' :)
            or $state[$p:lk] = 443803                       (: 'exec' ':' 'exec' :)
            or $state[$p:lk] = 443804                       (: 'filter' ':' 'exec' :)
            or $state[$p:lk] = 443805                       (: 'for-each' ':' 'exec' :)
            or $state[$p:lk] = 443807                       (: 'hash' ':' 'exec' :)
            or $state[$p:lk] = 443808                       (: 'http-request' ':' 'exec' :)
            or $state[$p:lk] = 443809                       (: 'identity' ':' 'exec' :)
            or $state[$p:lk] = 443810                       (: 'if' ':' 'exec' :)
            or $state[$p:lk] = 443811                       (: 'insert' ':' 'exec' :)
            or $state[$p:lk] = 443813                       (: 'label-elements' ':' 'exec' :)
            or $state[$p:lk] = 443814                       (: 'library' ':' 'exec' :)
            or $state[$p:lk] = 443815                       (: 'load' ':' 'exec' :)
            or $state[$p:lk] = 443816                       (: 'make-absolute-uris' ':' 'exec' :)
            or $state[$p:lk] = 443817                       (: 'namespace' ':' 'exec' :)
            or $state[$p:lk] = 443818                       (: 'namespace-rename' ':' 'exec' :)
            or $state[$p:lk] = 443819                       (: 'pack' ':' 'exec' :)
            or $state[$p:lk] = 443820                       (: 'parameters' ':' 'exec' :)
            or $state[$p:lk] = 443822                       (: 'pipeline' ':' 'exec' :)
            or $state[$p:lk] = 443824                       (: 'rename' ':' 'exec' :)
            or $state[$p:lk] = 443825                       (: 'replace' ':' 'exec' :)
            or $state[$p:lk] = 443827                       (: 'set-attributes' ':' 'exec' :)
            or $state[$p:lk] = 443828                       (: 'sink' ':' 'exec' :)
            or $state[$p:lk] = 443829                       (: 'split-sequence' ':' 'exec' :)
            or $state[$p:lk] = 443830                       (: 'step' ':' 'exec' :)
            or $state[$p:lk] = 443831                       (: 'store' ':' 'exec' :)
            or $state[$p:lk] = 443832                       (: 'string-replace' ':' 'exec' :)
            or $state[$p:lk] = 443833                       (: 'try' ':' 'exec' :)
            or $state[$p:lk] = 443834                       (: 'unescape-markup' ':' 'exec' :)
            or $state[$p:lk] = 443835                       (: 'unwrap' ':' 'exec' :)
            or $state[$p:lk] = 443836                       (: 'uuid' ':' 'exec' :)
            or $state[$p:lk] = 443837                       (: 'validate-with-relax-ng' ':' 'exec' :)
            or $state[$p:lk] = 443838                       (: 'validate-with-schematron' ':' 'exec' :)
            or $state[$p:lk] = 443839                       (: 'validate-with-xml-schema' ':' 'exec' :)
            or $state[$p:lk] = 443840                       (: 'variable' ':' 'exec' :)
            or $state[$p:lk] = 443841                       (: 'viewport' ':' 'exec' :)
            or $state[$p:lk] = 443842                       (: 'wrap' ':' 'exec' :)
            or $state[$p:lk] = 443843                       (: 'wrap-sequence' ':' 'exec' :)
            or $state[$p:lk] = 443844                       (: 'www-form-urldecode' ':' 'exec' :)
            or $state[$p:lk] = 443845                       (: 'www-form-urlencode' ':' 'exec' :)
            or $state[$p:lk] = 443846                       (: 'xinclude' ':' 'exec' :)
            or $state[$p:lk] = 443847                       (: 'xquery' ':' 'exec' :)
            or $state[$p:lk] = 443848                       (: 'xsl-formatter' ':' 'exec' :)
            or $state[$p:lk] = 443849                       (: 'xslt' ':' 'exec' :)
            or $state[$p:lk] = 460165                       (: NCName^Token ':' 'filter' :)
            or $state[$p:lk] = 460174                       (: 'add-attribute' ':' 'filter' :)
            or $state[$p:lk] = 460175                       (: 'add-xml-base' ':' 'filter' :)
            or $state[$p:lk] = 460177                       (: 'compare' ':' 'filter' :)
            or $state[$p:lk] = 460178                       (: 'count' ':' 'filter' :)
            or $state[$p:lk] = 460179                       (: 'default' ':' 'filter' :)
            or $state[$p:lk] = 460180                       (: 'delete' ':' 'filter' :)
            or $state[$p:lk] = 460181                       (: 'directory-list' ':' 'filter' :)
            or $state[$p:lk] = 460183                       (: 'else' ':' 'filter' :)
            or $state[$p:lk] = 460185                       (: 'error' ':' 'filter' :)
            or $state[$p:lk] = 460186                       (: 'escape-markup' ':' 'filter' :)
            or $state[$p:lk] = 460187                       (: 'exec' ':' 'filter' :)
            or $state[$p:lk] = 460188                       (: 'filter' ':' 'filter' :)
            or $state[$p:lk] = 460189                       (: 'for-each' ':' 'filter' :)
            or $state[$p:lk] = 460191                       (: 'hash' ':' 'filter' :)
            or $state[$p:lk] = 460192                       (: 'http-request' ':' 'filter' :)
            or $state[$p:lk] = 460193                       (: 'identity' ':' 'filter' :)
            or $state[$p:lk] = 460194                       (: 'if' ':' 'filter' :)
            or $state[$p:lk] = 460195                       (: 'insert' ':' 'filter' :)
            or $state[$p:lk] = 460197                       (: 'label-elements' ':' 'filter' :)
            or $state[$p:lk] = 460198                       (: 'library' ':' 'filter' :)
            or $state[$p:lk] = 460199                       (: 'load' ':' 'filter' :)
            or $state[$p:lk] = 460200                       (: 'make-absolute-uris' ':' 'filter' :)
            or $state[$p:lk] = 460201                       (: 'namespace' ':' 'filter' :)
            or $state[$p:lk] = 460202                       (: 'namespace-rename' ':' 'filter' :)
            or $state[$p:lk] = 460203                       (: 'pack' ':' 'filter' :)
            or $state[$p:lk] = 460204                       (: 'parameters' ':' 'filter' :)
            or $state[$p:lk] = 460206                       (: 'pipeline' ':' 'filter' :)
            or $state[$p:lk] = 460208                       (: 'rename' ':' 'filter' :)
            or $state[$p:lk] = 460209                       (: 'replace' ':' 'filter' :)
            or $state[$p:lk] = 460211                       (: 'set-attributes' ':' 'filter' :)
            or $state[$p:lk] = 460212                       (: 'sink' ':' 'filter' :)
            or $state[$p:lk] = 460213                       (: 'split-sequence' ':' 'filter' :)
            or $state[$p:lk] = 460214                       (: 'step' ':' 'filter' :)
            or $state[$p:lk] = 460215                       (: 'store' ':' 'filter' :)
            or $state[$p:lk] = 460216                       (: 'string-replace' ':' 'filter' :)
            or $state[$p:lk] = 460217                       (: 'try' ':' 'filter' :)
            or $state[$p:lk] = 460218                       (: 'unescape-markup' ':' 'filter' :)
            or $state[$p:lk] = 460219                       (: 'unwrap' ':' 'filter' :)
            or $state[$p:lk] = 460220                       (: 'uuid' ':' 'filter' :)
            or $state[$p:lk] = 460221                       (: 'validate-with-relax-ng' ':' 'filter' :)
            or $state[$p:lk] = 460222                       (: 'validate-with-schematron' ':' 'filter' :)
            or $state[$p:lk] = 460223                       (: 'validate-with-xml-schema' ':' 'filter' :)
            or $state[$p:lk] = 460224                       (: 'variable' ':' 'filter' :)
            or $state[$p:lk] = 460225                       (: 'viewport' ':' 'filter' :)
            or $state[$p:lk] = 460226                       (: 'wrap' ':' 'filter' :)
            or $state[$p:lk] = 460227                       (: 'wrap-sequence' ':' 'filter' :)
            or $state[$p:lk] = 460228                       (: 'www-form-urldecode' ':' 'filter' :)
            or $state[$p:lk] = 460229                       (: 'www-form-urlencode' ':' 'filter' :)
            or $state[$p:lk] = 460230                       (: 'xinclude' ':' 'filter' :)
            or $state[$p:lk] = 460231                       (: 'xquery' ':' 'filter' :)
            or $state[$p:lk] = 460232                       (: 'xsl-formatter' ':' 'filter' :)
            or $state[$p:lk] = 460233                       (: 'xslt' ':' 'filter' :)
            or $state[$p:lk] = 476549                       (: NCName^Token ':' 'for-each' :)
            or $state[$p:lk] = 476558                       (: 'add-attribute' ':' 'for-each' :)
            or $state[$p:lk] = 476559                       (: 'add-xml-base' ':' 'for-each' :)
            or $state[$p:lk] = 476561                       (: 'compare' ':' 'for-each' :)
            or $state[$p:lk] = 476562                       (: 'count' ':' 'for-each' :)
            or $state[$p:lk] = 476563                       (: 'default' ':' 'for-each' :)
            or $state[$p:lk] = 476564                       (: 'delete' ':' 'for-each' :)
            or $state[$p:lk] = 476565                       (: 'directory-list' ':' 'for-each' :)
            or $state[$p:lk] = 476567                       (: 'else' ':' 'for-each' :)
            or $state[$p:lk] = 476569                       (: 'error' ':' 'for-each' :)
            or $state[$p:lk] = 476570                       (: 'escape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 476571                       (: 'exec' ':' 'for-each' :)
            or $state[$p:lk] = 476572                       (: 'filter' ':' 'for-each' :)
            or $state[$p:lk] = 476573                       (: 'for-each' ':' 'for-each' :)
            or $state[$p:lk] = 476575                       (: 'hash' ':' 'for-each' :)
            or $state[$p:lk] = 476576                       (: 'http-request' ':' 'for-each' :)
            or $state[$p:lk] = 476577                       (: 'identity' ':' 'for-each' :)
            or $state[$p:lk] = 476578                       (: 'if' ':' 'for-each' :)
            or $state[$p:lk] = 476579                       (: 'insert' ':' 'for-each' :)
            or $state[$p:lk] = 476581                       (: 'label-elements' ':' 'for-each' :)
            or $state[$p:lk] = 476582                       (: 'library' ':' 'for-each' :)
            or $state[$p:lk] = 476583                       (: 'load' ':' 'for-each' :)
            or $state[$p:lk] = 476584                       (: 'make-absolute-uris' ':' 'for-each' :)
            or $state[$p:lk] = 476585                       (: 'namespace' ':' 'for-each' :)
            or $state[$p:lk] = 476586                       (: 'namespace-rename' ':' 'for-each' :)
            or $state[$p:lk] = 476587                       (: 'pack' ':' 'for-each' :)
            or $state[$p:lk] = 476588                       (: 'parameters' ':' 'for-each' :)
            or $state[$p:lk] = 476590                       (: 'pipeline' ':' 'for-each' :)
            or $state[$p:lk] = 476592                       (: 'rename' ':' 'for-each' :)
            or $state[$p:lk] = 476593                       (: 'replace' ':' 'for-each' :)
            or $state[$p:lk] = 476595                       (: 'set-attributes' ':' 'for-each' :)
            or $state[$p:lk] = 476596                       (: 'sink' ':' 'for-each' :)
            or $state[$p:lk] = 476597                       (: 'split-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 476598                       (: 'step' ':' 'for-each' :)
            or $state[$p:lk] = 476599                       (: 'store' ':' 'for-each' :)
            or $state[$p:lk] = 476600                       (: 'string-replace' ':' 'for-each' :)
            or $state[$p:lk] = 476601                       (: 'try' ':' 'for-each' :)
            or $state[$p:lk] = 476602                       (: 'unescape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 476603                       (: 'unwrap' ':' 'for-each' :)
            or $state[$p:lk] = 476604                       (: 'uuid' ':' 'for-each' :)
            or $state[$p:lk] = 476605                       (: 'validate-with-relax-ng' ':' 'for-each' :)
            or $state[$p:lk] = 476606                       (: 'validate-with-schematron' ':' 'for-each' :)
            or $state[$p:lk] = 476607                       (: 'validate-with-xml-schema' ':' 'for-each' :)
            or $state[$p:lk] = 476608                       (: 'variable' ':' 'for-each' :)
            or $state[$p:lk] = 476609                       (: 'viewport' ':' 'for-each' :)
            or $state[$p:lk] = 476610                       (: 'wrap' ':' 'for-each' :)
            or $state[$p:lk] = 476611                       (: 'wrap-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 476612                       (: 'www-form-urldecode' ':' 'for-each' :)
            or $state[$p:lk] = 476613                       (: 'www-form-urlencode' ':' 'for-each' :)
            or $state[$p:lk] = 476614                       (: 'xinclude' ':' 'for-each' :)
            or $state[$p:lk] = 476615                       (: 'xquery' ':' 'for-each' :)
            or $state[$p:lk] = 476616                       (: 'xsl-formatter' ':' 'for-each' :)
            or $state[$p:lk] = 476617                       (: 'xslt' ':' 'for-each' :)
            or $state[$p:lk] = 509317                       (: NCName^Token ':' 'hash' :)
            or $state[$p:lk] = 509326                       (: 'add-attribute' ':' 'hash' :)
            or $state[$p:lk] = 509327                       (: 'add-xml-base' ':' 'hash' :)
            or $state[$p:lk] = 509329                       (: 'compare' ':' 'hash' :)
            or $state[$p:lk] = 509330                       (: 'count' ':' 'hash' :)
            or $state[$p:lk] = 509331                       (: 'default' ':' 'hash' :)
            or $state[$p:lk] = 509332                       (: 'delete' ':' 'hash' :)
            or $state[$p:lk] = 509333                       (: 'directory-list' ':' 'hash' :)
            or $state[$p:lk] = 509335                       (: 'else' ':' 'hash' :)
            or $state[$p:lk] = 509337                       (: 'error' ':' 'hash' :)
            or $state[$p:lk] = 509338                       (: 'escape-markup' ':' 'hash' :)
            or $state[$p:lk] = 509339                       (: 'exec' ':' 'hash' :)
            or $state[$p:lk] = 509340                       (: 'filter' ':' 'hash' :)
            or $state[$p:lk] = 509341                       (: 'for-each' ':' 'hash' :)
            or $state[$p:lk] = 509343                       (: 'hash' ':' 'hash' :)
            or $state[$p:lk] = 509344                       (: 'http-request' ':' 'hash' :)
            or $state[$p:lk] = 509345                       (: 'identity' ':' 'hash' :)
            or $state[$p:lk] = 509346                       (: 'if' ':' 'hash' :)
            or $state[$p:lk] = 509347                       (: 'insert' ':' 'hash' :)
            or $state[$p:lk] = 509349                       (: 'label-elements' ':' 'hash' :)
            or $state[$p:lk] = 509350                       (: 'library' ':' 'hash' :)
            or $state[$p:lk] = 509351                       (: 'load' ':' 'hash' :)
            or $state[$p:lk] = 509352                       (: 'make-absolute-uris' ':' 'hash' :)
            or $state[$p:lk] = 509353                       (: 'namespace' ':' 'hash' :)
            or $state[$p:lk] = 509354                       (: 'namespace-rename' ':' 'hash' :)
            or $state[$p:lk] = 509355                       (: 'pack' ':' 'hash' :)
            or $state[$p:lk] = 509356                       (: 'parameters' ':' 'hash' :)
            or $state[$p:lk] = 509358                       (: 'pipeline' ':' 'hash' :)
            or $state[$p:lk] = 509360                       (: 'rename' ':' 'hash' :)
            or $state[$p:lk] = 509361                       (: 'replace' ':' 'hash' :)
            or $state[$p:lk] = 509363                       (: 'set-attributes' ':' 'hash' :)
            or $state[$p:lk] = 509364                       (: 'sink' ':' 'hash' :)
            or $state[$p:lk] = 509365                       (: 'split-sequence' ':' 'hash' :)
            or $state[$p:lk] = 509366                       (: 'step' ':' 'hash' :)
            or $state[$p:lk] = 509367                       (: 'store' ':' 'hash' :)
            or $state[$p:lk] = 509368                       (: 'string-replace' ':' 'hash' :)
            or $state[$p:lk] = 509369                       (: 'try' ':' 'hash' :)
            or $state[$p:lk] = 509370                       (: 'unescape-markup' ':' 'hash' :)
            or $state[$p:lk] = 509371                       (: 'unwrap' ':' 'hash' :)
            or $state[$p:lk] = 509372                       (: 'uuid' ':' 'hash' :)
            or $state[$p:lk] = 509373                       (: 'validate-with-relax-ng' ':' 'hash' :)
            or $state[$p:lk] = 509374                       (: 'validate-with-schematron' ':' 'hash' :)
            or $state[$p:lk] = 509375                       (: 'validate-with-xml-schema' ':' 'hash' :)
            or $state[$p:lk] = 509376                       (: 'variable' ':' 'hash' :)
            or $state[$p:lk] = 509377                       (: 'viewport' ':' 'hash' :)
            or $state[$p:lk] = 509378                       (: 'wrap' ':' 'hash' :)
            or $state[$p:lk] = 509379                       (: 'wrap-sequence' ':' 'hash' :)
            or $state[$p:lk] = 509380                       (: 'www-form-urldecode' ':' 'hash' :)
            or $state[$p:lk] = 509381                       (: 'www-form-urlencode' ':' 'hash' :)
            or $state[$p:lk] = 509382                       (: 'xinclude' ':' 'hash' :)
            or $state[$p:lk] = 509383                       (: 'xquery' ':' 'hash' :)
            or $state[$p:lk] = 509384                       (: 'xsl-formatter' ':' 'hash' :)
            or $state[$p:lk] = 509385                       (: 'xslt' ':' 'hash' :)
            or $state[$p:lk] = 525701                       (: NCName^Token ':' 'http-request' :)
            or $state[$p:lk] = 525710                       (: 'add-attribute' ':' 'http-request' :)
            or $state[$p:lk] = 525711                       (: 'add-xml-base' ':' 'http-request' :)
            or $state[$p:lk] = 525713                       (: 'compare' ':' 'http-request' :)
            or $state[$p:lk] = 525714                       (: 'count' ':' 'http-request' :)
            or $state[$p:lk] = 525715                       (: 'default' ':' 'http-request' :)
            or $state[$p:lk] = 525716                       (: 'delete' ':' 'http-request' :)
            or $state[$p:lk] = 525717                       (: 'directory-list' ':' 'http-request' :)
            or $state[$p:lk] = 525719                       (: 'else' ':' 'http-request' :)
            or $state[$p:lk] = 525721                       (: 'error' ':' 'http-request' :)
            or $state[$p:lk] = 525722                       (: 'escape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 525723                       (: 'exec' ':' 'http-request' :)
            or $state[$p:lk] = 525724                       (: 'filter' ':' 'http-request' :)
            or $state[$p:lk] = 525725                       (: 'for-each' ':' 'http-request' :)
            or $state[$p:lk] = 525727                       (: 'hash' ':' 'http-request' :)
            or $state[$p:lk] = 525728                       (: 'http-request' ':' 'http-request' :)
            or $state[$p:lk] = 525729                       (: 'identity' ':' 'http-request' :)
            or $state[$p:lk] = 525730                       (: 'if' ':' 'http-request' :)
            or $state[$p:lk] = 525731                       (: 'insert' ':' 'http-request' :)
            or $state[$p:lk] = 525733                       (: 'label-elements' ':' 'http-request' :)
            or $state[$p:lk] = 525734                       (: 'library' ':' 'http-request' :)
            or $state[$p:lk] = 525735                       (: 'load' ':' 'http-request' :)
            or $state[$p:lk] = 525736                       (: 'make-absolute-uris' ':' 'http-request' :)
            or $state[$p:lk] = 525737                       (: 'namespace' ':' 'http-request' :)
            or $state[$p:lk] = 525738                       (: 'namespace-rename' ':' 'http-request' :)
            or $state[$p:lk] = 525739                       (: 'pack' ':' 'http-request' :)
            or $state[$p:lk] = 525740                       (: 'parameters' ':' 'http-request' :)
            or $state[$p:lk] = 525742                       (: 'pipeline' ':' 'http-request' :)
            or $state[$p:lk] = 525744                       (: 'rename' ':' 'http-request' :)
            or $state[$p:lk] = 525745                       (: 'replace' ':' 'http-request' :)
            or $state[$p:lk] = 525747                       (: 'set-attributes' ':' 'http-request' :)
            or $state[$p:lk] = 525748                       (: 'sink' ':' 'http-request' :)
            or $state[$p:lk] = 525749                       (: 'split-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 525750                       (: 'step' ':' 'http-request' :)
            or $state[$p:lk] = 525751                       (: 'store' ':' 'http-request' :)
            or $state[$p:lk] = 525752                       (: 'string-replace' ':' 'http-request' :)
            or $state[$p:lk] = 525753                       (: 'try' ':' 'http-request' :)
            or $state[$p:lk] = 525754                       (: 'unescape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 525755                       (: 'unwrap' ':' 'http-request' :)
            or $state[$p:lk] = 525756                       (: 'uuid' ':' 'http-request' :)
            or $state[$p:lk] = 525757                       (: 'validate-with-relax-ng' ':' 'http-request' :)
            or $state[$p:lk] = 525758                       (: 'validate-with-schematron' ':' 'http-request' :)
            or $state[$p:lk] = 525759                       (: 'validate-with-xml-schema' ':' 'http-request' :)
            or $state[$p:lk] = 525760                       (: 'variable' ':' 'http-request' :)
            or $state[$p:lk] = 525761                       (: 'viewport' ':' 'http-request' :)
            or $state[$p:lk] = 525762                       (: 'wrap' ':' 'http-request' :)
            or $state[$p:lk] = 525763                       (: 'wrap-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 525764                       (: 'www-form-urldecode' ':' 'http-request' :)
            or $state[$p:lk] = 525765                       (: 'www-form-urlencode' ':' 'http-request' :)
            or $state[$p:lk] = 525766                       (: 'xinclude' ':' 'http-request' :)
            or $state[$p:lk] = 525767                       (: 'xquery' ':' 'http-request' :)
            or $state[$p:lk] = 525768                       (: 'xsl-formatter' ':' 'http-request' :)
            or $state[$p:lk] = 525769                       (: 'xslt' ':' 'http-request' :)
            or $state[$p:lk] = 542085                       (: NCName^Token ':' 'identity' :)
            or $state[$p:lk] = 542094                       (: 'add-attribute' ':' 'identity' :)
            or $state[$p:lk] = 542095                       (: 'add-xml-base' ':' 'identity' :)
            or $state[$p:lk] = 542097                       (: 'compare' ':' 'identity' :)
            or $state[$p:lk] = 542098                       (: 'count' ':' 'identity' :)
            or $state[$p:lk] = 542099                       (: 'default' ':' 'identity' :)
            or $state[$p:lk] = 542100                       (: 'delete' ':' 'identity' :)
            or $state[$p:lk] = 542101                       (: 'directory-list' ':' 'identity' :)
            or $state[$p:lk] = 542103                       (: 'else' ':' 'identity' :)
            or $state[$p:lk] = 542105                       (: 'error' ':' 'identity' :)
            or $state[$p:lk] = 542106                       (: 'escape-markup' ':' 'identity' :)
            or $state[$p:lk] = 542107                       (: 'exec' ':' 'identity' :)
            or $state[$p:lk] = 542108                       (: 'filter' ':' 'identity' :)
            or $state[$p:lk] = 542109                       (: 'for-each' ':' 'identity' :)
            or $state[$p:lk] = 542111                       (: 'hash' ':' 'identity' :)
            or $state[$p:lk] = 542112                       (: 'http-request' ':' 'identity' :)
            or $state[$p:lk] = 542113                       (: 'identity' ':' 'identity' :)
            or $state[$p:lk] = 542114                       (: 'if' ':' 'identity' :)
            or $state[$p:lk] = 542115                       (: 'insert' ':' 'identity' :)
            or $state[$p:lk] = 542117                       (: 'label-elements' ':' 'identity' :)
            or $state[$p:lk] = 542118                       (: 'library' ':' 'identity' :)
            or $state[$p:lk] = 542119                       (: 'load' ':' 'identity' :)
            or $state[$p:lk] = 542120                       (: 'make-absolute-uris' ':' 'identity' :)
            or $state[$p:lk] = 542121                       (: 'namespace' ':' 'identity' :)
            or $state[$p:lk] = 542122                       (: 'namespace-rename' ':' 'identity' :)
            or $state[$p:lk] = 542123                       (: 'pack' ':' 'identity' :)
            or $state[$p:lk] = 542124                       (: 'parameters' ':' 'identity' :)
            or $state[$p:lk] = 542126                       (: 'pipeline' ':' 'identity' :)
            or $state[$p:lk] = 542128                       (: 'rename' ':' 'identity' :)
            or $state[$p:lk] = 542129                       (: 'replace' ':' 'identity' :)
            or $state[$p:lk] = 542131                       (: 'set-attributes' ':' 'identity' :)
            or $state[$p:lk] = 542132                       (: 'sink' ':' 'identity' :)
            or $state[$p:lk] = 542133                       (: 'split-sequence' ':' 'identity' :)
            or $state[$p:lk] = 542134                       (: 'step' ':' 'identity' :)
            or $state[$p:lk] = 542135                       (: 'store' ':' 'identity' :)
            or $state[$p:lk] = 542136                       (: 'string-replace' ':' 'identity' :)
            or $state[$p:lk] = 542137                       (: 'try' ':' 'identity' :)
            or $state[$p:lk] = 542138                       (: 'unescape-markup' ':' 'identity' :)
            or $state[$p:lk] = 542139                       (: 'unwrap' ':' 'identity' :)
            or $state[$p:lk] = 542140                       (: 'uuid' ':' 'identity' :)
            or $state[$p:lk] = 542141                       (: 'validate-with-relax-ng' ':' 'identity' :)
            or $state[$p:lk] = 542142                       (: 'validate-with-schematron' ':' 'identity' :)
            or $state[$p:lk] = 542143                       (: 'validate-with-xml-schema' ':' 'identity' :)
            or $state[$p:lk] = 542144                       (: 'variable' ':' 'identity' :)
            or $state[$p:lk] = 542145                       (: 'viewport' ':' 'identity' :)
            or $state[$p:lk] = 542146                       (: 'wrap' ':' 'identity' :)
            or $state[$p:lk] = 542147                       (: 'wrap-sequence' ':' 'identity' :)
            or $state[$p:lk] = 542148                       (: 'www-form-urldecode' ':' 'identity' :)
            or $state[$p:lk] = 542149                       (: 'www-form-urlencode' ':' 'identity' :)
            or $state[$p:lk] = 542150                       (: 'xinclude' ':' 'identity' :)
            or $state[$p:lk] = 542151                       (: 'xquery' ':' 'identity' :)
            or $state[$p:lk] = 542152                       (: 'xsl-formatter' ':' 'identity' :)
            or $state[$p:lk] = 542153                       (: 'xslt' ':' 'identity' :)
            or $state[$p:lk] = 558469                       (: NCName^Token ':' 'if' :)
            or $state[$p:lk] = 558478                       (: 'add-attribute' ':' 'if' :)
            or $state[$p:lk] = 558479                       (: 'add-xml-base' ':' 'if' :)
            or $state[$p:lk] = 558481                       (: 'compare' ':' 'if' :)
            or $state[$p:lk] = 558482                       (: 'count' ':' 'if' :)
            or $state[$p:lk] = 558483                       (: 'default' ':' 'if' :)
            or $state[$p:lk] = 558484                       (: 'delete' ':' 'if' :)
            or $state[$p:lk] = 558485                       (: 'directory-list' ':' 'if' :)
            or $state[$p:lk] = 558487                       (: 'else' ':' 'if' :)
            or $state[$p:lk] = 558489                       (: 'error' ':' 'if' :)
            or $state[$p:lk] = 558490                       (: 'escape-markup' ':' 'if' :)
            or $state[$p:lk] = 558491                       (: 'exec' ':' 'if' :)
            or $state[$p:lk] = 558492                       (: 'filter' ':' 'if' :)
            or $state[$p:lk] = 558493                       (: 'for-each' ':' 'if' :)
            or $state[$p:lk] = 558495                       (: 'hash' ':' 'if' :)
            or $state[$p:lk] = 558496                       (: 'http-request' ':' 'if' :)
            or $state[$p:lk] = 558497                       (: 'identity' ':' 'if' :)
            or $state[$p:lk] = 558498                       (: 'if' ':' 'if' :)
            or $state[$p:lk] = 558499                       (: 'insert' ':' 'if' :)
            or $state[$p:lk] = 558501                       (: 'label-elements' ':' 'if' :)
            or $state[$p:lk] = 558502                       (: 'library' ':' 'if' :)
            or $state[$p:lk] = 558503                       (: 'load' ':' 'if' :)
            or $state[$p:lk] = 558504                       (: 'make-absolute-uris' ':' 'if' :)
            or $state[$p:lk] = 558505                       (: 'namespace' ':' 'if' :)
            or $state[$p:lk] = 558506                       (: 'namespace-rename' ':' 'if' :)
            or $state[$p:lk] = 558507                       (: 'pack' ':' 'if' :)
            or $state[$p:lk] = 558508                       (: 'parameters' ':' 'if' :)
            or $state[$p:lk] = 558510                       (: 'pipeline' ':' 'if' :)
            or $state[$p:lk] = 558512                       (: 'rename' ':' 'if' :)
            or $state[$p:lk] = 558513                       (: 'replace' ':' 'if' :)
            or $state[$p:lk] = 558515                       (: 'set-attributes' ':' 'if' :)
            or $state[$p:lk] = 558516                       (: 'sink' ':' 'if' :)
            or $state[$p:lk] = 558517                       (: 'split-sequence' ':' 'if' :)
            or $state[$p:lk] = 558518                       (: 'step' ':' 'if' :)
            or $state[$p:lk] = 558519                       (: 'store' ':' 'if' :)
            or $state[$p:lk] = 558520                       (: 'string-replace' ':' 'if' :)
            or $state[$p:lk] = 558521                       (: 'try' ':' 'if' :)
            or $state[$p:lk] = 558522                       (: 'unescape-markup' ':' 'if' :)
            or $state[$p:lk] = 558523                       (: 'unwrap' ':' 'if' :)
            or $state[$p:lk] = 558524                       (: 'uuid' ':' 'if' :)
            or $state[$p:lk] = 558525                       (: 'validate-with-relax-ng' ':' 'if' :)
            or $state[$p:lk] = 558526                       (: 'validate-with-schematron' ':' 'if' :)
            or $state[$p:lk] = 558527                       (: 'validate-with-xml-schema' ':' 'if' :)
            or $state[$p:lk] = 558528                       (: 'variable' ':' 'if' :)
            or $state[$p:lk] = 558529                       (: 'viewport' ':' 'if' :)
            or $state[$p:lk] = 558530                       (: 'wrap' ':' 'if' :)
            or $state[$p:lk] = 558531                       (: 'wrap-sequence' ':' 'if' :)
            or $state[$p:lk] = 558532                       (: 'www-form-urldecode' ':' 'if' :)
            or $state[$p:lk] = 558533                       (: 'www-form-urlencode' ':' 'if' :)
            or $state[$p:lk] = 558534                       (: 'xinclude' ':' 'if' :)
            or $state[$p:lk] = 558535                       (: 'xquery' ':' 'if' :)
            or $state[$p:lk] = 558536                       (: 'xsl-formatter' ':' 'if' :)
            or $state[$p:lk] = 558537                       (: 'xslt' ':' 'if' :)
            or $state[$p:lk] = 574853                       (: NCName^Token ':' 'insert' :)
            or $state[$p:lk] = 574862                       (: 'add-attribute' ':' 'insert' :)
            or $state[$p:lk] = 574863                       (: 'add-xml-base' ':' 'insert' :)
            or $state[$p:lk] = 574865                       (: 'compare' ':' 'insert' :)
            or $state[$p:lk] = 574866                       (: 'count' ':' 'insert' :)
            or $state[$p:lk] = 574867                       (: 'default' ':' 'insert' :)
            or $state[$p:lk] = 574868                       (: 'delete' ':' 'insert' :)
            or $state[$p:lk] = 574869                       (: 'directory-list' ':' 'insert' :)
            or $state[$p:lk] = 574871                       (: 'else' ':' 'insert' :)
            or $state[$p:lk] = 574873                       (: 'error' ':' 'insert' :)
            or $state[$p:lk] = 574874                       (: 'escape-markup' ':' 'insert' :)
            or $state[$p:lk] = 574875                       (: 'exec' ':' 'insert' :)
            or $state[$p:lk] = 574876                       (: 'filter' ':' 'insert' :)
            or $state[$p:lk] = 574877                       (: 'for-each' ':' 'insert' :)
            or $state[$p:lk] = 574879                       (: 'hash' ':' 'insert' :)
            or $state[$p:lk] = 574880                       (: 'http-request' ':' 'insert' :)
            or $state[$p:lk] = 574881                       (: 'identity' ':' 'insert' :)
            or $state[$p:lk] = 574882                       (: 'if' ':' 'insert' :)
            or $state[$p:lk] = 574883                       (: 'insert' ':' 'insert' :)
            or $state[$p:lk] = 574885                       (: 'label-elements' ':' 'insert' :)
            or $state[$p:lk] = 574886                       (: 'library' ':' 'insert' :)
            or $state[$p:lk] = 574887                       (: 'load' ':' 'insert' :)
            or $state[$p:lk] = 574888                       (: 'make-absolute-uris' ':' 'insert' :)
            or $state[$p:lk] = 574889                       (: 'namespace' ':' 'insert' :)
            or $state[$p:lk] = 574890                       (: 'namespace-rename' ':' 'insert' :)
            or $state[$p:lk] = 574891                       (: 'pack' ':' 'insert' :)
            or $state[$p:lk] = 574892                       (: 'parameters' ':' 'insert' :)
            or $state[$p:lk] = 574894                       (: 'pipeline' ':' 'insert' :)
            or $state[$p:lk] = 574896                       (: 'rename' ':' 'insert' :)
            or $state[$p:lk] = 574897                       (: 'replace' ':' 'insert' :)
            or $state[$p:lk] = 574899                       (: 'set-attributes' ':' 'insert' :)
            or $state[$p:lk] = 574900                       (: 'sink' ':' 'insert' :)
            or $state[$p:lk] = 574901                       (: 'split-sequence' ':' 'insert' :)
            or $state[$p:lk] = 574902                       (: 'step' ':' 'insert' :)
            or $state[$p:lk] = 574903                       (: 'store' ':' 'insert' :)
            or $state[$p:lk] = 574904                       (: 'string-replace' ':' 'insert' :)
            or $state[$p:lk] = 574905                       (: 'try' ':' 'insert' :)
            or $state[$p:lk] = 574906                       (: 'unescape-markup' ':' 'insert' :)
            or $state[$p:lk] = 574907                       (: 'unwrap' ':' 'insert' :)
            or $state[$p:lk] = 574908                       (: 'uuid' ':' 'insert' :)
            or $state[$p:lk] = 574909                       (: 'validate-with-relax-ng' ':' 'insert' :)
            or $state[$p:lk] = 574910                       (: 'validate-with-schematron' ':' 'insert' :)
            or $state[$p:lk] = 574911                       (: 'validate-with-xml-schema' ':' 'insert' :)
            or $state[$p:lk] = 574912                       (: 'variable' ':' 'insert' :)
            or $state[$p:lk] = 574913                       (: 'viewport' ':' 'insert' :)
            or $state[$p:lk] = 574914                       (: 'wrap' ':' 'insert' :)
            or $state[$p:lk] = 574915                       (: 'wrap-sequence' ':' 'insert' :)
            or $state[$p:lk] = 574916                       (: 'www-form-urldecode' ':' 'insert' :)
            or $state[$p:lk] = 574917                       (: 'www-form-urlencode' ':' 'insert' :)
            or $state[$p:lk] = 574918                       (: 'xinclude' ':' 'insert' :)
            or $state[$p:lk] = 574919                       (: 'xquery' ':' 'insert' :)
            or $state[$p:lk] = 574920                       (: 'xsl-formatter' ':' 'insert' :)
            or $state[$p:lk] = 574921                       (: 'xslt' ':' 'insert' :)
            or $state[$p:lk] = 607621                       (: NCName^Token ':' 'label-elements' :)
            or $state[$p:lk] = 607630                       (: 'add-attribute' ':' 'label-elements' :)
            or $state[$p:lk] = 607631                       (: 'add-xml-base' ':' 'label-elements' :)
            or $state[$p:lk] = 607633                       (: 'compare' ':' 'label-elements' :)
            or $state[$p:lk] = 607634                       (: 'count' ':' 'label-elements' :)
            or $state[$p:lk] = 607635                       (: 'default' ':' 'label-elements' :)
            or $state[$p:lk] = 607636                       (: 'delete' ':' 'label-elements' :)
            or $state[$p:lk] = 607637                       (: 'directory-list' ':' 'label-elements' :)
            or $state[$p:lk] = 607639                       (: 'else' ':' 'label-elements' :)
            or $state[$p:lk] = 607641                       (: 'error' ':' 'label-elements' :)
            or $state[$p:lk] = 607642                       (: 'escape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 607643                       (: 'exec' ':' 'label-elements' :)
            or $state[$p:lk] = 607644                       (: 'filter' ':' 'label-elements' :)
            or $state[$p:lk] = 607645                       (: 'for-each' ':' 'label-elements' :)
            or $state[$p:lk] = 607647                       (: 'hash' ':' 'label-elements' :)
            or $state[$p:lk] = 607648                       (: 'http-request' ':' 'label-elements' :)
            or $state[$p:lk] = 607649                       (: 'identity' ':' 'label-elements' :)
            or $state[$p:lk] = 607650                       (: 'if' ':' 'label-elements' :)
            or $state[$p:lk] = 607651                       (: 'insert' ':' 'label-elements' :)
            or $state[$p:lk] = 607653                       (: 'label-elements' ':' 'label-elements' :)
            or $state[$p:lk] = 607654                       (: 'library' ':' 'label-elements' :)
            or $state[$p:lk] = 607655                       (: 'load' ':' 'label-elements' :)
            or $state[$p:lk] = 607656                       (: 'make-absolute-uris' ':' 'label-elements' :)
            or $state[$p:lk] = 607657                       (: 'namespace' ':' 'label-elements' :)
            or $state[$p:lk] = 607658                       (: 'namespace-rename' ':' 'label-elements' :)
            or $state[$p:lk] = 607659                       (: 'pack' ':' 'label-elements' :)
            or $state[$p:lk] = 607660                       (: 'parameters' ':' 'label-elements' :)
            or $state[$p:lk] = 607662                       (: 'pipeline' ':' 'label-elements' :)
            or $state[$p:lk] = 607664                       (: 'rename' ':' 'label-elements' :)
            or $state[$p:lk] = 607665                       (: 'replace' ':' 'label-elements' :)
            or $state[$p:lk] = 607667                       (: 'set-attributes' ':' 'label-elements' :)
            or $state[$p:lk] = 607668                       (: 'sink' ':' 'label-elements' :)
            or $state[$p:lk] = 607669                       (: 'split-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 607670                       (: 'step' ':' 'label-elements' :)
            or $state[$p:lk] = 607671                       (: 'store' ':' 'label-elements' :)
            or $state[$p:lk] = 607672                       (: 'string-replace' ':' 'label-elements' :)
            or $state[$p:lk] = 607673                       (: 'try' ':' 'label-elements' :)
            or $state[$p:lk] = 607674                       (: 'unescape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 607675                       (: 'unwrap' ':' 'label-elements' :)
            or $state[$p:lk] = 607676                       (: 'uuid' ':' 'label-elements' :)
            or $state[$p:lk] = 607677                       (: 'validate-with-relax-ng' ':' 'label-elements' :)
            or $state[$p:lk] = 607678                       (: 'validate-with-schematron' ':' 'label-elements' :)
            or $state[$p:lk] = 607679                       (: 'validate-with-xml-schema' ':' 'label-elements' :)
            or $state[$p:lk] = 607680                       (: 'variable' ':' 'label-elements' :)
            or $state[$p:lk] = 607681                       (: 'viewport' ':' 'label-elements' :)
            or $state[$p:lk] = 607682                       (: 'wrap' ':' 'label-elements' :)
            or $state[$p:lk] = 607683                       (: 'wrap-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 607684                       (: 'www-form-urldecode' ':' 'label-elements' :)
            or $state[$p:lk] = 607685                       (: 'www-form-urlencode' ':' 'label-elements' :)
            or $state[$p:lk] = 607686                       (: 'xinclude' ':' 'label-elements' :)
            or $state[$p:lk] = 607687                       (: 'xquery' ':' 'label-elements' :)
            or $state[$p:lk] = 607688                       (: 'xsl-formatter' ':' 'label-elements' :)
            or $state[$p:lk] = 607689                       (: 'xslt' ':' 'label-elements' :)
            or $state[$p:lk] = 624005                       (: NCName^Token ':' 'library' :)
            or $state[$p:lk] = 624014                       (: 'add-attribute' ':' 'library' :)
            or $state[$p:lk] = 624015                       (: 'add-xml-base' ':' 'library' :)
            or $state[$p:lk] = 624017                       (: 'compare' ':' 'library' :)
            or $state[$p:lk] = 624018                       (: 'count' ':' 'library' :)
            or $state[$p:lk] = 624019                       (: 'default' ':' 'library' :)
            or $state[$p:lk] = 624020                       (: 'delete' ':' 'library' :)
            or $state[$p:lk] = 624021                       (: 'directory-list' ':' 'library' :)
            or $state[$p:lk] = 624023                       (: 'else' ':' 'library' :)
            or $state[$p:lk] = 624025                       (: 'error' ':' 'library' :)
            or $state[$p:lk] = 624026                       (: 'escape-markup' ':' 'library' :)
            or $state[$p:lk] = 624027                       (: 'exec' ':' 'library' :)
            or $state[$p:lk] = 624028                       (: 'filter' ':' 'library' :)
            or $state[$p:lk] = 624029                       (: 'for-each' ':' 'library' :)
            or $state[$p:lk] = 624031                       (: 'hash' ':' 'library' :)
            or $state[$p:lk] = 624032                       (: 'http-request' ':' 'library' :)
            or $state[$p:lk] = 624033                       (: 'identity' ':' 'library' :)
            or $state[$p:lk] = 624034                       (: 'if' ':' 'library' :)
            or $state[$p:lk] = 624035                       (: 'insert' ':' 'library' :)
            or $state[$p:lk] = 624037                       (: 'label-elements' ':' 'library' :)
            or $state[$p:lk] = 624038                       (: 'library' ':' 'library' :)
            or $state[$p:lk] = 624039                       (: 'load' ':' 'library' :)
            or $state[$p:lk] = 624040                       (: 'make-absolute-uris' ':' 'library' :)
            or $state[$p:lk] = 624041                       (: 'namespace' ':' 'library' :)
            or $state[$p:lk] = 624042                       (: 'namespace-rename' ':' 'library' :)
            or $state[$p:lk] = 624043                       (: 'pack' ':' 'library' :)
            or $state[$p:lk] = 624044                       (: 'parameters' ':' 'library' :)
            or $state[$p:lk] = 624046                       (: 'pipeline' ':' 'library' :)
            or $state[$p:lk] = 624048                       (: 'rename' ':' 'library' :)
            or $state[$p:lk] = 624049                       (: 'replace' ':' 'library' :)
            or $state[$p:lk] = 624051                       (: 'set-attributes' ':' 'library' :)
            or $state[$p:lk] = 624052                       (: 'sink' ':' 'library' :)
            or $state[$p:lk] = 624053                       (: 'split-sequence' ':' 'library' :)
            or $state[$p:lk] = 624054                       (: 'step' ':' 'library' :)
            or $state[$p:lk] = 624055                       (: 'store' ':' 'library' :)
            or $state[$p:lk] = 624056                       (: 'string-replace' ':' 'library' :)
            or $state[$p:lk] = 624057                       (: 'try' ':' 'library' :)
            or $state[$p:lk] = 624058                       (: 'unescape-markup' ':' 'library' :)
            or $state[$p:lk] = 624059                       (: 'unwrap' ':' 'library' :)
            or $state[$p:lk] = 624060                       (: 'uuid' ':' 'library' :)
            or $state[$p:lk] = 624061                       (: 'validate-with-relax-ng' ':' 'library' :)
            or $state[$p:lk] = 624062                       (: 'validate-with-schematron' ':' 'library' :)
            or $state[$p:lk] = 624063                       (: 'validate-with-xml-schema' ':' 'library' :)
            or $state[$p:lk] = 624064                       (: 'variable' ':' 'library' :)
            or $state[$p:lk] = 624065                       (: 'viewport' ':' 'library' :)
            or $state[$p:lk] = 624066                       (: 'wrap' ':' 'library' :)
            or $state[$p:lk] = 624067                       (: 'wrap-sequence' ':' 'library' :)
            or $state[$p:lk] = 624068                       (: 'www-form-urldecode' ':' 'library' :)
            or $state[$p:lk] = 624069                       (: 'www-form-urlencode' ':' 'library' :)
            or $state[$p:lk] = 624070                       (: 'xinclude' ':' 'library' :)
            or $state[$p:lk] = 624071                       (: 'xquery' ':' 'library' :)
            or $state[$p:lk] = 624072                       (: 'xsl-formatter' ':' 'library' :)
            or $state[$p:lk] = 624073                       (: 'xslt' ':' 'library' :)
            or $state[$p:lk] = 640389                       (: NCName^Token ':' 'load' :)
            or $state[$p:lk] = 640398                       (: 'add-attribute' ':' 'load' :)
            or $state[$p:lk] = 640399                       (: 'add-xml-base' ':' 'load' :)
            or $state[$p:lk] = 640401                       (: 'compare' ':' 'load' :)
            or $state[$p:lk] = 640402                       (: 'count' ':' 'load' :)
            or $state[$p:lk] = 640403                       (: 'default' ':' 'load' :)
            or $state[$p:lk] = 640404                       (: 'delete' ':' 'load' :)
            or $state[$p:lk] = 640405                       (: 'directory-list' ':' 'load' :)
            or $state[$p:lk] = 640407                       (: 'else' ':' 'load' :)
            or $state[$p:lk] = 640409                       (: 'error' ':' 'load' :)
            or $state[$p:lk] = 640410                       (: 'escape-markup' ':' 'load' :)
            or $state[$p:lk] = 640411                       (: 'exec' ':' 'load' :)
            or $state[$p:lk] = 640412                       (: 'filter' ':' 'load' :)
            or $state[$p:lk] = 640413                       (: 'for-each' ':' 'load' :)
            or $state[$p:lk] = 640415                       (: 'hash' ':' 'load' :)
            or $state[$p:lk] = 640416                       (: 'http-request' ':' 'load' :)
            or $state[$p:lk] = 640417                       (: 'identity' ':' 'load' :)
            or $state[$p:lk] = 640418                       (: 'if' ':' 'load' :)
            or $state[$p:lk] = 640419                       (: 'insert' ':' 'load' :)
            or $state[$p:lk] = 640421                       (: 'label-elements' ':' 'load' :)
            or $state[$p:lk] = 640422                       (: 'library' ':' 'load' :)
            or $state[$p:lk] = 640423                       (: 'load' ':' 'load' :)
            or $state[$p:lk] = 640424                       (: 'make-absolute-uris' ':' 'load' :)
            or $state[$p:lk] = 640425                       (: 'namespace' ':' 'load' :)
            or $state[$p:lk] = 640426                       (: 'namespace-rename' ':' 'load' :)
            or $state[$p:lk] = 640427                       (: 'pack' ':' 'load' :)
            or $state[$p:lk] = 640428                       (: 'parameters' ':' 'load' :)
            or $state[$p:lk] = 640430                       (: 'pipeline' ':' 'load' :)
            or $state[$p:lk] = 640432                       (: 'rename' ':' 'load' :)
            or $state[$p:lk] = 640433                       (: 'replace' ':' 'load' :)
            or $state[$p:lk] = 640435                       (: 'set-attributes' ':' 'load' :)
            or $state[$p:lk] = 640436                       (: 'sink' ':' 'load' :)
            or $state[$p:lk] = 640437                       (: 'split-sequence' ':' 'load' :)
            or $state[$p:lk] = 640438                       (: 'step' ':' 'load' :)
            or $state[$p:lk] = 640439                       (: 'store' ':' 'load' :)
            or $state[$p:lk] = 640440                       (: 'string-replace' ':' 'load' :)
            or $state[$p:lk] = 640441                       (: 'try' ':' 'load' :)
            or $state[$p:lk] = 640442                       (: 'unescape-markup' ':' 'load' :)
            or $state[$p:lk] = 640443                       (: 'unwrap' ':' 'load' :)
            or $state[$p:lk] = 640444                       (: 'uuid' ':' 'load' :)
            or $state[$p:lk] = 640445                       (: 'validate-with-relax-ng' ':' 'load' :)
            or $state[$p:lk] = 640446                       (: 'validate-with-schematron' ':' 'load' :)
            or $state[$p:lk] = 640447                       (: 'validate-with-xml-schema' ':' 'load' :)
            or $state[$p:lk] = 640448                       (: 'variable' ':' 'load' :)
            or $state[$p:lk] = 640449                       (: 'viewport' ':' 'load' :)
            or $state[$p:lk] = 640450                       (: 'wrap' ':' 'load' :)
            or $state[$p:lk] = 640451                       (: 'wrap-sequence' ':' 'load' :)
            or $state[$p:lk] = 640452                       (: 'www-form-urldecode' ':' 'load' :)
            or $state[$p:lk] = 640453                       (: 'www-form-urlencode' ':' 'load' :)
            or $state[$p:lk] = 640454                       (: 'xinclude' ':' 'load' :)
            or $state[$p:lk] = 640455                       (: 'xquery' ':' 'load' :)
            or $state[$p:lk] = 640456                       (: 'xsl-formatter' ':' 'load' :)
            or $state[$p:lk] = 640457                       (: 'xslt' ':' 'load' :)
            or $state[$p:lk] = 656773                       (: NCName^Token ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656782                       (: 'add-attribute' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656783                       (: 'add-xml-base' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656785                       (: 'compare' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656786                       (: 'count' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656787                       (: 'default' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656788                       (: 'delete' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656789                       (: 'directory-list' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656791                       (: 'else' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656793                       (: 'error' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656794                       (: 'escape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656795                       (: 'exec' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656796                       (: 'filter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656797                       (: 'for-each' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656799                       (: 'hash' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656800                       (: 'http-request' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656801                       (: 'identity' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656802                       (: 'if' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656803                       (: 'insert' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656805                       (: 'label-elements' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656806                       (: 'library' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656807                       (: 'load' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656808                       (: 'make-absolute-uris' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656809                       (: 'namespace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656810                       (: 'namespace-rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656811                       (: 'pack' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656812                       (: 'parameters' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656814                       (: 'pipeline' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656816                       (: 'rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656817                       (: 'replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656819                       (: 'set-attributes' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656820                       (: 'sink' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656821                       (: 'split-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656822                       (: 'step' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656823                       (: 'store' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656824                       (: 'string-replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656825                       (: 'try' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656826                       (: 'unescape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656827                       (: 'unwrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656828                       (: 'uuid' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656829                       (: 'validate-with-relax-ng' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656830                       (: 'validate-with-schematron' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656831                       (: 'validate-with-xml-schema' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656832                       (: 'variable' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656833                       (: 'viewport' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656834                       (: 'wrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656835                       (: 'wrap-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656836                       (: 'www-form-urldecode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656837                       (: 'www-form-urlencode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656838                       (: 'xinclude' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656839                       (: 'xquery' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656840                       (: 'xsl-formatter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 656841                       (: 'xslt' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 673157                       (: NCName^Token ':' 'namespace' :)
            or $state[$p:lk] = 673166                       (: 'add-attribute' ':' 'namespace' :)
            or $state[$p:lk] = 673167                       (: 'add-xml-base' ':' 'namespace' :)
            or $state[$p:lk] = 673169                       (: 'compare' ':' 'namespace' :)
            or $state[$p:lk] = 673170                       (: 'count' ':' 'namespace' :)
            or $state[$p:lk] = 673171                       (: 'default' ':' 'namespace' :)
            or $state[$p:lk] = 673172                       (: 'delete' ':' 'namespace' :)
            or $state[$p:lk] = 673173                       (: 'directory-list' ':' 'namespace' :)
            or $state[$p:lk] = 673175                       (: 'else' ':' 'namespace' :)
            or $state[$p:lk] = 673177                       (: 'error' ':' 'namespace' :)
            or $state[$p:lk] = 673178                       (: 'escape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 673179                       (: 'exec' ':' 'namespace' :)
            or $state[$p:lk] = 673180                       (: 'filter' ':' 'namespace' :)
            or $state[$p:lk] = 673181                       (: 'for-each' ':' 'namespace' :)
            or $state[$p:lk] = 673183                       (: 'hash' ':' 'namespace' :)
            or $state[$p:lk] = 673184                       (: 'http-request' ':' 'namespace' :)
            or $state[$p:lk] = 673185                       (: 'identity' ':' 'namespace' :)
            or $state[$p:lk] = 673186                       (: 'if' ':' 'namespace' :)
            or $state[$p:lk] = 673187                       (: 'insert' ':' 'namespace' :)
            or $state[$p:lk] = 673189                       (: 'label-elements' ':' 'namespace' :)
            or $state[$p:lk] = 673190                       (: 'library' ':' 'namespace' :)
            or $state[$p:lk] = 673191                       (: 'load' ':' 'namespace' :)
            or $state[$p:lk] = 673192                       (: 'make-absolute-uris' ':' 'namespace' :)
            or $state[$p:lk] = 673193                       (: 'namespace' ':' 'namespace' :)
            or $state[$p:lk] = 673194                       (: 'namespace-rename' ':' 'namespace' :)
            or $state[$p:lk] = 673195                       (: 'pack' ':' 'namespace' :)
            or $state[$p:lk] = 673196                       (: 'parameters' ':' 'namespace' :)
            or $state[$p:lk] = 673198                       (: 'pipeline' ':' 'namespace' :)
            or $state[$p:lk] = 673200                       (: 'rename' ':' 'namespace' :)
            or $state[$p:lk] = 673201                       (: 'replace' ':' 'namespace' :)
            or $state[$p:lk] = 673203                       (: 'set-attributes' ':' 'namespace' :)
            or $state[$p:lk] = 673204                       (: 'sink' ':' 'namespace' :)
            or $state[$p:lk] = 673205                       (: 'split-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 673206                       (: 'step' ':' 'namespace' :)
            or $state[$p:lk] = 673207                       (: 'store' ':' 'namespace' :)
            or $state[$p:lk] = 673208                       (: 'string-replace' ':' 'namespace' :)
            or $state[$p:lk] = 673209                       (: 'try' ':' 'namespace' :)
            or $state[$p:lk] = 673210                       (: 'unescape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 673211                       (: 'unwrap' ':' 'namespace' :)
            or $state[$p:lk] = 673212                       (: 'uuid' ':' 'namespace' :)
            or $state[$p:lk] = 673213                       (: 'validate-with-relax-ng' ':' 'namespace' :)
            or $state[$p:lk] = 673214                       (: 'validate-with-schematron' ':' 'namespace' :)
            or $state[$p:lk] = 673215                       (: 'validate-with-xml-schema' ':' 'namespace' :)
            or $state[$p:lk] = 673216                       (: 'variable' ':' 'namespace' :)
            or $state[$p:lk] = 673217                       (: 'viewport' ':' 'namespace' :)
            or $state[$p:lk] = 673218                       (: 'wrap' ':' 'namespace' :)
            or $state[$p:lk] = 673219                       (: 'wrap-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 673220                       (: 'www-form-urldecode' ':' 'namespace' :)
            or $state[$p:lk] = 673221                       (: 'www-form-urlencode' ':' 'namespace' :)
            or $state[$p:lk] = 673222                       (: 'xinclude' ':' 'namespace' :)
            or $state[$p:lk] = 673223                       (: 'xquery' ':' 'namespace' :)
            or $state[$p:lk] = 673224                       (: 'xsl-formatter' ':' 'namespace' :)
            or $state[$p:lk] = 673225                       (: 'xslt' ':' 'namespace' :)
            or $state[$p:lk] = 689541                       (: NCName^Token ':' 'namespace-rename' :)
            or $state[$p:lk] = 689550                       (: 'add-attribute' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689551                       (: 'add-xml-base' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689553                       (: 'compare' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689554                       (: 'count' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689555                       (: 'default' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689556                       (: 'delete' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689557                       (: 'directory-list' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689559                       (: 'else' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689561                       (: 'error' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689562                       (: 'escape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689563                       (: 'exec' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689564                       (: 'filter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689565                       (: 'for-each' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689567                       (: 'hash' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689568                       (: 'http-request' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689569                       (: 'identity' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689570                       (: 'if' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689571                       (: 'insert' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689573                       (: 'label-elements' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689574                       (: 'library' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689575                       (: 'load' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689576                       (: 'make-absolute-uris' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689577                       (: 'namespace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689578                       (: 'namespace-rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689579                       (: 'pack' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689580                       (: 'parameters' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689582                       (: 'pipeline' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689584                       (: 'rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689585                       (: 'replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689587                       (: 'set-attributes' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689588                       (: 'sink' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689589                       (: 'split-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689590                       (: 'step' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689591                       (: 'store' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689592                       (: 'string-replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689593                       (: 'try' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689594                       (: 'unescape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689595                       (: 'unwrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689596                       (: 'uuid' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689597                       (: 'validate-with-relax-ng' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689598                       (: 'validate-with-schematron' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689599                       (: 'validate-with-xml-schema' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689600                       (: 'variable' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689601                       (: 'viewport' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689602                       (: 'wrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689603                       (: 'wrap-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689604                       (: 'www-form-urldecode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689605                       (: 'www-form-urlencode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689606                       (: 'xinclude' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689607                       (: 'xquery' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689608                       (: 'xsl-formatter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 689609                       (: 'xslt' ':' 'namespace-rename' :)
            or $state[$p:lk] = 705925                       (: NCName^Token ':' 'pack' :)
            or $state[$p:lk] = 705934                       (: 'add-attribute' ':' 'pack' :)
            or $state[$p:lk] = 705935                       (: 'add-xml-base' ':' 'pack' :)
            or $state[$p:lk] = 705937                       (: 'compare' ':' 'pack' :)
            or $state[$p:lk] = 705938                       (: 'count' ':' 'pack' :)
            or $state[$p:lk] = 705939                       (: 'default' ':' 'pack' :)
            or $state[$p:lk] = 705940                       (: 'delete' ':' 'pack' :)
            or $state[$p:lk] = 705941                       (: 'directory-list' ':' 'pack' :)
            or $state[$p:lk] = 705943                       (: 'else' ':' 'pack' :)
            or $state[$p:lk] = 705945                       (: 'error' ':' 'pack' :)
            or $state[$p:lk] = 705946                       (: 'escape-markup' ':' 'pack' :)
            or $state[$p:lk] = 705947                       (: 'exec' ':' 'pack' :)
            or $state[$p:lk] = 705948                       (: 'filter' ':' 'pack' :)
            or $state[$p:lk] = 705949                       (: 'for-each' ':' 'pack' :)
            or $state[$p:lk] = 705951                       (: 'hash' ':' 'pack' :)
            or $state[$p:lk] = 705952                       (: 'http-request' ':' 'pack' :)
            or $state[$p:lk] = 705953                       (: 'identity' ':' 'pack' :)
            or $state[$p:lk] = 705954                       (: 'if' ':' 'pack' :)
            or $state[$p:lk] = 705955                       (: 'insert' ':' 'pack' :)
            or $state[$p:lk] = 705957                       (: 'label-elements' ':' 'pack' :)
            or $state[$p:lk] = 705958                       (: 'library' ':' 'pack' :)
            or $state[$p:lk] = 705959                       (: 'load' ':' 'pack' :)
            or $state[$p:lk] = 705960                       (: 'make-absolute-uris' ':' 'pack' :)
            or $state[$p:lk] = 705961                       (: 'namespace' ':' 'pack' :)
            or $state[$p:lk] = 705962                       (: 'namespace-rename' ':' 'pack' :)
            or $state[$p:lk] = 705963                       (: 'pack' ':' 'pack' :)
            or $state[$p:lk] = 705964                       (: 'parameters' ':' 'pack' :)
            or $state[$p:lk] = 705966                       (: 'pipeline' ':' 'pack' :)
            or $state[$p:lk] = 705968                       (: 'rename' ':' 'pack' :)
            or $state[$p:lk] = 705969                       (: 'replace' ':' 'pack' :)
            or $state[$p:lk] = 705971                       (: 'set-attributes' ':' 'pack' :)
            or $state[$p:lk] = 705972                       (: 'sink' ':' 'pack' :)
            or $state[$p:lk] = 705973                       (: 'split-sequence' ':' 'pack' :)
            or $state[$p:lk] = 705974                       (: 'step' ':' 'pack' :)
            or $state[$p:lk] = 705975                       (: 'store' ':' 'pack' :)
            or $state[$p:lk] = 705976                       (: 'string-replace' ':' 'pack' :)
            or $state[$p:lk] = 705977                       (: 'try' ':' 'pack' :)
            or $state[$p:lk] = 705978                       (: 'unescape-markup' ':' 'pack' :)
            or $state[$p:lk] = 705979                       (: 'unwrap' ':' 'pack' :)
            or $state[$p:lk] = 705980                       (: 'uuid' ':' 'pack' :)
            or $state[$p:lk] = 705981                       (: 'validate-with-relax-ng' ':' 'pack' :)
            or $state[$p:lk] = 705982                       (: 'validate-with-schematron' ':' 'pack' :)
            or $state[$p:lk] = 705983                       (: 'validate-with-xml-schema' ':' 'pack' :)
            or $state[$p:lk] = 705984                       (: 'variable' ':' 'pack' :)
            or $state[$p:lk] = 705985                       (: 'viewport' ':' 'pack' :)
            or $state[$p:lk] = 705986                       (: 'wrap' ':' 'pack' :)
            or $state[$p:lk] = 705987                       (: 'wrap-sequence' ':' 'pack' :)
            or $state[$p:lk] = 705988                       (: 'www-form-urldecode' ':' 'pack' :)
            or $state[$p:lk] = 705989                       (: 'www-form-urlencode' ':' 'pack' :)
            or $state[$p:lk] = 705990                       (: 'xinclude' ':' 'pack' :)
            or $state[$p:lk] = 705991                       (: 'xquery' ':' 'pack' :)
            or $state[$p:lk] = 705992                       (: 'xsl-formatter' ':' 'pack' :)
            or $state[$p:lk] = 705993                       (: 'xslt' ':' 'pack' :)
            or $state[$p:lk] = 722309                       (: NCName^Token ':' 'parameters' :)
            or $state[$p:lk] = 722318                       (: 'add-attribute' ':' 'parameters' :)
            or $state[$p:lk] = 722319                       (: 'add-xml-base' ':' 'parameters' :)
            or $state[$p:lk] = 722321                       (: 'compare' ':' 'parameters' :)
            or $state[$p:lk] = 722322                       (: 'count' ':' 'parameters' :)
            or $state[$p:lk] = 722323                       (: 'default' ':' 'parameters' :)
            or $state[$p:lk] = 722324                       (: 'delete' ':' 'parameters' :)
            or $state[$p:lk] = 722325                       (: 'directory-list' ':' 'parameters' :)
            or $state[$p:lk] = 722327                       (: 'else' ':' 'parameters' :)
            or $state[$p:lk] = 722329                       (: 'error' ':' 'parameters' :)
            or $state[$p:lk] = 722330                       (: 'escape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 722331                       (: 'exec' ':' 'parameters' :)
            or $state[$p:lk] = 722332                       (: 'filter' ':' 'parameters' :)
            or $state[$p:lk] = 722333                       (: 'for-each' ':' 'parameters' :)
            or $state[$p:lk] = 722335                       (: 'hash' ':' 'parameters' :)
            or $state[$p:lk] = 722336                       (: 'http-request' ':' 'parameters' :)
            or $state[$p:lk] = 722337                       (: 'identity' ':' 'parameters' :)
            or $state[$p:lk] = 722338                       (: 'if' ':' 'parameters' :)
            or $state[$p:lk] = 722339                       (: 'insert' ':' 'parameters' :)
            or $state[$p:lk] = 722341                       (: 'label-elements' ':' 'parameters' :)
            or $state[$p:lk] = 722342                       (: 'library' ':' 'parameters' :)
            or $state[$p:lk] = 722343                       (: 'load' ':' 'parameters' :)
            or $state[$p:lk] = 722344                       (: 'make-absolute-uris' ':' 'parameters' :)
            or $state[$p:lk] = 722345                       (: 'namespace' ':' 'parameters' :)
            or $state[$p:lk] = 722346                       (: 'namespace-rename' ':' 'parameters' :)
            or $state[$p:lk] = 722347                       (: 'pack' ':' 'parameters' :)
            or $state[$p:lk] = 722348                       (: 'parameters' ':' 'parameters' :)
            or $state[$p:lk] = 722350                       (: 'pipeline' ':' 'parameters' :)
            or $state[$p:lk] = 722352                       (: 'rename' ':' 'parameters' :)
            or $state[$p:lk] = 722353                       (: 'replace' ':' 'parameters' :)
            or $state[$p:lk] = 722355                       (: 'set-attributes' ':' 'parameters' :)
            or $state[$p:lk] = 722356                       (: 'sink' ':' 'parameters' :)
            or $state[$p:lk] = 722357                       (: 'split-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 722358                       (: 'step' ':' 'parameters' :)
            or $state[$p:lk] = 722359                       (: 'store' ':' 'parameters' :)
            or $state[$p:lk] = 722360                       (: 'string-replace' ':' 'parameters' :)
            or $state[$p:lk] = 722361                       (: 'try' ':' 'parameters' :)
            or $state[$p:lk] = 722362                       (: 'unescape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 722363                       (: 'unwrap' ':' 'parameters' :)
            or $state[$p:lk] = 722364                       (: 'uuid' ':' 'parameters' :)
            or $state[$p:lk] = 722365                       (: 'validate-with-relax-ng' ':' 'parameters' :)
            or $state[$p:lk] = 722366                       (: 'validate-with-schematron' ':' 'parameters' :)
            or $state[$p:lk] = 722367                       (: 'validate-with-xml-schema' ':' 'parameters' :)
            or $state[$p:lk] = 722368                       (: 'variable' ':' 'parameters' :)
            or $state[$p:lk] = 722369                       (: 'viewport' ':' 'parameters' :)
            or $state[$p:lk] = 722370                       (: 'wrap' ':' 'parameters' :)
            or $state[$p:lk] = 722371                       (: 'wrap-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 722372                       (: 'www-form-urldecode' ':' 'parameters' :)
            or $state[$p:lk] = 722373                       (: 'www-form-urlencode' ':' 'parameters' :)
            or $state[$p:lk] = 722374                       (: 'xinclude' ':' 'parameters' :)
            or $state[$p:lk] = 722375                       (: 'xquery' ':' 'parameters' :)
            or $state[$p:lk] = 722376                       (: 'xsl-formatter' ':' 'parameters' :)
            or $state[$p:lk] = 722377                       (: 'xslt' ':' 'parameters' :)
            or $state[$p:lk] = 755077                       (: NCName^Token ':' 'pipeline' :)
            or $state[$p:lk] = 755086                       (: 'add-attribute' ':' 'pipeline' :)
            or $state[$p:lk] = 755087                       (: 'add-xml-base' ':' 'pipeline' :)
            or $state[$p:lk] = 755089                       (: 'compare' ':' 'pipeline' :)
            or $state[$p:lk] = 755090                       (: 'count' ':' 'pipeline' :)
            or $state[$p:lk] = 755091                       (: 'default' ':' 'pipeline' :)
            or $state[$p:lk] = 755092                       (: 'delete' ':' 'pipeline' :)
            or $state[$p:lk] = 755093                       (: 'directory-list' ':' 'pipeline' :)
            or $state[$p:lk] = 755095                       (: 'else' ':' 'pipeline' :)
            or $state[$p:lk] = 755097                       (: 'error' ':' 'pipeline' :)
            or $state[$p:lk] = 755098                       (: 'escape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 755099                       (: 'exec' ':' 'pipeline' :)
            or $state[$p:lk] = 755100                       (: 'filter' ':' 'pipeline' :)
            or $state[$p:lk] = 755101                       (: 'for-each' ':' 'pipeline' :)
            or $state[$p:lk] = 755103                       (: 'hash' ':' 'pipeline' :)
            or $state[$p:lk] = 755104                       (: 'http-request' ':' 'pipeline' :)
            or $state[$p:lk] = 755105                       (: 'identity' ':' 'pipeline' :)
            or $state[$p:lk] = 755106                       (: 'if' ':' 'pipeline' :)
            or $state[$p:lk] = 755107                       (: 'insert' ':' 'pipeline' :)
            or $state[$p:lk] = 755109                       (: 'label-elements' ':' 'pipeline' :)
            or $state[$p:lk] = 755110                       (: 'library' ':' 'pipeline' :)
            or $state[$p:lk] = 755111                       (: 'load' ':' 'pipeline' :)
            or $state[$p:lk] = 755112                       (: 'make-absolute-uris' ':' 'pipeline' :)
            or $state[$p:lk] = 755113                       (: 'namespace' ':' 'pipeline' :)
            or $state[$p:lk] = 755114                       (: 'namespace-rename' ':' 'pipeline' :)
            or $state[$p:lk] = 755115                       (: 'pack' ':' 'pipeline' :)
            or $state[$p:lk] = 755116                       (: 'parameters' ':' 'pipeline' :)
            or $state[$p:lk] = 755118                       (: 'pipeline' ':' 'pipeline' :)
            or $state[$p:lk] = 755120                       (: 'rename' ':' 'pipeline' :)
            or $state[$p:lk] = 755121                       (: 'replace' ':' 'pipeline' :)
            or $state[$p:lk] = 755123                       (: 'set-attributes' ':' 'pipeline' :)
            or $state[$p:lk] = 755124                       (: 'sink' ':' 'pipeline' :)
            or $state[$p:lk] = 755125                       (: 'split-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 755126                       (: 'step' ':' 'pipeline' :)
            or $state[$p:lk] = 755127                       (: 'store' ':' 'pipeline' :)
            or $state[$p:lk] = 755128                       (: 'string-replace' ':' 'pipeline' :)
            or $state[$p:lk] = 755129                       (: 'try' ':' 'pipeline' :)
            or $state[$p:lk] = 755130                       (: 'unescape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 755131                       (: 'unwrap' ':' 'pipeline' :)
            or $state[$p:lk] = 755132                       (: 'uuid' ':' 'pipeline' :)
            or $state[$p:lk] = 755133                       (: 'validate-with-relax-ng' ':' 'pipeline' :)
            or $state[$p:lk] = 755134                       (: 'validate-with-schematron' ':' 'pipeline' :)
            or $state[$p:lk] = 755135                       (: 'validate-with-xml-schema' ':' 'pipeline' :)
            or $state[$p:lk] = 755136                       (: 'variable' ':' 'pipeline' :)
            or $state[$p:lk] = 755137                       (: 'viewport' ':' 'pipeline' :)
            or $state[$p:lk] = 755138                       (: 'wrap' ':' 'pipeline' :)
            or $state[$p:lk] = 755139                       (: 'wrap-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 755140                       (: 'www-form-urldecode' ':' 'pipeline' :)
            or $state[$p:lk] = 755141                       (: 'www-form-urlencode' ':' 'pipeline' :)
            or $state[$p:lk] = 755142                       (: 'xinclude' ':' 'pipeline' :)
            or $state[$p:lk] = 755143                       (: 'xquery' ':' 'pipeline' :)
            or $state[$p:lk] = 755144                       (: 'xsl-formatter' ':' 'pipeline' :)
            or $state[$p:lk] = 755145                       (: 'xslt' ':' 'pipeline' :)
            or $state[$p:lk] = 787845                       (: NCName^Token ':' 'rename' :)
            or $state[$p:lk] = 787854                       (: 'add-attribute' ':' 'rename' :)
            or $state[$p:lk] = 787855                       (: 'add-xml-base' ':' 'rename' :)
            or $state[$p:lk] = 787857                       (: 'compare' ':' 'rename' :)
            or $state[$p:lk] = 787858                       (: 'count' ':' 'rename' :)
            or $state[$p:lk] = 787859                       (: 'default' ':' 'rename' :)
            or $state[$p:lk] = 787860                       (: 'delete' ':' 'rename' :)
            or $state[$p:lk] = 787861                       (: 'directory-list' ':' 'rename' :)
            or $state[$p:lk] = 787863                       (: 'else' ':' 'rename' :)
            or $state[$p:lk] = 787865                       (: 'error' ':' 'rename' :)
            or $state[$p:lk] = 787866                       (: 'escape-markup' ':' 'rename' :)
            or $state[$p:lk] = 787867                       (: 'exec' ':' 'rename' :)
            or $state[$p:lk] = 787868                       (: 'filter' ':' 'rename' :)
            or $state[$p:lk] = 787869                       (: 'for-each' ':' 'rename' :)
            or $state[$p:lk] = 787871                       (: 'hash' ':' 'rename' :)
            or $state[$p:lk] = 787872                       (: 'http-request' ':' 'rename' :)
            or $state[$p:lk] = 787873                       (: 'identity' ':' 'rename' :)
            or $state[$p:lk] = 787874                       (: 'if' ':' 'rename' :)
            or $state[$p:lk] = 787875                       (: 'insert' ':' 'rename' :)
            or $state[$p:lk] = 787877                       (: 'label-elements' ':' 'rename' :)
            or $state[$p:lk] = 787878                       (: 'library' ':' 'rename' :)
            or $state[$p:lk] = 787879                       (: 'load' ':' 'rename' :)
            or $state[$p:lk] = 787880                       (: 'make-absolute-uris' ':' 'rename' :)
            or $state[$p:lk] = 787881                       (: 'namespace' ':' 'rename' :)
            or $state[$p:lk] = 787882                       (: 'namespace-rename' ':' 'rename' :)
            or $state[$p:lk] = 787883                       (: 'pack' ':' 'rename' :)
            or $state[$p:lk] = 787884                       (: 'parameters' ':' 'rename' :)
            or $state[$p:lk] = 787886                       (: 'pipeline' ':' 'rename' :)
            or $state[$p:lk] = 787888                       (: 'rename' ':' 'rename' :)
            or $state[$p:lk] = 787889                       (: 'replace' ':' 'rename' :)
            or $state[$p:lk] = 787891                       (: 'set-attributes' ':' 'rename' :)
            or $state[$p:lk] = 787892                       (: 'sink' ':' 'rename' :)
            or $state[$p:lk] = 787893                       (: 'split-sequence' ':' 'rename' :)
            or $state[$p:lk] = 787894                       (: 'step' ':' 'rename' :)
            or $state[$p:lk] = 787895                       (: 'store' ':' 'rename' :)
            or $state[$p:lk] = 787896                       (: 'string-replace' ':' 'rename' :)
            or $state[$p:lk] = 787897                       (: 'try' ':' 'rename' :)
            or $state[$p:lk] = 787898                       (: 'unescape-markup' ':' 'rename' :)
            or $state[$p:lk] = 787899                       (: 'unwrap' ':' 'rename' :)
            or $state[$p:lk] = 787900                       (: 'uuid' ':' 'rename' :)
            or $state[$p:lk] = 787901                       (: 'validate-with-relax-ng' ':' 'rename' :)
            or $state[$p:lk] = 787902                       (: 'validate-with-schematron' ':' 'rename' :)
            or $state[$p:lk] = 787903                       (: 'validate-with-xml-schema' ':' 'rename' :)
            or $state[$p:lk] = 787904                       (: 'variable' ':' 'rename' :)
            or $state[$p:lk] = 787905                       (: 'viewport' ':' 'rename' :)
            or $state[$p:lk] = 787906                       (: 'wrap' ':' 'rename' :)
            or $state[$p:lk] = 787907                       (: 'wrap-sequence' ':' 'rename' :)
            or $state[$p:lk] = 787908                       (: 'www-form-urldecode' ':' 'rename' :)
            or $state[$p:lk] = 787909                       (: 'www-form-urlencode' ':' 'rename' :)
            or $state[$p:lk] = 787910                       (: 'xinclude' ':' 'rename' :)
            or $state[$p:lk] = 787911                       (: 'xquery' ':' 'rename' :)
            or $state[$p:lk] = 787912                       (: 'xsl-formatter' ':' 'rename' :)
            or $state[$p:lk] = 787913                       (: 'xslt' ':' 'rename' :)
            or $state[$p:lk] = 804229                       (: NCName^Token ':' 'replace' :)
            or $state[$p:lk] = 804238                       (: 'add-attribute' ':' 'replace' :)
            or $state[$p:lk] = 804239                       (: 'add-xml-base' ':' 'replace' :)
            or $state[$p:lk] = 804241                       (: 'compare' ':' 'replace' :)
            or $state[$p:lk] = 804242                       (: 'count' ':' 'replace' :)
            or $state[$p:lk] = 804243                       (: 'default' ':' 'replace' :)
            or $state[$p:lk] = 804244                       (: 'delete' ':' 'replace' :)
            or $state[$p:lk] = 804245                       (: 'directory-list' ':' 'replace' :)
            or $state[$p:lk] = 804247                       (: 'else' ':' 'replace' :)
            or $state[$p:lk] = 804249                       (: 'error' ':' 'replace' :)
            or $state[$p:lk] = 804250                       (: 'escape-markup' ':' 'replace' :)
            or $state[$p:lk] = 804251                       (: 'exec' ':' 'replace' :)
            or $state[$p:lk] = 804252                       (: 'filter' ':' 'replace' :)
            or $state[$p:lk] = 804253                       (: 'for-each' ':' 'replace' :)
            or $state[$p:lk] = 804255                       (: 'hash' ':' 'replace' :)
            or $state[$p:lk] = 804256                       (: 'http-request' ':' 'replace' :)
            or $state[$p:lk] = 804257                       (: 'identity' ':' 'replace' :)
            or $state[$p:lk] = 804258                       (: 'if' ':' 'replace' :)
            or $state[$p:lk] = 804259                       (: 'insert' ':' 'replace' :)
            or $state[$p:lk] = 804261                       (: 'label-elements' ':' 'replace' :)
            or $state[$p:lk] = 804262                       (: 'library' ':' 'replace' :)
            or $state[$p:lk] = 804263                       (: 'load' ':' 'replace' :)
            or $state[$p:lk] = 804264                       (: 'make-absolute-uris' ':' 'replace' :)
            or $state[$p:lk] = 804265                       (: 'namespace' ':' 'replace' :)
            or $state[$p:lk] = 804266                       (: 'namespace-rename' ':' 'replace' :)
            or $state[$p:lk] = 804267                       (: 'pack' ':' 'replace' :)
            or $state[$p:lk] = 804268                       (: 'parameters' ':' 'replace' :)
            or $state[$p:lk] = 804270                       (: 'pipeline' ':' 'replace' :)
            or $state[$p:lk] = 804272                       (: 'rename' ':' 'replace' :)
            or $state[$p:lk] = 804273                       (: 'replace' ':' 'replace' :)
            or $state[$p:lk] = 804275                       (: 'set-attributes' ':' 'replace' :)
            or $state[$p:lk] = 804276                       (: 'sink' ':' 'replace' :)
            or $state[$p:lk] = 804277                       (: 'split-sequence' ':' 'replace' :)
            or $state[$p:lk] = 804278                       (: 'step' ':' 'replace' :)
            or $state[$p:lk] = 804279                       (: 'store' ':' 'replace' :)
            or $state[$p:lk] = 804280                       (: 'string-replace' ':' 'replace' :)
            or $state[$p:lk] = 804281                       (: 'try' ':' 'replace' :)
            or $state[$p:lk] = 804282                       (: 'unescape-markup' ':' 'replace' :)
            or $state[$p:lk] = 804283                       (: 'unwrap' ':' 'replace' :)
            or $state[$p:lk] = 804284                       (: 'uuid' ':' 'replace' :)
            or $state[$p:lk] = 804285                       (: 'validate-with-relax-ng' ':' 'replace' :)
            or $state[$p:lk] = 804286                       (: 'validate-with-schematron' ':' 'replace' :)
            or $state[$p:lk] = 804287                       (: 'validate-with-xml-schema' ':' 'replace' :)
            or $state[$p:lk] = 804288                       (: 'variable' ':' 'replace' :)
            or $state[$p:lk] = 804289                       (: 'viewport' ':' 'replace' :)
            or $state[$p:lk] = 804290                       (: 'wrap' ':' 'replace' :)
            or $state[$p:lk] = 804291                       (: 'wrap-sequence' ':' 'replace' :)
            or $state[$p:lk] = 804292                       (: 'www-form-urldecode' ':' 'replace' :)
            or $state[$p:lk] = 804293                       (: 'www-form-urlencode' ':' 'replace' :)
            or $state[$p:lk] = 804294                       (: 'xinclude' ':' 'replace' :)
            or $state[$p:lk] = 804295                       (: 'xquery' ':' 'replace' :)
            or $state[$p:lk] = 804296                       (: 'xsl-formatter' ':' 'replace' :)
            or $state[$p:lk] = 804297                       (: 'xslt' ':' 'replace' :)
            or $state[$p:lk] = 836997                       (: NCName^Token ':' 'set-attributes' :)
            or $state[$p:lk] = 837006                       (: 'add-attribute' ':' 'set-attributes' :)
            or $state[$p:lk] = 837007                       (: 'add-xml-base' ':' 'set-attributes' :)
            or $state[$p:lk] = 837009                       (: 'compare' ':' 'set-attributes' :)
            or $state[$p:lk] = 837010                       (: 'count' ':' 'set-attributes' :)
            or $state[$p:lk] = 837011                       (: 'default' ':' 'set-attributes' :)
            or $state[$p:lk] = 837012                       (: 'delete' ':' 'set-attributes' :)
            or $state[$p:lk] = 837013                       (: 'directory-list' ':' 'set-attributes' :)
            or $state[$p:lk] = 837015                       (: 'else' ':' 'set-attributes' :)
            or $state[$p:lk] = 837017                       (: 'error' ':' 'set-attributes' :)
            or $state[$p:lk] = 837018                       (: 'escape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 837019                       (: 'exec' ':' 'set-attributes' :)
            or $state[$p:lk] = 837020                       (: 'filter' ':' 'set-attributes' :)
            or $state[$p:lk] = 837021                       (: 'for-each' ':' 'set-attributes' :)
            or $state[$p:lk] = 837023                       (: 'hash' ':' 'set-attributes' :)
            or $state[$p:lk] = 837024                       (: 'http-request' ':' 'set-attributes' :)
            or $state[$p:lk] = 837025                       (: 'identity' ':' 'set-attributes' :)
            or $state[$p:lk] = 837026                       (: 'if' ':' 'set-attributes' :)
            or $state[$p:lk] = 837027                       (: 'insert' ':' 'set-attributes' :)
            or $state[$p:lk] = 837029                       (: 'label-elements' ':' 'set-attributes' :)
            or $state[$p:lk] = 837030                       (: 'library' ':' 'set-attributes' :)
            or $state[$p:lk] = 837031                       (: 'load' ':' 'set-attributes' :)
            or $state[$p:lk] = 837032                       (: 'make-absolute-uris' ':' 'set-attributes' :)
            or $state[$p:lk] = 837033                       (: 'namespace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837034                       (: 'namespace-rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 837035                       (: 'pack' ':' 'set-attributes' :)
            or $state[$p:lk] = 837036                       (: 'parameters' ':' 'set-attributes' :)
            or $state[$p:lk] = 837038                       (: 'pipeline' ':' 'set-attributes' :)
            or $state[$p:lk] = 837040                       (: 'rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 837041                       (: 'replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837043                       (: 'set-attributes' ':' 'set-attributes' :)
            or $state[$p:lk] = 837044                       (: 'sink' ':' 'set-attributes' :)
            or $state[$p:lk] = 837045                       (: 'split-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 837046                       (: 'step' ':' 'set-attributes' :)
            or $state[$p:lk] = 837047                       (: 'store' ':' 'set-attributes' :)
            or $state[$p:lk] = 837048                       (: 'string-replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 837049                       (: 'try' ':' 'set-attributes' :)
            or $state[$p:lk] = 837050                       (: 'unescape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 837051                       (: 'unwrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 837052                       (: 'uuid' ':' 'set-attributes' :)
            or $state[$p:lk] = 837053                       (: 'validate-with-relax-ng' ':' 'set-attributes' :)
            or $state[$p:lk] = 837054                       (: 'validate-with-schematron' ':' 'set-attributes' :)
            or $state[$p:lk] = 837055                       (: 'validate-with-xml-schema' ':' 'set-attributes' :)
            or $state[$p:lk] = 837056                       (: 'variable' ':' 'set-attributes' :)
            or $state[$p:lk] = 837057                       (: 'viewport' ':' 'set-attributes' :)
            or $state[$p:lk] = 837058                       (: 'wrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 837059                       (: 'wrap-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 837060                       (: 'www-form-urldecode' ':' 'set-attributes' :)
            or $state[$p:lk] = 837061                       (: 'www-form-urlencode' ':' 'set-attributes' :)
            or $state[$p:lk] = 837062                       (: 'xinclude' ':' 'set-attributes' :)
            or $state[$p:lk] = 837063                       (: 'xquery' ':' 'set-attributes' :)
            or $state[$p:lk] = 837064                       (: 'xsl-formatter' ':' 'set-attributes' :)
            or $state[$p:lk] = 837065                       (: 'xslt' ':' 'set-attributes' :)
            or $state[$p:lk] = 853381                       (: NCName^Token ':' 'sink' :)
            or $state[$p:lk] = 853390                       (: 'add-attribute' ':' 'sink' :)
            or $state[$p:lk] = 853391                       (: 'add-xml-base' ':' 'sink' :)
            or $state[$p:lk] = 853393                       (: 'compare' ':' 'sink' :)
            or $state[$p:lk] = 853394                       (: 'count' ':' 'sink' :)
            or $state[$p:lk] = 853395                       (: 'default' ':' 'sink' :)
            or $state[$p:lk] = 853396                       (: 'delete' ':' 'sink' :)
            or $state[$p:lk] = 853397                       (: 'directory-list' ':' 'sink' :)
            or $state[$p:lk] = 853399                       (: 'else' ':' 'sink' :)
            or $state[$p:lk] = 853401                       (: 'error' ':' 'sink' :)
            or $state[$p:lk] = 853402                       (: 'escape-markup' ':' 'sink' :)
            or $state[$p:lk] = 853403                       (: 'exec' ':' 'sink' :)
            or $state[$p:lk] = 853404                       (: 'filter' ':' 'sink' :)
            or $state[$p:lk] = 853405                       (: 'for-each' ':' 'sink' :)
            or $state[$p:lk] = 853407                       (: 'hash' ':' 'sink' :)
            or $state[$p:lk] = 853408                       (: 'http-request' ':' 'sink' :)
            or $state[$p:lk] = 853409                       (: 'identity' ':' 'sink' :)
            or $state[$p:lk] = 853410                       (: 'if' ':' 'sink' :)
            or $state[$p:lk] = 853411                       (: 'insert' ':' 'sink' :)
            or $state[$p:lk] = 853413                       (: 'label-elements' ':' 'sink' :)
            or $state[$p:lk] = 853414                       (: 'library' ':' 'sink' :)
            or $state[$p:lk] = 853415                       (: 'load' ':' 'sink' :)
            or $state[$p:lk] = 853416                       (: 'make-absolute-uris' ':' 'sink' :)
            or $state[$p:lk] = 853417                       (: 'namespace' ':' 'sink' :)
            or $state[$p:lk] = 853418                       (: 'namespace-rename' ':' 'sink' :)
            or $state[$p:lk] = 853419                       (: 'pack' ':' 'sink' :)
            or $state[$p:lk] = 853420                       (: 'parameters' ':' 'sink' :)
            or $state[$p:lk] = 853422                       (: 'pipeline' ':' 'sink' :)
            or $state[$p:lk] = 853424                       (: 'rename' ':' 'sink' :)
            or $state[$p:lk] = 853425                       (: 'replace' ':' 'sink' :)
            or $state[$p:lk] = 853427                       (: 'set-attributes' ':' 'sink' :)
            or $state[$p:lk] = 853428                       (: 'sink' ':' 'sink' :)
            or $state[$p:lk] = 853429                       (: 'split-sequence' ':' 'sink' :)
            or $state[$p:lk] = 853430                       (: 'step' ':' 'sink' :)
            or $state[$p:lk] = 853431                       (: 'store' ':' 'sink' :)
            or $state[$p:lk] = 853432                       (: 'string-replace' ':' 'sink' :)
            or $state[$p:lk] = 853433                       (: 'try' ':' 'sink' :)
            or $state[$p:lk] = 853434                       (: 'unescape-markup' ':' 'sink' :)
            or $state[$p:lk] = 853435                       (: 'unwrap' ':' 'sink' :)
            or $state[$p:lk] = 853436                       (: 'uuid' ':' 'sink' :)
            or $state[$p:lk] = 853437                       (: 'validate-with-relax-ng' ':' 'sink' :)
            or $state[$p:lk] = 853438                       (: 'validate-with-schematron' ':' 'sink' :)
            or $state[$p:lk] = 853439                       (: 'validate-with-xml-schema' ':' 'sink' :)
            or $state[$p:lk] = 853440                       (: 'variable' ':' 'sink' :)
            or $state[$p:lk] = 853441                       (: 'viewport' ':' 'sink' :)
            or $state[$p:lk] = 853442                       (: 'wrap' ':' 'sink' :)
            or $state[$p:lk] = 853443                       (: 'wrap-sequence' ':' 'sink' :)
            or $state[$p:lk] = 853444                       (: 'www-form-urldecode' ':' 'sink' :)
            or $state[$p:lk] = 853445                       (: 'www-form-urlencode' ':' 'sink' :)
            or $state[$p:lk] = 853446                       (: 'xinclude' ':' 'sink' :)
            or $state[$p:lk] = 853447                       (: 'xquery' ':' 'sink' :)
            or $state[$p:lk] = 853448                       (: 'xsl-formatter' ':' 'sink' :)
            or $state[$p:lk] = 853449                       (: 'xslt' ':' 'sink' :)
            or $state[$p:lk] = 869765                       (: NCName^Token ':' 'split-sequence' :)
            or $state[$p:lk] = 869774                       (: 'add-attribute' ':' 'split-sequence' :)
            or $state[$p:lk] = 869775                       (: 'add-xml-base' ':' 'split-sequence' :)
            or $state[$p:lk] = 869777                       (: 'compare' ':' 'split-sequence' :)
            or $state[$p:lk] = 869778                       (: 'count' ':' 'split-sequence' :)
            or $state[$p:lk] = 869779                       (: 'default' ':' 'split-sequence' :)
            or $state[$p:lk] = 869780                       (: 'delete' ':' 'split-sequence' :)
            or $state[$p:lk] = 869781                       (: 'directory-list' ':' 'split-sequence' :)
            or $state[$p:lk] = 869783                       (: 'else' ':' 'split-sequence' :)
            or $state[$p:lk] = 869785                       (: 'error' ':' 'split-sequence' :)
            or $state[$p:lk] = 869786                       (: 'escape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 869787                       (: 'exec' ':' 'split-sequence' :)
            or $state[$p:lk] = 869788                       (: 'filter' ':' 'split-sequence' :)
            or $state[$p:lk] = 869789                       (: 'for-each' ':' 'split-sequence' :)
            or $state[$p:lk] = 869791                       (: 'hash' ':' 'split-sequence' :)
            or $state[$p:lk] = 869792                       (: 'http-request' ':' 'split-sequence' :)
            or $state[$p:lk] = 869793                       (: 'identity' ':' 'split-sequence' :)
            or $state[$p:lk] = 869794                       (: 'if' ':' 'split-sequence' :)
            or $state[$p:lk] = 869795                       (: 'insert' ':' 'split-sequence' :)
            or $state[$p:lk] = 869797                       (: 'label-elements' ':' 'split-sequence' :)
            or $state[$p:lk] = 869798                       (: 'library' ':' 'split-sequence' :)
            or $state[$p:lk] = 869799                       (: 'load' ':' 'split-sequence' :)
            or $state[$p:lk] = 869800                       (: 'make-absolute-uris' ':' 'split-sequence' :)
            or $state[$p:lk] = 869801                       (: 'namespace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869802                       (: 'namespace-rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 869803                       (: 'pack' ':' 'split-sequence' :)
            or $state[$p:lk] = 869804                       (: 'parameters' ':' 'split-sequence' :)
            or $state[$p:lk] = 869806                       (: 'pipeline' ':' 'split-sequence' :)
            or $state[$p:lk] = 869808                       (: 'rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 869809                       (: 'replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869811                       (: 'set-attributes' ':' 'split-sequence' :)
            or $state[$p:lk] = 869812                       (: 'sink' ':' 'split-sequence' :)
            or $state[$p:lk] = 869813                       (: 'split-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 869814                       (: 'step' ':' 'split-sequence' :)
            or $state[$p:lk] = 869815                       (: 'store' ':' 'split-sequence' :)
            or $state[$p:lk] = 869816                       (: 'string-replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 869817                       (: 'try' ':' 'split-sequence' :)
            or $state[$p:lk] = 869818                       (: 'unescape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 869819                       (: 'unwrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 869820                       (: 'uuid' ':' 'split-sequence' :)
            or $state[$p:lk] = 869821                       (: 'validate-with-relax-ng' ':' 'split-sequence' :)
            or $state[$p:lk] = 869822                       (: 'validate-with-schematron' ':' 'split-sequence' :)
            or $state[$p:lk] = 869823                       (: 'validate-with-xml-schema' ':' 'split-sequence' :)
            or $state[$p:lk] = 869824                       (: 'variable' ':' 'split-sequence' :)
            or $state[$p:lk] = 869825                       (: 'viewport' ':' 'split-sequence' :)
            or $state[$p:lk] = 869826                       (: 'wrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 869827                       (: 'wrap-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 869828                       (: 'www-form-urldecode' ':' 'split-sequence' :)
            or $state[$p:lk] = 869829                       (: 'www-form-urlencode' ':' 'split-sequence' :)
            or $state[$p:lk] = 869830                       (: 'xinclude' ':' 'split-sequence' :)
            or $state[$p:lk] = 869831                       (: 'xquery' ':' 'split-sequence' :)
            or $state[$p:lk] = 869832                       (: 'xsl-formatter' ':' 'split-sequence' :)
            or $state[$p:lk] = 869833                       (: 'xslt' ':' 'split-sequence' :)
            or $state[$p:lk] = 886149                       (: NCName^Token ':' 'step' :)
            or $state[$p:lk] = 886158                       (: 'add-attribute' ':' 'step' :)
            or $state[$p:lk] = 886159                       (: 'add-xml-base' ':' 'step' :)
            or $state[$p:lk] = 886161                       (: 'compare' ':' 'step' :)
            or $state[$p:lk] = 886162                       (: 'count' ':' 'step' :)
            or $state[$p:lk] = 886163                       (: 'default' ':' 'step' :)
            or $state[$p:lk] = 886164                       (: 'delete' ':' 'step' :)
            or $state[$p:lk] = 886165                       (: 'directory-list' ':' 'step' :)
            or $state[$p:lk] = 886167                       (: 'else' ':' 'step' :)
            or $state[$p:lk] = 886169                       (: 'error' ':' 'step' :)
            or $state[$p:lk] = 886170                       (: 'escape-markup' ':' 'step' :)
            or $state[$p:lk] = 886171                       (: 'exec' ':' 'step' :)
            or $state[$p:lk] = 886172                       (: 'filter' ':' 'step' :)
            or $state[$p:lk] = 886173                       (: 'for-each' ':' 'step' :)
            or $state[$p:lk] = 886175                       (: 'hash' ':' 'step' :)
            or $state[$p:lk] = 886176                       (: 'http-request' ':' 'step' :)
            or $state[$p:lk] = 886177                       (: 'identity' ':' 'step' :)
            or $state[$p:lk] = 886178                       (: 'if' ':' 'step' :)
            or $state[$p:lk] = 886179                       (: 'insert' ':' 'step' :)
            or $state[$p:lk] = 886181                       (: 'label-elements' ':' 'step' :)
            or $state[$p:lk] = 886182                       (: 'library' ':' 'step' :)
            or $state[$p:lk] = 886183                       (: 'load' ':' 'step' :)
            or $state[$p:lk] = 886184                       (: 'make-absolute-uris' ':' 'step' :)
            or $state[$p:lk] = 886185                       (: 'namespace' ':' 'step' :)
            or $state[$p:lk] = 886186                       (: 'namespace-rename' ':' 'step' :)
            or $state[$p:lk] = 886187                       (: 'pack' ':' 'step' :)
            or $state[$p:lk] = 886188                       (: 'parameters' ':' 'step' :)
            or $state[$p:lk] = 886190                       (: 'pipeline' ':' 'step' :)
            or $state[$p:lk] = 886192                       (: 'rename' ':' 'step' :)
            or $state[$p:lk] = 886193                       (: 'replace' ':' 'step' :)
            or $state[$p:lk] = 886195                       (: 'set-attributes' ':' 'step' :)
            or $state[$p:lk] = 886196                       (: 'sink' ':' 'step' :)
            or $state[$p:lk] = 886197                       (: 'split-sequence' ':' 'step' :)
            or $state[$p:lk] = 886198                       (: 'step' ':' 'step' :)
            or $state[$p:lk] = 886199                       (: 'store' ':' 'step' :)
            or $state[$p:lk] = 886200                       (: 'string-replace' ':' 'step' :)
            or $state[$p:lk] = 886201                       (: 'try' ':' 'step' :)
            or $state[$p:lk] = 886202                       (: 'unescape-markup' ':' 'step' :)
            or $state[$p:lk] = 886203                       (: 'unwrap' ':' 'step' :)
            or $state[$p:lk] = 886204                       (: 'uuid' ':' 'step' :)
            or $state[$p:lk] = 886205                       (: 'validate-with-relax-ng' ':' 'step' :)
            or $state[$p:lk] = 886206                       (: 'validate-with-schematron' ':' 'step' :)
            or $state[$p:lk] = 886207                       (: 'validate-with-xml-schema' ':' 'step' :)
            or $state[$p:lk] = 886208                       (: 'variable' ':' 'step' :)
            or $state[$p:lk] = 886209                       (: 'viewport' ':' 'step' :)
            or $state[$p:lk] = 886210                       (: 'wrap' ':' 'step' :)
            or $state[$p:lk] = 886211                       (: 'wrap-sequence' ':' 'step' :)
            or $state[$p:lk] = 886212                       (: 'www-form-urldecode' ':' 'step' :)
            or $state[$p:lk] = 886213                       (: 'www-form-urlencode' ':' 'step' :)
            or $state[$p:lk] = 886214                       (: 'xinclude' ':' 'step' :)
            or $state[$p:lk] = 886215                       (: 'xquery' ':' 'step' :)
            or $state[$p:lk] = 886216                       (: 'xsl-formatter' ':' 'step' :)
            or $state[$p:lk] = 886217                       (: 'xslt' ':' 'step' :)
            or $state[$p:lk] = 902533                       (: NCName^Token ':' 'store' :)
            or $state[$p:lk] = 902542                       (: 'add-attribute' ':' 'store' :)
            or $state[$p:lk] = 902543                       (: 'add-xml-base' ':' 'store' :)
            or $state[$p:lk] = 902545                       (: 'compare' ':' 'store' :)
            or $state[$p:lk] = 902546                       (: 'count' ':' 'store' :)
            or $state[$p:lk] = 902547                       (: 'default' ':' 'store' :)
            or $state[$p:lk] = 902548                       (: 'delete' ':' 'store' :)
            or $state[$p:lk] = 902549                       (: 'directory-list' ':' 'store' :)
            or $state[$p:lk] = 902551                       (: 'else' ':' 'store' :)
            or $state[$p:lk] = 902553                       (: 'error' ':' 'store' :)
            or $state[$p:lk] = 902554                       (: 'escape-markup' ':' 'store' :)
            or $state[$p:lk] = 902555                       (: 'exec' ':' 'store' :)
            or $state[$p:lk] = 902556                       (: 'filter' ':' 'store' :)
            or $state[$p:lk] = 902557                       (: 'for-each' ':' 'store' :)
            or $state[$p:lk] = 902559                       (: 'hash' ':' 'store' :)
            or $state[$p:lk] = 902560                       (: 'http-request' ':' 'store' :)
            or $state[$p:lk] = 902561                       (: 'identity' ':' 'store' :)
            or $state[$p:lk] = 902562                       (: 'if' ':' 'store' :)
            or $state[$p:lk] = 902563                       (: 'insert' ':' 'store' :)
            or $state[$p:lk] = 902565                       (: 'label-elements' ':' 'store' :)
            or $state[$p:lk] = 902566                       (: 'library' ':' 'store' :)
            or $state[$p:lk] = 902567                       (: 'load' ':' 'store' :)
            or $state[$p:lk] = 902568                       (: 'make-absolute-uris' ':' 'store' :)
            or $state[$p:lk] = 902569                       (: 'namespace' ':' 'store' :)
            or $state[$p:lk] = 902570                       (: 'namespace-rename' ':' 'store' :)
            or $state[$p:lk] = 902571                       (: 'pack' ':' 'store' :)
            or $state[$p:lk] = 902572                       (: 'parameters' ':' 'store' :)
            or $state[$p:lk] = 902574                       (: 'pipeline' ':' 'store' :)
            or $state[$p:lk] = 902576                       (: 'rename' ':' 'store' :)
            or $state[$p:lk] = 902577                       (: 'replace' ':' 'store' :)
            or $state[$p:lk] = 902579                       (: 'set-attributes' ':' 'store' :)
            or $state[$p:lk] = 902580                       (: 'sink' ':' 'store' :)
            or $state[$p:lk] = 902581                       (: 'split-sequence' ':' 'store' :)
            or $state[$p:lk] = 902582                       (: 'step' ':' 'store' :)
            or $state[$p:lk] = 902583                       (: 'store' ':' 'store' :)
            or $state[$p:lk] = 902584                       (: 'string-replace' ':' 'store' :)
            or $state[$p:lk] = 902585                       (: 'try' ':' 'store' :)
            or $state[$p:lk] = 902586                       (: 'unescape-markup' ':' 'store' :)
            or $state[$p:lk] = 902587                       (: 'unwrap' ':' 'store' :)
            or $state[$p:lk] = 902588                       (: 'uuid' ':' 'store' :)
            or $state[$p:lk] = 902589                       (: 'validate-with-relax-ng' ':' 'store' :)
            or $state[$p:lk] = 902590                       (: 'validate-with-schematron' ':' 'store' :)
            or $state[$p:lk] = 902591                       (: 'validate-with-xml-schema' ':' 'store' :)
            or $state[$p:lk] = 902592                       (: 'variable' ':' 'store' :)
            or $state[$p:lk] = 902593                       (: 'viewport' ':' 'store' :)
            or $state[$p:lk] = 902594                       (: 'wrap' ':' 'store' :)
            or $state[$p:lk] = 902595                       (: 'wrap-sequence' ':' 'store' :)
            or $state[$p:lk] = 902596                       (: 'www-form-urldecode' ':' 'store' :)
            or $state[$p:lk] = 902597                       (: 'www-form-urlencode' ':' 'store' :)
            or $state[$p:lk] = 902598                       (: 'xinclude' ':' 'store' :)
            or $state[$p:lk] = 902599                       (: 'xquery' ':' 'store' :)
            or $state[$p:lk] = 902600                       (: 'xsl-formatter' ':' 'store' :)
            or $state[$p:lk] = 902601                       (: 'xslt' ':' 'store' :)
            or $state[$p:lk] = 918917                       (: NCName^Token ':' 'string-replace' :)
            or $state[$p:lk] = 918926                       (: 'add-attribute' ':' 'string-replace' :)
            or $state[$p:lk] = 918927                       (: 'add-xml-base' ':' 'string-replace' :)
            or $state[$p:lk] = 918929                       (: 'compare' ':' 'string-replace' :)
            or $state[$p:lk] = 918930                       (: 'count' ':' 'string-replace' :)
            or $state[$p:lk] = 918931                       (: 'default' ':' 'string-replace' :)
            or $state[$p:lk] = 918932                       (: 'delete' ':' 'string-replace' :)
            or $state[$p:lk] = 918933                       (: 'directory-list' ':' 'string-replace' :)
            or $state[$p:lk] = 918935                       (: 'else' ':' 'string-replace' :)
            or $state[$p:lk] = 918937                       (: 'error' ':' 'string-replace' :)
            or $state[$p:lk] = 918938                       (: 'escape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 918939                       (: 'exec' ':' 'string-replace' :)
            or $state[$p:lk] = 918940                       (: 'filter' ':' 'string-replace' :)
            or $state[$p:lk] = 918941                       (: 'for-each' ':' 'string-replace' :)
            or $state[$p:lk] = 918943                       (: 'hash' ':' 'string-replace' :)
            or $state[$p:lk] = 918944                       (: 'http-request' ':' 'string-replace' :)
            or $state[$p:lk] = 918945                       (: 'identity' ':' 'string-replace' :)
            or $state[$p:lk] = 918946                       (: 'if' ':' 'string-replace' :)
            or $state[$p:lk] = 918947                       (: 'insert' ':' 'string-replace' :)
            or $state[$p:lk] = 918949                       (: 'label-elements' ':' 'string-replace' :)
            or $state[$p:lk] = 918950                       (: 'library' ':' 'string-replace' :)
            or $state[$p:lk] = 918951                       (: 'load' ':' 'string-replace' :)
            or $state[$p:lk] = 918952                       (: 'make-absolute-uris' ':' 'string-replace' :)
            or $state[$p:lk] = 918953                       (: 'namespace' ':' 'string-replace' :)
            or $state[$p:lk] = 918954                       (: 'namespace-rename' ':' 'string-replace' :)
            or $state[$p:lk] = 918955                       (: 'pack' ':' 'string-replace' :)
            or $state[$p:lk] = 918956                       (: 'parameters' ':' 'string-replace' :)
            or $state[$p:lk] = 918958                       (: 'pipeline' ':' 'string-replace' :)
            or $state[$p:lk] = 918960                       (: 'rename' ':' 'string-replace' :)
            or $state[$p:lk] = 918961                       (: 'replace' ':' 'string-replace' :)
            or $state[$p:lk] = 918963                       (: 'set-attributes' ':' 'string-replace' :)
            or $state[$p:lk] = 918964                       (: 'sink' ':' 'string-replace' :)
            or $state[$p:lk] = 918965                       (: 'split-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 918966                       (: 'step' ':' 'string-replace' :)
            or $state[$p:lk] = 918967                       (: 'store' ':' 'string-replace' :)
            or $state[$p:lk] = 918968                       (: 'string-replace' ':' 'string-replace' :)
            or $state[$p:lk] = 918969                       (: 'try' ':' 'string-replace' :)
            or $state[$p:lk] = 918970                       (: 'unescape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 918971                       (: 'unwrap' ':' 'string-replace' :)
            or $state[$p:lk] = 918972                       (: 'uuid' ':' 'string-replace' :)
            or $state[$p:lk] = 918973                       (: 'validate-with-relax-ng' ':' 'string-replace' :)
            or $state[$p:lk] = 918974                       (: 'validate-with-schematron' ':' 'string-replace' :)
            or $state[$p:lk] = 918975                       (: 'validate-with-xml-schema' ':' 'string-replace' :)
            or $state[$p:lk] = 918976                       (: 'variable' ':' 'string-replace' :)
            or $state[$p:lk] = 918977                       (: 'viewport' ':' 'string-replace' :)
            or $state[$p:lk] = 918978                       (: 'wrap' ':' 'string-replace' :)
            or $state[$p:lk] = 918979                       (: 'wrap-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 918980                       (: 'www-form-urldecode' ':' 'string-replace' :)
            or $state[$p:lk] = 918981                       (: 'www-form-urlencode' ':' 'string-replace' :)
            or $state[$p:lk] = 918982                       (: 'xinclude' ':' 'string-replace' :)
            or $state[$p:lk] = 918983                       (: 'xquery' ':' 'string-replace' :)
            or $state[$p:lk] = 918984                       (: 'xsl-formatter' ':' 'string-replace' :)
            or $state[$p:lk] = 918985                       (: 'xslt' ':' 'string-replace' :)
            or $state[$p:lk] = 935301                       (: NCName^Token ':' 'try' :)
            or $state[$p:lk] = 935310                       (: 'add-attribute' ':' 'try' :)
            or $state[$p:lk] = 935311                       (: 'add-xml-base' ':' 'try' :)
            or $state[$p:lk] = 935313                       (: 'compare' ':' 'try' :)
            or $state[$p:lk] = 935314                       (: 'count' ':' 'try' :)
            or $state[$p:lk] = 935315                       (: 'default' ':' 'try' :)
            or $state[$p:lk] = 935316                       (: 'delete' ':' 'try' :)
            or $state[$p:lk] = 935317                       (: 'directory-list' ':' 'try' :)
            or $state[$p:lk] = 935319                       (: 'else' ':' 'try' :)
            or $state[$p:lk] = 935321                       (: 'error' ':' 'try' :)
            or $state[$p:lk] = 935322                       (: 'escape-markup' ':' 'try' :)
            or $state[$p:lk] = 935323                       (: 'exec' ':' 'try' :)
            or $state[$p:lk] = 935324                       (: 'filter' ':' 'try' :)
            or $state[$p:lk] = 935325                       (: 'for-each' ':' 'try' :)
            or $state[$p:lk] = 935327                       (: 'hash' ':' 'try' :)
            or $state[$p:lk] = 935328                       (: 'http-request' ':' 'try' :)
            or $state[$p:lk] = 935329                       (: 'identity' ':' 'try' :)
            or $state[$p:lk] = 935330                       (: 'if' ':' 'try' :)
            or $state[$p:lk] = 935331                       (: 'insert' ':' 'try' :)
            or $state[$p:lk] = 935333                       (: 'label-elements' ':' 'try' :)
            or $state[$p:lk] = 935334                       (: 'library' ':' 'try' :)
            or $state[$p:lk] = 935335                       (: 'load' ':' 'try' :)
            or $state[$p:lk] = 935336                       (: 'make-absolute-uris' ':' 'try' :)
            or $state[$p:lk] = 935337                       (: 'namespace' ':' 'try' :)
            or $state[$p:lk] = 935338                       (: 'namespace-rename' ':' 'try' :)
            or $state[$p:lk] = 935339                       (: 'pack' ':' 'try' :)
            or $state[$p:lk] = 935340                       (: 'parameters' ':' 'try' :)
            or $state[$p:lk] = 935342                       (: 'pipeline' ':' 'try' :)
            or $state[$p:lk] = 935344                       (: 'rename' ':' 'try' :)
            or $state[$p:lk] = 935345                       (: 'replace' ':' 'try' :)
            or $state[$p:lk] = 935347                       (: 'set-attributes' ':' 'try' :)
            or $state[$p:lk] = 935348                       (: 'sink' ':' 'try' :)
            or $state[$p:lk] = 935349                       (: 'split-sequence' ':' 'try' :)
            or $state[$p:lk] = 935350                       (: 'step' ':' 'try' :)
            or $state[$p:lk] = 935351                       (: 'store' ':' 'try' :)
            or $state[$p:lk] = 935352                       (: 'string-replace' ':' 'try' :)
            or $state[$p:lk] = 935353                       (: 'try' ':' 'try' :)
            or $state[$p:lk] = 935354                       (: 'unescape-markup' ':' 'try' :)
            or $state[$p:lk] = 935355                       (: 'unwrap' ':' 'try' :)
            or $state[$p:lk] = 935356                       (: 'uuid' ':' 'try' :)
            or $state[$p:lk] = 935357                       (: 'validate-with-relax-ng' ':' 'try' :)
            or $state[$p:lk] = 935358                       (: 'validate-with-schematron' ':' 'try' :)
            or $state[$p:lk] = 935359                       (: 'validate-with-xml-schema' ':' 'try' :)
            or $state[$p:lk] = 935360                       (: 'variable' ':' 'try' :)
            or $state[$p:lk] = 935361                       (: 'viewport' ':' 'try' :)
            or $state[$p:lk] = 935362                       (: 'wrap' ':' 'try' :)
            or $state[$p:lk] = 935363                       (: 'wrap-sequence' ':' 'try' :)
            or $state[$p:lk] = 935364                       (: 'www-form-urldecode' ':' 'try' :)
            or $state[$p:lk] = 935365                       (: 'www-form-urlencode' ':' 'try' :)
            or $state[$p:lk] = 935366                       (: 'xinclude' ':' 'try' :)
            or $state[$p:lk] = 935367                       (: 'xquery' ':' 'try' :)
            or $state[$p:lk] = 935368                       (: 'xsl-formatter' ':' 'try' :)
            or $state[$p:lk] = 935369                       (: 'xslt' ':' 'try' :)
            or $state[$p:lk] = 951685                       (: NCName^Token ':' 'unescape-markup' :)
            or $state[$p:lk] = 951694                       (: 'add-attribute' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951695                       (: 'add-xml-base' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951697                       (: 'compare' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951698                       (: 'count' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951699                       (: 'default' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951700                       (: 'delete' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951701                       (: 'directory-list' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951703                       (: 'else' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951705                       (: 'error' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951706                       (: 'escape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951707                       (: 'exec' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951708                       (: 'filter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951709                       (: 'for-each' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951711                       (: 'hash' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951712                       (: 'http-request' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951713                       (: 'identity' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951714                       (: 'if' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951715                       (: 'insert' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951717                       (: 'label-elements' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951718                       (: 'library' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951719                       (: 'load' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951720                       (: 'make-absolute-uris' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951721                       (: 'namespace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951722                       (: 'namespace-rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951723                       (: 'pack' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951724                       (: 'parameters' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951726                       (: 'pipeline' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951728                       (: 'rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951729                       (: 'replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951731                       (: 'set-attributes' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951732                       (: 'sink' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951733                       (: 'split-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951734                       (: 'step' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951735                       (: 'store' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951736                       (: 'string-replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951737                       (: 'try' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951738                       (: 'unescape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951739                       (: 'unwrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951740                       (: 'uuid' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951741                       (: 'validate-with-relax-ng' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951742                       (: 'validate-with-schematron' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951743                       (: 'validate-with-xml-schema' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951744                       (: 'variable' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951745                       (: 'viewport' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951746                       (: 'wrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951747                       (: 'wrap-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951748                       (: 'www-form-urldecode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951749                       (: 'www-form-urlencode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951750                       (: 'xinclude' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951751                       (: 'xquery' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951752                       (: 'xsl-formatter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 951753                       (: 'xslt' ':' 'unescape-markup' :)
            or $state[$p:lk] = 968069                       (: NCName^Token ':' 'unwrap' :)
            or $state[$p:lk] = 968078                       (: 'add-attribute' ':' 'unwrap' :)
            or $state[$p:lk] = 968079                       (: 'add-xml-base' ':' 'unwrap' :)
            or $state[$p:lk] = 968081                       (: 'compare' ':' 'unwrap' :)
            or $state[$p:lk] = 968082                       (: 'count' ':' 'unwrap' :)
            or $state[$p:lk] = 968083                       (: 'default' ':' 'unwrap' :)
            or $state[$p:lk] = 968084                       (: 'delete' ':' 'unwrap' :)
            or $state[$p:lk] = 968085                       (: 'directory-list' ':' 'unwrap' :)
            or $state[$p:lk] = 968087                       (: 'else' ':' 'unwrap' :)
            or $state[$p:lk] = 968089                       (: 'error' ':' 'unwrap' :)
            or $state[$p:lk] = 968090                       (: 'escape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 968091                       (: 'exec' ':' 'unwrap' :)
            or $state[$p:lk] = 968092                       (: 'filter' ':' 'unwrap' :)
            or $state[$p:lk] = 968093                       (: 'for-each' ':' 'unwrap' :)
            or $state[$p:lk] = 968095                       (: 'hash' ':' 'unwrap' :)
            or $state[$p:lk] = 968096                       (: 'http-request' ':' 'unwrap' :)
            or $state[$p:lk] = 968097                       (: 'identity' ':' 'unwrap' :)
            or $state[$p:lk] = 968098                       (: 'if' ':' 'unwrap' :)
            or $state[$p:lk] = 968099                       (: 'insert' ':' 'unwrap' :)
            or $state[$p:lk] = 968101                       (: 'label-elements' ':' 'unwrap' :)
            or $state[$p:lk] = 968102                       (: 'library' ':' 'unwrap' :)
            or $state[$p:lk] = 968103                       (: 'load' ':' 'unwrap' :)
            or $state[$p:lk] = 968104                       (: 'make-absolute-uris' ':' 'unwrap' :)
            or $state[$p:lk] = 968105                       (: 'namespace' ':' 'unwrap' :)
            or $state[$p:lk] = 968106                       (: 'namespace-rename' ':' 'unwrap' :)
            or $state[$p:lk] = 968107                       (: 'pack' ':' 'unwrap' :)
            or $state[$p:lk] = 968108                       (: 'parameters' ':' 'unwrap' :)
            or $state[$p:lk] = 968110                       (: 'pipeline' ':' 'unwrap' :)
            or $state[$p:lk] = 968112                       (: 'rename' ':' 'unwrap' :)
            or $state[$p:lk] = 968113                       (: 'replace' ':' 'unwrap' :)
            or $state[$p:lk] = 968115                       (: 'set-attributes' ':' 'unwrap' :)
            or $state[$p:lk] = 968116                       (: 'sink' ':' 'unwrap' :)
            or $state[$p:lk] = 968117                       (: 'split-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 968118                       (: 'step' ':' 'unwrap' :)
            or $state[$p:lk] = 968119                       (: 'store' ':' 'unwrap' :)
            or $state[$p:lk] = 968120                       (: 'string-replace' ':' 'unwrap' :)
            or $state[$p:lk] = 968121                       (: 'try' ':' 'unwrap' :)
            or $state[$p:lk] = 968122                       (: 'unescape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 968123                       (: 'unwrap' ':' 'unwrap' :)
            or $state[$p:lk] = 968124                       (: 'uuid' ':' 'unwrap' :)
            or $state[$p:lk] = 968125                       (: 'validate-with-relax-ng' ':' 'unwrap' :)
            or $state[$p:lk] = 968126                       (: 'validate-with-schematron' ':' 'unwrap' :)
            or $state[$p:lk] = 968127                       (: 'validate-with-xml-schema' ':' 'unwrap' :)
            or $state[$p:lk] = 968128                       (: 'variable' ':' 'unwrap' :)
            or $state[$p:lk] = 968129                       (: 'viewport' ':' 'unwrap' :)
            or $state[$p:lk] = 968130                       (: 'wrap' ':' 'unwrap' :)
            or $state[$p:lk] = 968131                       (: 'wrap-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 968132                       (: 'www-form-urldecode' ':' 'unwrap' :)
            or $state[$p:lk] = 968133                       (: 'www-form-urlencode' ':' 'unwrap' :)
            or $state[$p:lk] = 968134                       (: 'xinclude' ':' 'unwrap' :)
            or $state[$p:lk] = 968135                       (: 'xquery' ':' 'unwrap' :)
            or $state[$p:lk] = 968136                       (: 'xsl-formatter' ':' 'unwrap' :)
            or $state[$p:lk] = 968137                       (: 'xslt' ':' 'unwrap' :)
            or $state[$p:lk] = 984453                       (: NCName^Token ':' 'uuid' :)
            or $state[$p:lk] = 984462                       (: 'add-attribute' ':' 'uuid' :)
            or $state[$p:lk] = 984463                       (: 'add-xml-base' ':' 'uuid' :)
            or $state[$p:lk] = 984465                       (: 'compare' ':' 'uuid' :)
            or $state[$p:lk] = 984466                       (: 'count' ':' 'uuid' :)
            or $state[$p:lk] = 984467                       (: 'default' ':' 'uuid' :)
            or $state[$p:lk] = 984468                       (: 'delete' ':' 'uuid' :)
            or $state[$p:lk] = 984469                       (: 'directory-list' ':' 'uuid' :)
            or $state[$p:lk] = 984471                       (: 'else' ':' 'uuid' :)
            or $state[$p:lk] = 984473                       (: 'error' ':' 'uuid' :)
            or $state[$p:lk] = 984474                       (: 'escape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 984475                       (: 'exec' ':' 'uuid' :)
            or $state[$p:lk] = 984476                       (: 'filter' ':' 'uuid' :)
            or $state[$p:lk] = 984477                       (: 'for-each' ':' 'uuid' :)
            or $state[$p:lk] = 984479                       (: 'hash' ':' 'uuid' :)
            or $state[$p:lk] = 984480                       (: 'http-request' ':' 'uuid' :)
            or $state[$p:lk] = 984481                       (: 'identity' ':' 'uuid' :)
            or $state[$p:lk] = 984482                       (: 'if' ':' 'uuid' :)
            or $state[$p:lk] = 984483                       (: 'insert' ':' 'uuid' :)
            or $state[$p:lk] = 984485                       (: 'label-elements' ':' 'uuid' :)
            or $state[$p:lk] = 984486                       (: 'library' ':' 'uuid' :)
            or $state[$p:lk] = 984487                       (: 'load' ':' 'uuid' :)
            or $state[$p:lk] = 984488                       (: 'make-absolute-uris' ':' 'uuid' :)
            or $state[$p:lk] = 984489                       (: 'namespace' ':' 'uuid' :)
            or $state[$p:lk] = 984490                       (: 'namespace-rename' ':' 'uuid' :)
            or $state[$p:lk] = 984491                       (: 'pack' ':' 'uuid' :)
            or $state[$p:lk] = 984492                       (: 'parameters' ':' 'uuid' :)
            or $state[$p:lk] = 984494                       (: 'pipeline' ':' 'uuid' :)
            or $state[$p:lk] = 984496                       (: 'rename' ':' 'uuid' :)
            or $state[$p:lk] = 984497                       (: 'replace' ':' 'uuid' :)
            or $state[$p:lk] = 984499                       (: 'set-attributes' ':' 'uuid' :)
            or $state[$p:lk] = 984500                       (: 'sink' ':' 'uuid' :)
            or $state[$p:lk] = 984501                       (: 'split-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 984502                       (: 'step' ':' 'uuid' :)
            or $state[$p:lk] = 984503                       (: 'store' ':' 'uuid' :)
            or $state[$p:lk] = 984504                       (: 'string-replace' ':' 'uuid' :)
            or $state[$p:lk] = 984505                       (: 'try' ':' 'uuid' :)
            or $state[$p:lk] = 984506                       (: 'unescape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 984507                       (: 'unwrap' ':' 'uuid' :)
            or $state[$p:lk] = 984508                       (: 'uuid' ':' 'uuid' :)
            or $state[$p:lk] = 984509                       (: 'validate-with-relax-ng' ':' 'uuid' :)
            or $state[$p:lk] = 984510                       (: 'validate-with-schematron' ':' 'uuid' :)
            or $state[$p:lk] = 984511                       (: 'validate-with-xml-schema' ':' 'uuid' :)
            or $state[$p:lk] = 984512                       (: 'variable' ':' 'uuid' :)
            or $state[$p:lk] = 984513                       (: 'viewport' ':' 'uuid' :)
            or $state[$p:lk] = 984514                       (: 'wrap' ':' 'uuid' :)
            or $state[$p:lk] = 984515                       (: 'wrap-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 984516                       (: 'www-form-urldecode' ':' 'uuid' :)
            or $state[$p:lk] = 984517                       (: 'www-form-urlencode' ':' 'uuid' :)
            or $state[$p:lk] = 984518                       (: 'xinclude' ':' 'uuid' :)
            or $state[$p:lk] = 984519                       (: 'xquery' ':' 'uuid' :)
            or $state[$p:lk] = 984520                       (: 'xsl-formatter' ':' 'uuid' :)
            or $state[$p:lk] = 984521                       (: 'xslt' ':' 'uuid' :)
            or $state[$p:lk] = 1000837                      (: NCName^Token ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000846                      (: 'add-attribute' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000847                      (: 'add-xml-base' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000849                      (: 'compare' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000850                      (: 'count' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000851                      (: 'default' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000852                      (: 'delete' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000853                      (: 'directory-list' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000855                      (: 'else' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000857                      (: 'error' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000858                      (: 'escape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000859                      (: 'exec' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000860                      (: 'filter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000861                      (: 'for-each' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000863                      (: 'hash' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000864                      (: 'http-request' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000865                      (: 'identity' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000866                      (: 'if' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000867                      (: 'insert' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000869                      (: 'label-elements' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000870                      (: 'library' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000871                      (: 'load' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000872                      (: 'make-absolute-uris' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000873                      (: 'namespace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000874                      (: 'namespace-rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000875                      (: 'pack' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000876                      (: 'parameters' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000878                      (: 'pipeline' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000880                      (: 'rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000881                      (: 'replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000883                      (: 'set-attributes' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000884                      (: 'sink' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000885                      (: 'split-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000886                      (: 'step' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000887                      (: 'store' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000888                      (: 'string-replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000889                      (: 'try' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000890                      (: 'unescape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000891                      (: 'unwrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000892                      (: 'uuid' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000893                      (: 'validate-with-relax-ng' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000894                      (: 'validate-with-schematron' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000895                      (: 'validate-with-xml-schema' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000896                      (: 'variable' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000897                      (: 'viewport' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000898                      (: 'wrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000899                      (: 'wrap-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000900                      (: 'www-form-urldecode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000901                      (: 'www-form-urlencode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000902                      (: 'xinclude' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000903                      (: 'xquery' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000904                      (: 'xsl-formatter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1000905                      (: 'xslt' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1017221                      (: NCName^Token ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017230                      (: 'add-attribute' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017231                      (: 'add-xml-base' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017233                      (: 'compare' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017234                      (: 'count' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017235                      (: 'default' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017236                      (: 'delete' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017237                      (: 'directory-list' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017239                      (: 'else' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017241                      (: 'error' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017242                      (: 'escape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017243                      (: 'exec' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017244                      (: 'filter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017245                      (: 'for-each' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017247                      (: 'hash' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017248                      (: 'http-request' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017249                      (: 'identity' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017250                      (: 'if' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017251                      (: 'insert' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017253                      (: 'label-elements' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017254                      (: 'library' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017255                      (: 'load' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017256                      (: 'make-absolute-uris' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017257                      (: 'namespace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017258                      (: 'namespace-rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017259                      (: 'pack' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017260                      (: 'parameters' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017262                      (: 'pipeline' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017264                      (: 'rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017265                      (: 'replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017267                      (: 'set-attributes' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017268                      (: 'sink' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017269                      (: 'split-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017270                      (: 'step' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017271                      (: 'store' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017272                      (: 'string-replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017273                      (: 'try' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017274                      (: 'unescape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017275                      (: 'unwrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017276                      (: 'uuid' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017277                      (: 'validate-with-relax-ng' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017278                      (: 'validate-with-schematron' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017279                      (: 'validate-with-xml-schema' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017280                      (: 'variable' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017281                      (: 'viewport' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017282                      (: 'wrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017283                      (: 'wrap-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017284                      (: 'www-form-urldecode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017285                      (: 'www-form-urlencode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017286                      (: 'xinclude' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017287                      (: 'xquery' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017288                      (: 'xsl-formatter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1017289                      (: 'xslt' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1033605                      (: NCName^Token ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033614                      (: 'add-attribute' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033615                      (: 'add-xml-base' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033617                      (: 'compare' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033618                      (: 'count' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033619                      (: 'default' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033620                      (: 'delete' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033621                      (: 'directory-list' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033623                      (: 'else' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033625                      (: 'error' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033626                      (: 'escape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033627                      (: 'exec' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033628                      (: 'filter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033629                      (: 'for-each' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033631                      (: 'hash' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033632                      (: 'http-request' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033633                      (: 'identity' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033634                      (: 'if' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033635                      (: 'insert' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033637                      (: 'label-elements' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033638                      (: 'library' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033639                      (: 'load' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033640                      (: 'make-absolute-uris' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033641                      (: 'namespace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033642                      (: 'namespace-rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033643                      (: 'pack' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033644                      (: 'parameters' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033646                      (: 'pipeline' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033648                      (: 'rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033649                      (: 'replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033651                      (: 'set-attributes' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033652                      (: 'sink' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033653                      (: 'split-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033654                      (: 'step' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033655                      (: 'store' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033656                      (: 'string-replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033657                      (: 'try' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033658                      (: 'unescape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033659                      (: 'unwrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033660                      (: 'uuid' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033661                      (: 'validate-with-relax-ng' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033662                      (: 'validate-with-schematron' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033663                      (: 'validate-with-xml-schema' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033664                      (: 'variable' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033665                      (: 'viewport' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033666                      (: 'wrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033667                      (: 'wrap-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033668                      (: 'www-form-urldecode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033669                      (: 'www-form-urlencode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033670                      (: 'xinclude' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033671                      (: 'xquery' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033672                      (: 'xsl-formatter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1033673                      (: 'xslt' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1049989                      (: NCName^Token ':' 'variable' :)
            or $state[$p:lk] = 1049998                      (: 'add-attribute' ':' 'variable' :)
            or $state[$p:lk] = 1049999                      (: 'add-xml-base' ':' 'variable' :)
            or $state[$p:lk] = 1050001                      (: 'compare' ':' 'variable' :)
            or $state[$p:lk] = 1050002                      (: 'count' ':' 'variable' :)
            or $state[$p:lk] = 1050003                      (: 'default' ':' 'variable' :)
            or $state[$p:lk] = 1050004                      (: 'delete' ':' 'variable' :)
            or $state[$p:lk] = 1050005                      (: 'directory-list' ':' 'variable' :)
            or $state[$p:lk] = 1050007                      (: 'else' ':' 'variable' :)
            or $state[$p:lk] = 1050009                      (: 'error' ':' 'variable' :)
            or $state[$p:lk] = 1050010                      (: 'escape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1050011                      (: 'exec' ':' 'variable' :)
            or $state[$p:lk] = 1050012                      (: 'filter' ':' 'variable' :)
            or $state[$p:lk] = 1050013                      (: 'for-each' ':' 'variable' :)
            or $state[$p:lk] = 1050015                      (: 'hash' ':' 'variable' :)
            or $state[$p:lk] = 1050016                      (: 'http-request' ':' 'variable' :)
            or $state[$p:lk] = 1050017                      (: 'identity' ':' 'variable' :)
            or $state[$p:lk] = 1050018                      (: 'if' ':' 'variable' :)
            or $state[$p:lk] = 1050019                      (: 'insert' ':' 'variable' :)
            or $state[$p:lk] = 1050021                      (: 'label-elements' ':' 'variable' :)
            or $state[$p:lk] = 1050022                      (: 'library' ':' 'variable' :)
            or $state[$p:lk] = 1050023                      (: 'load' ':' 'variable' :)
            or $state[$p:lk] = 1050024                      (: 'make-absolute-uris' ':' 'variable' :)
            or $state[$p:lk] = 1050025                      (: 'namespace' ':' 'variable' :)
            or $state[$p:lk] = 1050026                      (: 'namespace-rename' ':' 'variable' :)
            or $state[$p:lk] = 1050027                      (: 'pack' ':' 'variable' :)
            or $state[$p:lk] = 1050028                      (: 'parameters' ':' 'variable' :)
            or $state[$p:lk] = 1050030                      (: 'pipeline' ':' 'variable' :)
            or $state[$p:lk] = 1050032                      (: 'rename' ':' 'variable' :)
            or $state[$p:lk] = 1050033                      (: 'replace' ':' 'variable' :)
            or $state[$p:lk] = 1050035                      (: 'set-attributes' ':' 'variable' :)
            or $state[$p:lk] = 1050036                      (: 'sink' ':' 'variable' :)
            or $state[$p:lk] = 1050037                      (: 'split-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1050038                      (: 'step' ':' 'variable' :)
            or $state[$p:lk] = 1050039                      (: 'store' ':' 'variable' :)
            or $state[$p:lk] = 1050040                      (: 'string-replace' ':' 'variable' :)
            or $state[$p:lk] = 1050041                      (: 'try' ':' 'variable' :)
            or $state[$p:lk] = 1050042                      (: 'unescape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1050043                      (: 'unwrap' ':' 'variable' :)
            or $state[$p:lk] = 1050044                      (: 'uuid' ':' 'variable' :)
            or $state[$p:lk] = 1050045                      (: 'validate-with-relax-ng' ':' 'variable' :)
            or $state[$p:lk] = 1050046                      (: 'validate-with-schematron' ':' 'variable' :)
            or $state[$p:lk] = 1050047                      (: 'validate-with-xml-schema' ':' 'variable' :)
            or $state[$p:lk] = 1050048                      (: 'variable' ':' 'variable' :)
            or $state[$p:lk] = 1050049                      (: 'viewport' ':' 'variable' :)
            or $state[$p:lk] = 1050050                      (: 'wrap' ':' 'variable' :)
            or $state[$p:lk] = 1050051                      (: 'wrap-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1050052                      (: 'www-form-urldecode' ':' 'variable' :)
            or $state[$p:lk] = 1050053                      (: 'www-form-urlencode' ':' 'variable' :)
            or $state[$p:lk] = 1050054                      (: 'xinclude' ':' 'variable' :)
            or $state[$p:lk] = 1050055                      (: 'xquery' ':' 'variable' :)
            or $state[$p:lk] = 1050056                      (: 'xsl-formatter' ':' 'variable' :)
            or $state[$p:lk] = 1050057                      (: 'xslt' ':' 'variable' :)
            or $state[$p:lk] = 1050117                      (: NCName^Token '=' 'variable' :)
            or $state[$p:lk] = 1050126                      (: 'add-attribute' '=' 'variable' :)
            or $state[$p:lk] = 1050127                      (: 'add-xml-base' '=' 'variable' :)
            or $state[$p:lk] = 1050129                      (: 'compare' '=' 'variable' :)
            or $state[$p:lk] = 1050130                      (: 'count' '=' 'variable' :)
            or $state[$p:lk] = 1050131                      (: 'default' '=' 'variable' :)
            or $state[$p:lk] = 1050132                      (: 'delete' '=' 'variable' :)
            or $state[$p:lk] = 1050133                      (: 'directory-list' '=' 'variable' :)
            or $state[$p:lk] = 1050135                      (: 'else' '=' 'variable' :)
            or $state[$p:lk] = 1050137                      (: 'error' '=' 'variable' :)
            or $state[$p:lk] = 1050138                      (: 'escape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1050139                      (: 'exec' '=' 'variable' :)
            or $state[$p:lk] = 1050140                      (: 'filter' '=' 'variable' :)
            or $state[$p:lk] = 1050141                      (: 'for-each' '=' 'variable' :)
            or $state[$p:lk] = 1050143                      (: 'hash' '=' 'variable' :)
            or $state[$p:lk] = 1050144                      (: 'http-request' '=' 'variable' :)
            or $state[$p:lk] = 1050145                      (: 'identity' '=' 'variable' :)
            or $state[$p:lk] = 1050146                      (: 'if' '=' 'variable' :)
            or $state[$p:lk] = 1050147                      (: 'insert' '=' 'variable' :)
            or $state[$p:lk] = 1050149                      (: 'label-elements' '=' 'variable' :)
            or $state[$p:lk] = 1050150                      (: 'library' '=' 'variable' :)
            or $state[$p:lk] = 1050151                      (: 'load' '=' 'variable' :)
            or $state[$p:lk] = 1050152                      (: 'make-absolute-uris' '=' 'variable' :)
            or $state[$p:lk] = 1050153                      (: 'namespace' '=' 'variable' :)
            or $state[$p:lk] = 1050154                      (: 'namespace-rename' '=' 'variable' :)
            or $state[$p:lk] = 1050155                      (: 'pack' '=' 'variable' :)
            or $state[$p:lk] = 1050156                      (: 'parameters' '=' 'variable' :)
            or $state[$p:lk] = 1050158                      (: 'pipeline' '=' 'variable' :)
            or $state[$p:lk] = 1050160                      (: 'rename' '=' 'variable' :)
            or $state[$p:lk] = 1050161                      (: 'replace' '=' 'variable' :)
            or $state[$p:lk] = 1050163                      (: 'set-attributes' '=' 'variable' :)
            or $state[$p:lk] = 1050164                      (: 'sink' '=' 'variable' :)
            or $state[$p:lk] = 1050165                      (: 'split-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1050166                      (: 'step' '=' 'variable' :)
            or $state[$p:lk] = 1050167                      (: 'store' '=' 'variable' :)
            or $state[$p:lk] = 1050168                      (: 'string-replace' '=' 'variable' :)
            or $state[$p:lk] = 1050169                      (: 'try' '=' 'variable' :)
            or $state[$p:lk] = 1050170                      (: 'unescape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1050171                      (: 'unwrap' '=' 'variable' :)
            or $state[$p:lk] = 1050172                      (: 'uuid' '=' 'variable' :)
            or $state[$p:lk] = 1050173                      (: 'validate-with-relax-ng' '=' 'variable' :)
            or $state[$p:lk] = 1050174                      (: 'validate-with-schematron' '=' 'variable' :)
            or $state[$p:lk] = 1050175                      (: 'validate-with-xml-schema' '=' 'variable' :)
            or $state[$p:lk] = 1050176                      (: 'variable' '=' 'variable' :)
            or $state[$p:lk] = 1050177                      (: 'viewport' '=' 'variable' :)
            or $state[$p:lk] = 1050178                      (: 'wrap' '=' 'variable' :)
            or $state[$p:lk] = 1050179                      (: 'wrap-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1050180                      (: 'www-form-urldecode' '=' 'variable' :)
            or $state[$p:lk] = 1050181                      (: 'www-form-urlencode' '=' 'variable' :)
            or $state[$p:lk] = 1050182                      (: 'xinclude' '=' 'variable' :)
            or $state[$p:lk] = 1050183                      (: 'xquery' '=' 'variable' :)
            or $state[$p:lk] = 1050184                      (: 'xsl-formatter' '=' 'variable' :)
            or $state[$p:lk] = 1050185                      (: 'xslt' '=' 'variable' :)
            or $state[$p:lk] = 1066373                      (: NCName^Token ':' 'viewport' :)
            or $state[$p:lk] = 1066382                      (: 'add-attribute' ':' 'viewport' :)
            or $state[$p:lk] = 1066383                      (: 'add-xml-base' ':' 'viewport' :)
            or $state[$p:lk] = 1066385                      (: 'compare' ':' 'viewport' :)
            or $state[$p:lk] = 1066386                      (: 'count' ':' 'viewport' :)
            or $state[$p:lk] = 1066387                      (: 'default' ':' 'viewport' :)
            or $state[$p:lk] = 1066388                      (: 'delete' ':' 'viewport' :)
            or $state[$p:lk] = 1066389                      (: 'directory-list' ':' 'viewport' :)
            or $state[$p:lk] = 1066391                      (: 'else' ':' 'viewport' :)
            or $state[$p:lk] = 1066393                      (: 'error' ':' 'viewport' :)
            or $state[$p:lk] = 1066394                      (: 'escape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1066395                      (: 'exec' ':' 'viewport' :)
            or $state[$p:lk] = 1066396                      (: 'filter' ':' 'viewport' :)
            or $state[$p:lk] = 1066397                      (: 'for-each' ':' 'viewport' :)
            or $state[$p:lk] = 1066399                      (: 'hash' ':' 'viewport' :)
            or $state[$p:lk] = 1066400                      (: 'http-request' ':' 'viewport' :)
            or $state[$p:lk] = 1066401                      (: 'identity' ':' 'viewport' :)
            or $state[$p:lk] = 1066402                      (: 'if' ':' 'viewport' :)
            or $state[$p:lk] = 1066403                      (: 'insert' ':' 'viewport' :)
            or $state[$p:lk] = 1066405                      (: 'label-elements' ':' 'viewport' :)
            or $state[$p:lk] = 1066406                      (: 'library' ':' 'viewport' :)
            or $state[$p:lk] = 1066407                      (: 'load' ':' 'viewport' :)
            or $state[$p:lk] = 1066408                      (: 'make-absolute-uris' ':' 'viewport' :)
            or $state[$p:lk] = 1066409                      (: 'namespace' ':' 'viewport' :)
            or $state[$p:lk] = 1066410                      (: 'namespace-rename' ':' 'viewport' :)
            or $state[$p:lk] = 1066411                      (: 'pack' ':' 'viewport' :)
            or $state[$p:lk] = 1066412                      (: 'parameters' ':' 'viewport' :)
            or $state[$p:lk] = 1066414                      (: 'pipeline' ':' 'viewport' :)
            or $state[$p:lk] = 1066416                      (: 'rename' ':' 'viewport' :)
            or $state[$p:lk] = 1066417                      (: 'replace' ':' 'viewport' :)
            or $state[$p:lk] = 1066419                      (: 'set-attributes' ':' 'viewport' :)
            or $state[$p:lk] = 1066420                      (: 'sink' ':' 'viewport' :)
            or $state[$p:lk] = 1066421                      (: 'split-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1066422                      (: 'step' ':' 'viewport' :)
            or $state[$p:lk] = 1066423                      (: 'store' ':' 'viewport' :)
            or $state[$p:lk] = 1066424                      (: 'string-replace' ':' 'viewport' :)
            or $state[$p:lk] = 1066425                      (: 'try' ':' 'viewport' :)
            or $state[$p:lk] = 1066426                      (: 'unescape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1066427                      (: 'unwrap' ':' 'viewport' :)
            or $state[$p:lk] = 1066428                      (: 'uuid' ':' 'viewport' :)
            or $state[$p:lk] = 1066429                      (: 'validate-with-relax-ng' ':' 'viewport' :)
            or $state[$p:lk] = 1066430                      (: 'validate-with-schematron' ':' 'viewport' :)
            or $state[$p:lk] = 1066431                      (: 'validate-with-xml-schema' ':' 'viewport' :)
            or $state[$p:lk] = 1066432                      (: 'variable' ':' 'viewport' :)
            or $state[$p:lk] = 1066433                      (: 'viewport' ':' 'viewport' :)
            or $state[$p:lk] = 1066434                      (: 'wrap' ':' 'viewport' :)
            or $state[$p:lk] = 1066435                      (: 'wrap-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1066436                      (: 'www-form-urldecode' ':' 'viewport' :)
            or $state[$p:lk] = 1066437                      (: 'www-form-urlencode' ':' 'viewport' :)
            or $state[$p:lk] = 1066438                      (: 'xinclude' ':' 'viewport' :)
            or $state[$p:lk] = 1066439                      (: 'xquery' ':' 'viewport' :)
            or $state[$p:lk] = 1066440                      (: 'xsl-formatter' ':' 'viewport' :)
            or $state[$p:lk] = 1066441                      (: 'xslt' ':' 'viewport' :)
            or $state[$p:lk] = 1082757                      (: NCName^Token ':' 'wrap' :)
            or $state[$p:lk] = 1082766                      (: 'add-attribute' ':' 'wrap' :)
            or $state[$p:lk] = 1082767                      (: 'add-xml-base' ':' 'wrap' :)
            or $state[$p:lk] = 1082769                      (: 'compare' ':' 'wrap' :)
            or $state[$p:lk] = 1082770                      (: 'count' ':' 'wrap' :)
            or $state[$p:lk] = 1082771                      (: 'default' ':' 'wrap' :)
            or $state[$p:lk] = 1082772                      (: 'delete' ':' 'wrap' :)
            or $state[$p:lk] = 1082773                      (: 'directory-list' ':' 'wrap' :)
            or $state[$p:lk] = 1082775                      (: 'else' ':' 'wrap' :)
            or $state[$p:lk] = 1082777                      (: 'error' ':' 'wrap' :)
            or $state[$p:lk] = 1082778                      (: 'escape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1082779                      (: 'exec' ':' 'wrap' :)
            or $state[$p:lk] = 1082780                      (: 'filter' ':' 'wrap' :)
            or $state[$p:lk] = 1082781                      (: 'for-each' ':' 'wrap' :)
            or $state[$p:lk] = 1082783                      (: 'hash' ':' 'wrap' :)
            or $state[$p:lk] = 1082784                      (: 'http-request' ':' 'wrap' :)
            or $state[$p:lk] = 1082785                      (: 'identity' ':' 'wrap' :)
            or $state[$p:lk] = 1082786                      (: 'if' ':' 'wrap' :)
            or $state[$p:lk] = 1082787                      (: 'insert' ':' 'wrap' :)
            or $state[$p:lk] = 1082789                      (: 'label-elements' ':' 'wrap' :)
            or $state[$p:lk] = 1082790                      (: 'library' ':' 'wrap' :)
            or $state[$p:lk] = 1082791                      (: 'load' ':' 'wrap' :)
            or $state[$p:lk] = 1082792                      (: 'make-absolute-uris' ':' 'wrap' :)
            or $state[$p:lk] = 1082793                      (: 'namespace' ':' 'wrap' :)
            or $state[$p:lk] = 1082794                      (: 'namespace-rename' ':' 'wrap' :)
            or $state[$p:lk] = 1082795                      (: 'pack' ':' 'wrap' :)
            or $state[$p:lk] = 1082796                      (: 'parameters' ':' 'wrap' :)
            or $state[$p:lk] = 1082798                      (: 'pipeline' ':' 'wrap' :)
            or $state[$p:lk] = 1082800                      (: 'rename' ':' 'wrap' :)
            or $state[$p:lk] = 1082801                      (: 'replace' ':' 'wrap' :)
            or $state[$p:lk] = 1082803                      (: 'set-attributes' ':' 'wrap' :)
            or $state[$p:lk] = 1082804                      (: 'sink' ':' 'wrap' :)
            or $state[$p:lk] = 1082805                      (: 'split-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1082806                      (: 'step' ':' 'wrap' :)
            or $state[$p:lk] = 1082807                      (: 'store' ':' 'wrap' :)
            or $state[$p:lk] = 1082808                      (: 'string-replace' ':' 'wrap' :)
            or $state[$p:lk] = 1082809                      (: 'try' ':' 'wrap' :)
            or $state[$p:lk] = 1082810                      (: 'unescape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1082811                      (: 'unwrap' ':' 'wrap' :)
            or $state[$p:lk] = 1082812                      (: 'uuid' ':' 'wrap' :)
            or $state[$p:lk] = 1082813                      (: 'validate-with-relax-ng' ':' 'wrap' :)
            or $state[$p:lk] = 1082814                      (: 'validate-with-schematron' ':' 'wrap' :)
            or $state[$p:lk] = 1082815                      (: 'validate-with-xml-schema' ':' 'wrap' :)
            or $state[$p:lk] = 1082816                      (: 'variable' ':' 'wrap' :)
            or $state[$p:lk] = 1082817                      (: 'viewport' ':' 'wrap' :)
            or $state[$p:lk] = 1082818                      (: 'wrap' ':' 'wrap' :)
            or $state[$p:lk] = 1082819                      (: 'wrap-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1082820                      (: 'www-form-urldecode' ':' 'wrap' :)
            or $state[$p:lk] = 1082821                      (: 'www-form-urlencode' ':' 'wrap' :)
            or $state[$p:lk] = 1082822                      (: 'xinclude' ':' 'wrap' :)
            or $state[$p:lk] = 1082823                      (: 'xquery' ':' 'wrap' :)
            or $state[$p:lk] = 1082824                      (: 'xsl-formatter' ':' 'wrap' :)
            or $state[$p:lk] = 1082825                      (: 'xslt' ':' 'wrap' :)
            or $state[$p:lk] = 1099141                      (: NCName^Token ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099150                      (: 'add-attribute' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099151                      (: 'add-xml-base' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099153                      (: 'compare' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099154                      (: 'count' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099155                      (: 'default' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099156                      (: 'delete' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099157                      (: 'directory-list' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099159                      (: 'else' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099161                      (: 'error' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099162                      (: 'escape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099163                      (: 'exec' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099164                      (: 'filter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099165                      (: 'for-each' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099167                      (: 'hash' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099168                      (: 'http-request' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099169                      (: 'identity' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099170                      (: 'if' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099171                      (: 'insert' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099173                      (: 'label-elements' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099174                      (: 'library' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099175                      (: 'load' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099176                      (: 'make-absolute-uris' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099177                      (: 'namespace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099178                      (: 'namespace-rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099179                      (: 'pack' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099180                      (: 'parameters' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099182                      (: 'pipeline' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099184                      (: 'rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099185                      (: 'replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099187                      (: 'set-attributes' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099188                      (: 'sink' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099189                      (: 'split-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099190                      (: 'step' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099191                      (: 'store' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099192                      (: 'string-replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099193                      (: 'try' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099194                      (: 'unescape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099195                      (: 'unwrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099196                      (: 'uuid' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099197                      (: 'validate-with-relax-ng' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099198                      (: 'validate-with-schematron' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099199                      (: 'validate-with-xml-schema' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099200                      (: 'variable' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099201                      (: 'viewport' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099202                      (: 'wrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099203                      (: 'wrap-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099204                      (: 'www-form-urldecode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099205                      (: 'www-form-urlencode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099206                      (: 'xinclude' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099207                      (: 'xquery' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099208                      (: 'xsl-formatter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1099209                      (: 'xslt' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1115525                      (: NCName^Token ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115534                      (: 'add-attribute' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115535                      (: 'add-xml-base' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115537                      (: 'compare' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115538                      (: 'count' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115539                      (: 'default' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115540                      (: 'delete' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115541                      (: 'directory-list' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115543                      (: 'else' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115545                      (: 'error' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115546                      (: 'escape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115547                      (: 'exec' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115548                      (: 'filter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115549                      (: 'for-each' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115551                      (: 'hash' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115552                      (: 'http-request' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115553                      (: 'identity' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115554                      (: 'if' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115555                      (: 'insert' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115557                      (: 'label-elements' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115558                      (: 'library' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115559                      (: 'load' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115560                      (: 'make-absolute-uris' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115561                      (: 'namespace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115562                      (: 'namespace-rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115563                      (: 'pack' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115564                      (: 'parameters' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115566                      (: 'pipeline' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115568                      (: 'rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115569                      (: 'replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115571                      (: 'set-attributes' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115572                      (: 'sink' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115573                      (: 'split-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115574                      (: 'step' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115575                      (: 'store' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115576                      (: 'string-replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115577                      (: 'try' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115578                      (: 'unescape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115579                      (: 'unwrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115580                      (: 'uuid' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115581                      (: 'validate-with-relax-ng' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115582                      (: 'validate-with-schematron' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115583                      (: 'validate-with-xml-schema' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115584                      (: 'variable' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115585                      (: 'viewport' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115586                      (: 'wrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115587                      (: 'wrap-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115588                      (: 'www-form-urldecode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115589                      (: 'www-form-urlencode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115590                      (: 'xinclude' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115591                      (: 'xquery' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115592                      (: 'xsl-formatter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1115593                      (: 'xslt' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1131909                      (: NCName^Token ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131918                      (: 'add-attribute' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131919                      (: 'add-xml-base' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131921                      (: 'compare' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131922                      (: 'count' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131923                      (: 'default' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131924                      (: 'delete' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131925                      (: 'directory-list' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131927                      (: 'else' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131929                      (: 'error' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131930                      (: 'escape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131931                      (: 'exec' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131932                      (: 'filter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131933                      (: 'for-each' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131935                      (: 'hash' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131936                      (: 'http-request' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131937                      (: 'identity' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131938                      (: 'if' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131939                      (: 'insert' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131941                      (: 'label-elements' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131942                      (: 'library' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131943                      (: 'load' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131944                      (: 'make-absolute-uris' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131945                      (: 'namespace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131946                      (: 'namespace-rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131947                      (: 'pack' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131948                      (: 'parameters' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131950                      (: 'pipeline' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131952                      (: 'rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131953                      (: 'replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131955                      (: 'set-attributes' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131956                      (: 'sink' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131957                      (: 'split-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131958                      (: 'step' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131959                      (: 'store' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131960                      (: 'string-replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131961                      (: 'try' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131962                      (: 'unescape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131963                      (: 'unwrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131964                      (: 'uuid' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131965                      (: 'validate-with-relax-ng' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131966                      (: 'validate-with-schematron' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131967                      (: 'validate-with-xml-schema' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131968                      (: 'variable' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131969                      (: 'viewport' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131970                      (: 'wrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131971                      (: 'wrap-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131972                      (: 'www-form-urldecode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131973                      (: 'www-form-urlencode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131974                      (: 'xinclude' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131975                      (: 'xquery' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131976                      (: 'xsl-formatter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1131977                      (: 'xslt' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1148293                      (: NCName^Token ':' 'xinclude' :)
            or $state[$p:lk] = 1148302                      (: 'add-attribute' ':' 'xinclude' :)
            or $state[$p:lk] = 1148303                      (: 'add-xml-base' ':' 'xinclude' :)
            or $state[$p:lk] = 1148305                      (: 'compare' ':' 'xinclude' :)
            or $state[$p:lk] = 1148306                      (: 'count' ':' 'xinclude' :)
            or $state[$p:lk] = 1148307                      (: 'default' ':' 'xinclude' :)
            or $state[$p:lk] = 1148308                      (: 'delete' ':' 'xinclude' :)
            or $state[$p:lk] = 1148309                      (: 'directory-list' ':' 'xinclude' :)
            or $state[$p:lk] = 1148311                      (: 'else' ':' 'xinclude' :)
            or $state[$p:lk] = 1148313                      (: 'error' ':' 'xinclude' :)
            or $state[$p:lk] = 1148314                      (: 'escape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1148315                      (: 'exec' ':' 'xinclude' :)
            or $state[$p:lk] = 1148316                      (: 'filter' ':' 'xinclude' :)
            or $state[$p:lk] = 1148317                      (: 'for-each' ':' 'xinclude' :)
            or $state[$p:lk] = 1148319                      (: 'hash' ':' 'xinclude' :)
            or $state[$p:lk] = 1148320                      (: 'http-request' ':' 'xinclude' :)
            or $state[$p:lk] = 1148321                      (: 'identity' ':' 'xinclude' :)
            or $state[$p:lk] = 1148322                      (: 'if' ':' 'xinclude' :)
            or $state[$p:lk] = 1148323                      (: 'insert' ':' 'xinclude' :)
            or $state[$p:lk] = 1148325                      (: 'label-elements' ':' 'xinclude' :)
            or $state[$p:lk] = 1148326                      (: 'library' ':' 'xinclude' :)
            or $state[$p:lk] = 1148327                      (: 'load' ':' 'xinclude' :)
            or $state[$p:lk] = 1148328                      (: 'make-absolute-uris' ':' 'xinclude' :)
            or $state[$p:lk] = 1148329                      (: 'namespace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148330                      (: 'namespace-rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1148331                      (: 'pack' ':' 'xinclude' :)
            or $state[$p:lk] = 1148332                      (: 'parameters' ':' 'xinclude' :)
            or $state[$p:lk] = 1148334                      (: 'pipeline' ':' 'xinclude' :)
            or $state[$p:lk] = 1148336                      (: 'rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1148337                      (: 'replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148339                      (: 'set-attributes' ':' 'xinclude' :)
            or $state[$p:lk] = 1148340                      (: 'sink' ':' 'xinclude' :)
            or $state[$p:lk] = 1148341                      (: 'split-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1148342                      (: 'step' ':' 'xinclude' :)
            or $state[$p:lk] = 1148343                      (: 'store' ':' 'xinclude' :)
            or $state[$p:lk] = 1148344                      (: 'string-replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1148345                      (: 'try' ':' 'xinclude' :)
            or $state[$p:lk] = 1148346                      (: 'unescape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1148347                      (: 'unwrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1148348                      (: 'uuid' ':' 'xinclude' :)
            or $state[$p:lk] = 1148349                      (: 'validate-with-relax-ng' ':' 'xinclude' :)
            or $state[$p:lk] = 1148350                      (: 'validate-with-schematron' ':' 'xinclude' :)
            or $state[$p:lk] = 1148351                      (: 'validate-with-xml-schema' ':' 'xinclude' :)
            or $state[$p:lk] = 1148352                      (: 'variable' ':' 'xinclude' :)
            or $state[$p:lk] = 1148353                      (: 'viewport' ':' 'xinclude' :)
            or $state[$p:lk] = 1148354                      (: 'wrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1148355                      (: 'wrap-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1148356                      (: 'www-form-urldecode' ':' 'xinclude' :)
            or $state[$p:lk] = 1148357                      (: 'www-form-urlencode' ':' 'xinclude' :)
            or $state[$p:lk] = 1148358                      (: 'xinclude' ':' 'xinclude' :)
            or $state[$p:lk] = 1148359                      (: 'xquery' ':' 'xinclude' :)
            or $state[$p:lk] = 1148360                      (: 'xsl-formatter' ':' 'xinclude' :)
            or $state[$p:lk] = 1148361                      (: 'xslt' ':' 'xinclude' :)
            or $state[$p:lk] = 1164677                      (: NCName^Token ':' 'xquery' :)
            or $state[$p:lk] = 1164686                      (: 'add-attribute' ':' 'xquery' :)
            or $state[$p:lk] = 1164687                      (: 'add-xml-base' ':' 'xquery' :)
            or $state[$p:lk] = 1164689                      (: 'compare' ':' 'xquery' :)
            or $state[$p:lk] = 1164690                      (: 'count' ':' 'xquery' :)
            or $state[$p:lk] = 1164691                      (: 'default' ':' 'xquery' :)
            or $state[$p:lk] = 1164692                      (: 'delete' ':' 'xquery' :)
            or $state[$p:lk] = 1164693                      (: 'directory-list' ':' 'xquery' :)
            or $state[$p:lk] = 1164695                      (: 'else' ':' 'xquery' :)
            or $state[$p:lk] = 1164697                      (: 'error' ':' 'xquery' :)
            or $state[$p:lk] = 1164698                      (: 'escape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1164699                      (: 'exec' ':' 'xquery' :)
            or $state[$p:lk] = 1164700                      (: 'filter' ':' 'xquery' :)
            or $state[$p:lk] = 1164701                      (: 'for-each' ':' 'xquery' :)
            or $state[$p:lk] = 1164703                      (: 'hash' ':' 'xquery' :)
            or $state[$p:lk] = 1164704                      (: 'http-request' ':' 'xquery' :)
            or $state[$p:lk] = 1164705                      (: 'identity' ':' 'xquery' :)
            or $state[$p:lk] = 1164706                      (: 'if' ':' 'xquery' :)
            or $state[$p:lk] = 1164707                      (: 'insert' ':' 'xquery' :)
            or $state[$p:lk] = 1164709                      (: 'label-elements' ':' 'xquery' :)
            or $state[$p:lk] = 1164710                      (: 'library' ':' 'xquery' :)
            or $state[$p:lk] = 1164711                      (: 'load' ':' 'xquery' :)
            or $state[$p:lk] = 1164712                      (: 'make-absolute-uris' ':' 'xquery' :)
            or $state[$p:lk] = 1164713                      (: 'namespace' ':' 'xquery' :)
            or $state[$p:lk] = 1164714                      (: 'namespace-rename' ':' 'xquery' :)
            or $state[$p:lk] = 1164715                      (: 'pack' ':' 'xquery' :)
            or $state[$p:lk] = 1164716                      (: 'parameters' ':' 'xquery' :)
            or $state[$p:lk] = 1164718                      (: 'pipeline' ':' 'xquery' :)
            or $state[$p:lk] = 1164720                      (: 'rename' ':' 'xquery' :)
            or $state[$p:lk] = 1164721                      (: 'replace' ':' 'xquery' :)
            or $state[$p:lk] = 1164723                      (: 'set-attributes' ':' 'xquery' :)
            or $state[$p:lk] = 1164724                      (: 'sink' ':' 'xquery' :)
            or $state[$p:lk] = 1164725                      (: 'split-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1164726                      (: 'step' ':' 'xquery' :)
            or $state[$p:lk] = 1164727                      (: 'store' ':' 'xquery' :)
            or $state[$p:lk] = 1164728                      (: 'string-replace' ':' 'xquery' :)
            or $state[$p:lk] = 1164729                      (: 'try' ':' 'xquery' :)
            or $state[$p:lk] = 1164730                      (: 'unescape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1164731                      (: 'unwrap' ':' 'xquery' :)
            or $state[$p:lk] = 1164732                      (: 'uuid' ':' 'xquery' :)
            or $state[$p:lk] = 1164733                      (: 'validate-with-relax-ng' ':' 'xquery' :)
            or $state[$p:lk] = 1164734                      (: 'validate-with-schematron' ':' 'xquery' :)
            or $state[$p:lk] = 1164735                      (: 'validate-with-xml-schema' ':' 'xquery' :)
            or $state[$p:lk] = 1164736                      (: 'variable' ':' 'xquery' :)
            or $state[$p:lk] = 1164737                      (: 'viewport' ':' 'xquery' :)
            or $state[$p:lk] = 1164738                      (: 'wrap' ':' 'xquery' :)
            or $state[$p:lk] = 1164739                      (: 'wrap-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1164740                      (: 'www-form-urldecode' ':' 'xquery' :)
            or $state[$p:lk] = 1164741                      (: 'www-form-urlencode' ':' 'xquery' :)
            or $state[$p:lk] = 1164742                      (: 'xinclude' ':' 'xquery' :)
            or $state[$p:lk] = 1164743                      (: 'xquery' ':' 'xquery' :)
            or $state[$p:lk] = 1164744                      (: 'xsl-formatter' ':' 'xquery' :)
            or $state[$p:lk] = 1164745                      (: 'xslt' ':' 'xquery' :)
            or $state[$p:lk] = 1181061                      (: NCName^Token ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181070                      (: 'add-attribute' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181071                      (: 'add-xml-base' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181073                      (: 'compare' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181074                      (: 'count' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181075                      (: 'default' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181076                      (: 'delete' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181077                      (: 'directory-list' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181079                      (: 'else' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181081                      (: 'error' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181082                      (: 'escape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181083                      (: 'exec' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181084                      (: 'filter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181085                      (: 'for-each' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181087                      (: 'hash' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181088                      (: 'http-request' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181089                      (: 'identity' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181090                      (: 'if' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181091                      (: 'insert' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181093                      (: 'label-elements' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181094                      (: 'library' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181095                      (: 'load' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181096                      (: 'make-absolute-uris' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181097                      (: 'namespace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181098                      (: 'namespace-rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181099                      (: 'pack' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181100                      (: 'parameters' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181102                      (: 'pipeline' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181104                      (: 'rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181105                      (: 'replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181107                      (: 'set-attributes' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181108                      (: 'sink' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181109                      (: 'split-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181110                      (: 'step' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181111                      (: 'store' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181112                      (: 'string-replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181113                      (: 'try' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181114                      (: 'unescape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181115                      (: 'unwrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181116                      (: 'uuid' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181117                      (: 'validate-with-relax-ng' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181118                      (: 'validate-with-schematron' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181119                      (: 'validate-with-xml-schema' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181120                      (: 'variable' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181121                      (: 'viewport' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181122                      (: 'wrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181123                      (: 'wrap-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181124                      (: 'www-form-urldecode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181125                      (: 'www-form-urlencode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181126                      (: 'xinclude' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181127                      (: 'xquery' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181128                      (: 'xsl-formatter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1181129                      (: 'xslt' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1197445                      (: NCName^Token ':' 'xslt' :)
            or $state[$p:lk] = 1197454                      (: 'add-attribute' ':' 'xslt' :)
            or $state[$p:lk] = 1197455                      (: 'add-xml-base' ':' 'xslt' :)
            or $state[$p:lk] = 1197457                      (: 'compare' ':' 'xslt' :)
            or $state[$p:lk] = 1197458                      (: 'count' ':' 'xslt' :)
            or $state[$p:lk] = 1197459                      (: 'default' ':' 'xslt' :)
            or $state[$p:lk] = 1197460                      (: 'delete' ':' 'xslt' :)
            or $state[$p:lk] = 1197461                      (: 'directory-list' ':' 'xslt' :)
            or $state[$p:lk] = 1197463                      (: 'else' ':' 'xslt' :)
            or $state[$p:lk] = 1197465                      (: 'error' ':' 'xslt' :)
            or $state[$p:lk] = 1197466                      (: 'escape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1197467                      (: 'exec' ':' 'xslt' :)
            or $state[$p:lk] = 1197468                      (: 'filter' ':' 'xslt' :)
            or $state[$p:lk] = 1197469                      (: 'for-each' ':' 'xslt' :)
            or $state[$p:lk] = 1197471                      (: 'hash' ':' 'xslt' :)
            or $state[$p:lk] = 1197472                      (: 'http-request' ':' 'xslt' :)
            or $state[$p:lk] = 1197473                      (: 'identity' ':' 'xslt' :)
            or $state[$p:lk] = 1197474                      (: 'if' ':' 'xslt' :)
            or $state[$p:lk] = 1197475                      (: 'insert' ':' 'xslt' :)
            or $state[$p:lk] = 1197477                      (: 'label-elements' ':' 'xslt' :)
            or $state[$p:lk] = 1197478                      (: 'library' ':' 'xslt' :)
            or $state[$p:lk] = 1197479                      (: 'load' ':' 'xslt' :)
            or $state[$p:lk] = 1197480                      (: 'make-absolute-uris' ':' 'xslt' :)
            or $state[$p:lk] = 1197481                      (: 'namespace' ':' 'xslt' :)
            or $state[$p:lk] = 1197482                      (: 'namespace-rename' ':' 'xslt' :)
            or $state[$p:lk] = 1197483                      (: 'pack' ':' 'xslt' :)
            or $state[$p:lk] = 1197484                      (: 'parameters' ':' 'xslt' :)
            or $state[$p:lk] = 1197486                      (: 'pipeline' ':' 'xslt' :)
            or $state[$p:lk] = 1197488                      (: 'rename' ':' 'xslt' :)
            or $state[$p:lk] = 1197489                      (: 'replace' ':' 'xslt' :)
            or $state[$p:lk] = 1197491                      (: 'set-attributes' ':' 'xslt' :)
            or $state[$p:lk] = 1197492                      (: 'sink' ':' 'xslt' :)
            or $state[$p:lk] = 1197493                      (: 'split-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1197494                      (: 'step' ':' 'xslt' :)
            or $state[$p:lk] = 1197495                      (: 'store' ':' 'xslt' :)
            or $state[$p:lk] = 1197496                      (: 'string-replace' ':' 'xslt' :)
            or $state[$p:lk] = 1197497                      (: 'try' ':' 'xslt' :)
            or $state[$p:lk] = 1197498                      (: 'unescape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1197499                      (: 'unwrap' ':' 'xslt' :)
            or $state[$p:lk] = 1197500                      (: 'uuid' ':' 'xslt' :)
            or $state[$p:lk] = 1197501                      (: 'validate-with-relax-ng' ':' 'xslt' :)
            or $state[$p:lk] = 1197502                      (: 'validate-with-schematron' ':' 'xslt' :)
            or $state[$p:lk] = 1197503                      (: 'validate-with-xml-schema' ':' 'xslt' :)
            or $state[$p:lk] = 1197504                      (: 'variable' ':' 'xslt' :)
            or $state[$p:lk] = 1197505                      (: 'viewport' ':' 'xslt' :)
            or $state[$p:lk] = 1197506                      (: 'wrap' ':' 'xslt' :)
            or $state[$p:lk] = 1197507                      (: 'wrap-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1197508                      (: 'www-form-urldecode' ':' 'xslt' :)
            or $state[$p:lk] = 1197509                      (: 'www-form-urlencode' ':' 'xslt' :)
            or $state[$p:lk] = 1197510                      (: 'xinclude' ':' 'xslt' :)
            or $state[$p:lk] = 1197511                      (: 'xquery' ':' 'xslt' :)
            or $state[$p:lk] = 1197512                      (: 'xsl-formatter' ':' 'xslt' :)
            or $state[$p:lk] = 1197513) then                (: 'xslt' ':' 'xslt' :)
        let $state := p:memoized($state, 1)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:try-variable($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, -1, 1)
              else
                p:memoize($backtrack, $state, -7, 1)
      else
        $state
    let $state :=
      if ($state[$p:lk] = -1) then
        let $state := p:try-variable($input, $state)
        return $state
      else if ($state[$p:lk] = 925                          (: 'for-each' '(' :)
            or $state[$p:lk] = 3869                         (: 'for-each' 'from' :)
            or $state[$p:lk] = 9501) then                   (: 'for-each' '{' :)
        let $state := p:try-forEachStep($input, $state)
        return $state
      else if ($state[$p:lk] = 961                          (: 'viewport' '(' :)
            or $state[$p:lk] = 3905                         (: 'viewport' 'from' :)
            or $state[$p:lk] = 9537) then                   (: 'viewport' '{' :)
        let $state := p:try-viewportStep($input, $state)
        return $state
      else if ($state[$p:lk] = 930) then                    (: 'if' '(' :)
        let $state := p:try-chooseStep($input, $state)
        return $state
      else if ($state[$p:lk] = 9529) then                   (: 'try' '{' :)
        let $state := p:try-tryStep($input, $state)
        return $state
      else if ($state[$p:lk] = 74) then                     (: '{' :)
        let $state := p:try-groupStep($input, $state)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:try-atomicStep($input, $state)
        return $state
    let $state := p:lookahead1W(48, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    return
      if ($state[$p:l1] = 75) then                          (: '}' :)
        $state
      else
        p:try-subpipeline-1($input, $state)
};

(:~
 : Parse subpipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-subpipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-subpipeline-1($input, $state)
  return p:reduce($state, "subpipeline", $count)
};

(:~
 : Try parsing subpipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-subpipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-subpipeline-1($input, $state)
  return p:reduce($state, "subpipeline", $count)
};

(:~
 : Parse option.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-option($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(6, $input, $state)                  (: '$' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-QName($input, $state)
  let $state := p:lookahead1W(32, $input, $state)           (: Whitespace | ')' | ',' | '=' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12) then                       (: '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  return p:reduce($state, "option", $count)
};

(:~
 : Try parsing option.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-option($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(6, $input, $state)                  (: '$' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-QName($input, $state)
  let $state := p:lookahead1W(32, $input, $state)           (: Whitespace | ')' | ',' | '=' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12) then                       (: '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  return p:reduce($state, "option", $count)
};

(:~
 : Parse input.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-input($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 47) then                            (: 'primary' :)
      let $state := p:lookahead2W(46, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1071                                (: 'primary' ')' :)
     or $state[$p:lk] = 1199) then                          (: 'primary' ',' :)
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(39, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 36                         (: 'item' :)
              or $state[$p:l1] = 50) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 50) then                    (: 'sequence' :)
              let $state := p:shift(50, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(36, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "input", $count)
};

(:~
 : Try parsing input.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-input($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 47) then                            (: 'primary' :)
      let $state := p:lookahead2W(46, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1071                                (: 'primary' ')' :)
     or $state[$p:lk] = 1199) then                          (: 'primary' ',' :)
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(47, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(39, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 36                         (: 'item' :)
              or $state[$p:l1] = 50) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 50) then                    (: 'sequence' :)
              let $state := p:shift(50, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(36, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "input", $count)
};

(:~
 : Parse the 1st loop of production inports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-inports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(24, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(22, $input, $state)     (: Whitespace | '$' | 'primary' :)
        let $state :=
          if ($state[$p:l1] = 47) then                      (: 'primary' :)
            let $state := p:parse-input($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:parse-option($input, $state)
            return $state
        return p:parse-inports-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production inports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-inports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(24, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(22, $input, $state)     (: Whitespace | '$' | 'primary' :)
        let $state :=
          if ($state[$p:l1] = 47) then                      (: 'primary' :)
            let $state := p:try-input($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:try-option($input, $state)
            return $state
        return p:try-inports-1($input, $state)
};

(:~
 : Parse inports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-inports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(37, $input, $state)           (: Whitespace | '$' | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 6                              (: '$' :)
          or $state[$p:l1] = 47) then                       (: 'primary' :)
      let $state :=
        if ($state[$p:l1] = 47) then                        (: 'primary' :)
          let $state := p:parse-input($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:parse-option($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:parse-inports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "inports", $count)
};

(:~
 : Try parsing inports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-inports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(37, $input, $state)           (: Whitespace | '$' | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 6                              (: '$' :)
          or $state[$p:l1] = 47) then                       (: 'primary' :)
      let $state :=
        if ($state[$p:l1] = 47) then                        (: 'primary' :)
          let $state := p:try-input($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:try-option($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:try-inports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "inports", $count)
};

(:~
 : Parse CName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  return p:reduce($state, "CName", $count)
};

(:~
 : Try parsing CName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-CName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  return p:reduce($state, "CName", $count)
};

(:~
 : Parse QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'add-attribute' :)
     or $state[$p:l1] = 14                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 15                                  (: 'compare' :)
     or $state[$p:l1] = 17                                  (: 'count' :)
     or $state[$p:l1] = 18                                  (: 'default' :)
     or $state[$p:l1] = 19                                  (: 'delete' :)
     or $state[$p:l1] = 20                                  (: 'directory-list' :)
     or $state[$p:l1] = 21                                  (: 'else' :)
     or $state[$p:l1] = 23                                  (: 'error' :)
     or $state[$p:l1] = 25                                  (: 'escape-markup' :)
     or $state[$p:l1] = 26                                  (: 'exec' :)
     or $state[$p:l1] = 27                                  (: 'filter' :)
     or $state[$p:l1] = 28                                  (: 'for-each' :)
     or $state[$p:l1] = 29                                  (: 'hash' :)
     or $state[$p:l1] = 31                                  (: 'http-request' :)
     or $state[$p:l1] = 32                                  (: 'identity' :)
     or $state[$p:l1] = 33                                  (: 'if' :)
     or $state[$p:l1] = 34                                  (: 'insert' :)
     or $state[$p:l1] = 35                                  (: 'label-elements' :)
     or $state[$p:l1] = 37                                  (: 'library' :)
     or $state[$p:l1] = 38                                  (: 'load' :)
     or $state[$p:l1] = 39                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 40                                  (: 'namespace' :)
     or $state[$p:l1] = 41                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 42                                  (: 'pack' :)
     or $state[$p:l1] = 43                                  (: 'parameters' :)
     or $state[$p:l1] = 44                                  (: 'pipeline' :)
     or $state[$p:l1] = 46                                  (: 'rename' :)
     or $state[$p:l1] = 48                                  (: 'replace' :)
     or $state[$p:l1] = 49                                  (: 'set-attributes' :)
     or $state[$p:l1] = 51                                  (: 'sink' :)
     or $state[$p:l1] = 52                                  (: 'split-sequence' :)
     or $state[$p:l1] = 53                                  (: 'step' :)
     or $state[$p:l1] = 54                                  (: 'store' :)
     or $state[$p:l1] = 55                                  (: 'string-replace' :)
     or $state[$p:l1] = 56                                  (: 'try' :)
     or $state[$p:l1] = 57                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 58                                  (: 'unwrap' :)
     or $state[$p:l1] = 59                                  (: 'uuid' :)
     or $state[$p:l1] = 60                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 61                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 62                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 63                                  (: 'variable' :)
     or $state[$p:l1] = 64                                  (: 'viewport' :)
     or $state[$p:l1] = 65                                  (: 'wrap' :)
     or $state[$p:l1] = 66                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 67                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 68                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 69                                  (: 'xinclude' :)
     or $state[$p:l1] = 70                                  (: 'xquery' :)
     or $state[$p:l1] = 71                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 72                                  (: 'xslt' :)
     or $state[$p:l1] = 73) then                            (: 'xslt' :)
      let $state := p:lookahead2W(38, $input, $state)       (: Whitespace | ')' | ',' | ':' | '=' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1413                                (: NCName^Token ':' :)
     or $state[$p:lk] = 1422                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1423                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1425                                (: 'compare' ':' :)
     or $state[$p:lk] = 1426                                (: 'count' ':' :)
     or $state[$p:lk] = 1427                                (: 'default' ':' :)
     or $state[$p:lk] = 1428                                (: 'delete' ':' :)
     or $state[$p:lk] = 1429                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1431                                (: 'else' ':' :)
     or $state[$p:lk] = 1433                                (: 'error' ':' :)
     or $state[$p:lk] = 1434                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1435                                (: 'exec' ':' :)
     or $state[$p:lk] = 1436                                (: 'filter' ':' :)
     or $state[$p:lk] = 1437                                (: 'for-each' ':' :)
     or $state[$p:lk] = 1439                                (: 'hash' ':' :)
     or $state[$p:lk] = 1440                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1441                                (: 'identity' ':' :)
     or $state[$p:lk] = 1442                                (: 'if' ':' :)
     or $state[$p:lk] = 1443                                (: 'insert' ':' :)
     or $state[$p:lk] = 1445                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1446                                (: 'library' ':' :)
     or $state[$p:lk] = 1447                                (: 'load' ':' :)
     or $state[$p:lk] = 1448                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1449                                (: 'namespace' ':' :)
     or $state[$p:lk] = 1450                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1451                                (: 'pack' ':' :)
     or $state[$p:lk] = 1452                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1454                                (: 'pipeline' ':' :)
     or $state[$p:lk] = 1456                                (: 'rename' ':' :)
     or $state[$p:lk] = 1457                                (: 'replace' ':' :)
     or $state[$p:lk] = 1459                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1460                                (: 'sink' ':' :)
     or $state[$p:lk] = 1461                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1462                                (: 'step' ':' :)
     or $state[$p:lk] = 1463                                (: 'store' ':' :)
     or $state[$p:lk] = 1464                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1465                                (: 'try' ':' :)
     or $state[$p:lk] = 1466                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1467                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1468                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1469                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1470                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1471                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1472                                (: 'variable' ':' :)
     or $state[$p:lk] = 1473                                (: 'viewport' ':' :)
     or $state[$p:lk] = 1474                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1475                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1476                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1477                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1478                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1479                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1480                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1481) then                          (: 'xslt' ':' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NCName($input, $state)
      return $state
  return p:reduce($state, "QName", $count)
};

(:~
 : Try parsing QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'add-attribute' :)
     or $state[$p:l1] = 14                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 15                                  (: 'compare' :)
     or $state[$p:l1] = 17                                  (: 'count' :)
     or $state[$p:l1] = 18                                  (: 'default' :)
     or $state[$p:l1] = 19                                  (: 'delete' :)
     or $state[$p:l1] = 20                                  (: 'directory-list' :)
     or $state[$p:l1] = 21                                  (: 'else' :)
     or $state[$p:l1] = 23                                  (: 'error' :)
     or $state[$p:l1] = 25                                  (: 'escape-markup' :)
     or $state[$p:l1] = 26                                  (: 'exec' :)
     or $state[$p:l1] = 27                                  (: 'filter' :)
     or $state[$p:l1] = 28                                  (: 'for-each' :)
     or $state[$p:l1] = 29                                  (: 'hash' :)
     or $state[$p:l1] = 31                                  (: 'http-request' :)
     or $state[$p:l1] = 32                                  (: 'identity' :)
     or $state[$p:l1] = 33                                  (: 'if' :)
     or $state[$p:l1] = 34                                  (: 'insert' :)
     or $state[$p:l1] = 35                                  (: 'label-elements' :)
     or $state[$p:l1] = 37                                  (: 'library' :)
     or $state[$p:l1] = 38                                  (: 'load' :)
     or $state[$p:l1] = 39                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 40                                  (: 'namespace' :)
     or $state[$p:l1] = 41                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 42                                  (: 'pack' :)
     or $state[$p:l1] = 43                                  (: 'parameters' :)
     or $state[$p:l1] = 44                                  (: 'pipeline' :)
     or $state[$p:l1] = 46                                  (: 'rename' :)
     or $state[$p:l1] = 48                                  (: 'replace' :)
     or $state[$p:l1] = 49                                  (: 'set-attributes' :)
     or $state[$p:l1] = 51                                  (: 'sink' :)
     or $state[$p:l1] = 52                                  (: 'split-sequence' :)
     or $state[$p:l1] = 53                                  (: 'step' :)
     or $state[$p:l1] = 54                                  (: 'store' :)
     or $state[$p:l1] = 55                                  (: 'string-replace' :)
     or $state[$p:l1] = 56                                  (: 'try' :)
     or $state[$p:l1] = 57                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 58                                  (: 'unwrap' :)
     or $state[$p:l1] = 59                                  (: 'uuid' :)
     or $state[$p:l1] = 60                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 61                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 62                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 63                                  (: 'variable' :)
     or $state[$p:l1] = 64                                  (: 'viewport' :)
     or $state[$p:l1] = 65                                  (: 'wrap' :)
     or $state[$p:l1] = 66                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 67                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 68                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 69                                  (: 'xinclude' :)
     or $state[$p:l1] = 70                                  (: 'xquery' :)
     or $state[$p:l1] = 71                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 72                                  (: 'xslt' :)
     or $state[$p:l1] = 73) then                            (: 'xslt' :)
      let $state := p:lookahead2W(38, $input, $state)       (: Whitespace | ')' | ',' | ':' | '=' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1413                                (: NCName^Token ':' :)
     or $state[$p:lk] = 1422                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1423                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1425                                (: 'compare' ':' :)
     or $state[$p:lk] = 1426                                (: 'count' ':' :)
     or $state[$p:lk] = 1427                                (: 'default' ':' :)
     or $state[$p:lk] = 1428                                (: 'delete' ':' :)
     or $state[$p:lk] = 1429                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1431                                (: 'else' ':' :)
     or $state[$p:lk] = 1433                                (: 'error' ':' :)
     or $state[$p:lk] = 1434                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1435                                (: 'exec' ':' :)
     or $state[$p:lk] = 1436                                (: 'filter' ':' :)
     or $state[$p:lk] = 1437                                (: 'for-each' ':' :)
     or $state[$p:lk] = 1439                                (: 'hash' ':' :)
     or $state[$p:lk] = 1440                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1441                                (: 'identity' ':' :)
     or $state[$p:lk] = 1442                                (: 'if' ':' :)
     or $state[$p:lk] = 1443                                (: 'insert' ':' :)
     or $state[$p:lk] = 1445                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1446                                (: 'library' ':' :)
     or $state[$p:lk] = 1447                                (: 'load' ':' :)
     or $state[$p:lk] = 1448                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1449                                (: 'namespace' ':' :)
     or $state[$p:lk] = 1450                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1451                                (: 'pack' ':' :)
     or $state[$p:lk] = 1452                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1454                                (: 'pipeline' ':' :)
     or $state[$p:lk] = 1456                                (: 'rename' ':' :)
     or $state[$p:lk] = 1457                                (: 'replace' ':' :)
     or $state[$p:lk] = 1459                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1460                                (: 'sink' ':' :)
     or $state[$p:lk] = 1461                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1462                                (: 'step' ':' :)
     or $state[$p:lk] = 1463                                (: 'store' ':' :)
     or $state[$p:lk] = 1464                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1465                                (: 'try' ':' :)
     or $state[$p:lk] = 1466                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1467                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1468                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1469                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1470                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1471                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1472                                (: 'variable' ':' :)
     or $state[$p:lk] = 1473                                (: 'viewport' ':' :)
     or $state[$p:lk] = 1474                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1475                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1476                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1477                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1478                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1479                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1480                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1481) then                          (: 'xslt' ':' :)
      let $state := p:try-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-NCName($input, $state)
      return $state
  return p:reduce($state, "QName", $count)
};

(:~
 : Parse declareStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-declareStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 54) then                            (: 'step' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 14                             (: 'add-attribute' :)
          or $state[$p:lk] = 15                             (: 'add-xml-base' :)
          or $state[$p:lk] = 17                             (: 'compare' :)
          or $state[$p:lk] = 18                             (: 'count' :)
          or $state[$p:lk] = 19                             (: 'default' :)
          or $state[$p:lk] = 20                             (: 'delete' :)
          or $state[$p:lk] = 21                             (: 'directory-list' :)
          or $state[$p:lk] = 23                             (: 'else' :)
          or $state[$p:lk] = 25                             (: 'error' :)
          or $state[$p:lk] = 26                             (: 'escape-markup' :)
          or $state[$p:lk] = 27                             (: 'exec' :)
          or $state[$p:lk] = 28                             (: 'filter' :)
          or $state[$p:lk] = 29                             (: 'for-each' :)
          or $state[$p:lk] = 31                             (: 'hash' :)
          or $state[$p:lk] = 32                             (: 'http-request' :)
          or $state[$p:lk] = 33                             (: 'identity' :)
          or $state[$p:lk] = 34                             (: 'if' :)
          or $state[$p:lk] = 35                             (: 'insert' :)
          or $state[$p:lk] = 37                             (: 'label-elements' :)
          or $state[$p:lk] = 38                             (: 'library' :)
          or $state[$p:lk] = 39                             (: 'load' :)
          or $state[$p:lk] = 40                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 41                             (: 'namespace' :)
          or $state[$p:lk] = 42                             (: 'namespace-rename' :)
          or $state[$p:lk] = 43                             (: 'pack' :)
          or $state[$p:lk] = 44                             (: 'parameters' :)
          or $state[$p:lk] = 46                             (: 'pipeline' :)
          or $state[$p:lk] = 48                             (: 'rename' :)
          or $state[$p:lk] = 49                             (: 'replace' :)
          or $state[$p:lk] = 51                             (: 'set-attributes' :)
          or $state[$p:lk] = 52                             (: 'sink' :)
          or $state[$p:lk] = 53                             (: 'split-sequence' :)
          or $state[$p:lk] = 55                             (: 'store' :)
          or $state[$p:lk] = 56                             (: 'string-replace' :)
          or $state[$p:lk] = 57                             (: 'try' :)
          or $state[$p:lk] = 58                             (: 'unescape-markup' :)
          or $state[$p:lk] = 59                             (: 'unwrap' :)
          or $state[$p:lk] = 60                             (: 'uuid' :)
          or $state[$p:lk] = 61                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 62                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 63                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 64                             (: 'variable' :)
          or $state[$p:lk] = 65                             (: 'viewport' :)
          or $state[$p:lk] = 66                             (: 'wrap' :)
          or $state[$p:lk] = 67                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 68                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 69                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 70                             (: 'xinclude' :)
          or $state[$p:lk] = 71                             (: 'xquery' :)
          or $state[$p:lk] = 72                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 73                             (: 'xslt' :)
          or $state[$p:lk] = 1462                           (: 'step' ':' :)
          or $state[$p:lk] = 1590) then                     (: 'step' '=' :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(16, $input, $state)           (: Whitespace | 'step' :)
  let $state := p:shift(54, $input, $state)                 (: 'step' :)
  let $state := p:lookahead1W(45, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 74) then                      (: '{' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "declareStep", $count)
};

(:~
 : Try parsing declareStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-declareStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 54) then                            (: 'step' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 14                             (: 'add-attribute' :)
          or $state[$p:lk] = 15                             (: 'add-xml-base' :)
          or $state[$p:lk] = 17                             (: 'compare' :)
          or $state[$p:lk] = 18                             (: 'count' :)
          or $state[$p:lk] = 19                             (: 'default' :)
          or $state[$p:lk] = 20                             (: 'delete' :)
          or $state[$p:lk] = 21                             (: 'directory-list' :)
          or $state[$p:lk] = 23                             (: 'else' :)
          or $state[$p:lk] = 25                             (: 'error' :)
          or $state[$p:lk] = 26                             (: 'escape-markup' :)
          or $state[$p:lk] = 27                             (: 'exec' :)
          or $state[$p:lk] = 28                             (: 'filter' :)
          or $state[$p:lk] = 29                             (: 'for-each' :)
          or $state[$p:lk] = 31                             (: 'hash' :)
          or $state[$p:lk] = 32                             (: 'http-request' :)
          or $state[$p:lk] = 33                             (: 'identity' :)
          or $state[$p:lk] = 34                             (: 'if' :)
          or $state[$p:lk] = 35                             (: 'insert' :)
          or $state[$p:lk] = 37                             (: 'label-elements' :)
          or $state[$p:lk] = 38                             (: 'library' :)
          or $state[$p:lk] = 39                             (: 'load' :)
          or $state[$p:lk] = 40                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 41                             (: 'namespace' :)
          or $state[$p:lk] = 42                             (: 'namespace-rename' :)
          or $state[$p:lk] = 43                             (: 'pack' :)
          or $state[$p:lk] = 44                             (: 'parameters' :)
          or $state[$p:lk] = 46                             (: 'pipeline' :)
          or $state[$p:lk] = 48                             (: 'rename' :)
          or $state[$p:lk] = 49                             (: 'replace' :)
          or $state[$p:lk] = 51                             (: 'set-attributes' :)
          or $state[$p:lk] = 52                             (: 'sink' :)
          or $state[$p:lk] = 53                             (: 'split-sequence' :)
          or $state[$p:lk] = 55                             (: 'store' :)
          or $state[$p:lk] = 56                             (: 'string-replace' :)
          or $state[$p:lk] = 57                             (: 'try' :)
          or $state[$p:lk] = 58                             (: 'unescape-markup' :)
          or $state[$p:lk] = 59                             (: 'unwrap' :)
          or $state[$p:lk] = 60                             (: 'uuid' :)
          or $state[$p:lk] = 61                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 62                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 63                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 64                             (: 'variable' :)
          or $state[$p:lk] = 65                             (: 'viewport' :)
          or $state[$p:lk] = 66                             (: 'wrap' :)
          or $state[$p:lk] = 67                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 68                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 69                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 70                             (: 'xinclude' :)
          or $state[$p:lk] = 71                             (: 'xquery' :)
          or $state[$p:lk] = 72                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 73                             (: 'xslt' :)
          or $state[$p:lk] = 1462                           (: 'step' ':' :)
          or $state[$p:lk] = 1590) then                     (: 'step' '=' :)
      let $state := p:try-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(16, $input, $state)           (: Whitespace | 'step' :)
  let $state := p:shift(54, $input, $state)                 (: 'step' :)
  let $state := p:lookahead1W(45, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 74) then                      (: '{' :)
      let $state := p:try-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(74, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(75, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "declareStep", $count)
};

(:~
 : Parse NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5) then                             (: NCName^Token :)
      let $state := p:shift(5, $input, $state)              (: NCName^Token :)
      return $state
    else if ($state[$p:l1] = 14) then                       (: 'add-attribute' :)
      let $state := p:shift(14, $input, $state)             (: 'add-attribute' :)
      return $state
    else if ($state[$p:l1] = 15) then                       (: 'add-xml-base' :)
      let $state := p:shift(15, $input, $state)             (: 'add-xml-base' :)
      return $state
    else if ($state[$p:l1] = 17) then                       (: 'compare' :)
      let $state := p:shift(17, $input, $state)             (: 'compare' :)
      return $state
    else if ($state[$p:l1] = 18) then                       (: 'count' :)
      let $state := p:shift(18, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 20) then                       (: 'delete' :)
      let $state := p:shift(20, $input, $state)             (: 'delete' :)
      return $state
    else if ($state[$p:l1] = 21) then                       (: 'directory-list' :)
      let $state := p:shift(21, $input, $state)             (: 'directory-list' :)
      return $state
    else if ($state[$p:l1] = 25) then                       (: 'error' :)
      let $state := p:shift(25, $input, $state)             (: 'error' :)
      return $state
    else if ($state[$p:l1] = 26) then                       (: 'escape-markup' :)
      let $state := p:shift(26, $input, $state)             (: 'escape-markup' :)
      return $state
    else if ($state[$p:l1] = 27) then                       (: 'exec' :)
      let $state := p:shift(27, $input, $state)             (: 'exec' :)
      return $state
    else if ($state[$p:l1] = 28) then                       (: 'filter' :)
      let $state := p:shift(28, $input, $state)             (: 'filter' :)
      return $state
    else if ($state[$p:l1] = 31) then                       (: 'hash' :)
      let $state := p:shift(31, $input, $state)             (: 'hash' :)
      return $state
    else if ($state[$p:l1] = 32) then                       (: 'http-request' :)
      let $state := p:shift(32, $input, $state)             (: 'http-request' :)
      return $state
    else if ($state[$p:l1] = 33) then                       (: 'identity' :)
      let $state := p:shift(33, $input, $state)             (: 'identity' :)
      return $state
    else if ($state[$p:l1] = 35) then                       (: 'insert' :)
      let $state := p:shift(35, $input, $state)             (: 'insert' :)
      return $state
    else if ($state[$p:l1] = 37) then                       (: 'label-elements' :)
      let $state := p:shift(37, $input, $state)             (: 'label-elements' :)
      return $state
    else if ($state[$p:l1] = 39) then                       (: 'load' :)
      let $state := p:shift(39, $input, $state)             (: 'load' :)
      return $state
    else if ($state[$p:l1] = 40) then                       (: 'make-absolute-uris' :)
      let $state := p:shift(40, $input, $state)             (: 'make-absolute-uris' :)
      return $state
    else if ($state[$p:l1] = 42) then                       (: 'namespace-rename' :)
      let $state := p:shift(42, $input, $state)             (: 'namespace-rename' :)
      return $state
    else if ($state[$p:l1] = 43) then                       (: 'pack' :)
      let $state := p:shift(43, $input, $state)             (: 'pack' :)
      return $state
    else if ($state[$p:l1] = 44) then                       (: 'parameters' :)
      let $state := p:shift(44, $input, $state)             (: 'parameters' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'rename' :)
      let $state := p:shift(48, $input, $state)             (: 'rename' :)
      return $state
    else if ($state[$p:l1] = 49) then                       (: 'replace' :)
      let $state := p:shift(49, $input, $state)             (: 'replace' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'set-attributes' :)
      let $state := p:shift(51, $input, $state)             (: 'set-attributes' :)
      return $state
    else if ($state[$p:l1] = 52) then                       (: 'sink' :)
      let $state := p:shift(52, $input, $state)             (: 'sink' :)
      return $state
    else if ($state[$p:l1] = 53) then                       (: 'split-sequence' :)
      let $state := p:shift(53, $input, $state)             (: 'split-sequence' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'store' :)
      let $state := p:shift(55, $input, $state)             (: 'store' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'string-replace' :)
      let $state := p:shift(56, $input, $state)             (: 'string-replace' :)
      return $state
    else if ($state[$p:l1] = 58) then                       (: 'unescape-markup' :)
      let $state := p:shift(58, $input, $state)             (: 'unescape-markup' :)
      return $state
    else if ($state[$p:l1] = 59) then                       (: 'unwrap' :)
      let $state := p:shift(59, $input, $state)             (: 'unwrap' :)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'uuid' :)
      let $state := p:shift(60, $input, $state)             (: 'uuid' :)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'validate-with-relax-ng' :)
      let $state := p:shift(61, $input, $state)             (: 'validate-with-relax-ng' :)
      return $state
    else if ($state[$p:l1] = 62) then                       (: 'validate-with-schematron' :)
      let $state := p:shift(62, $input, $state)             (: 'validate-with-schematron' :)
      return $state
    else if ($state[$p:l1] = 63) then                       (: 'validate-with-xml-schema' :)
      let $state := p:shift(63, $input, $state)             (: 'validate-with-xml-schema' :)
      return $state
    else if ($state[$p:l1] = 66) then                       (: 'wrap' :)
      let $state := p:shift(66, $input, $state)             (: 'wrap' :)
      return $state
    else if ($state[$p:l1] = 67) then                       (: 'wrap-sequence' :)
      let $state := p:shift(67, $input, $state)             (: 'wrap-sequence' :)
      return $state
    else if ($state[$p:l1] = 68) then                       (: 'www-form-urldecode' :)
      let $state := p:shift(68, $input, $state)             (: 'www-form-urldecode' :)
      return $state
    else if ($state[$p:l1] = 69) then                       (: 'www-form-urlencode' :)
      let $state := p:shift(69, $input, $state)             (: 'www-form-urlencode' :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'xinclude' :)
      let $state := p:shift(70, $input, $state)             (: 'xinclude' :)
      return $state
    else if ($state[$p:l1] = 71) then                       (: 'xquery' :)
      let $state := p:shift(71, $input, $state)             (: 'xquery' :)
      return $state
    else if ($state[$p:l1] = 73) then                       (: 'xslt' :)
      let $state := p:shift(73, $input, $state)             (: 'xslt' :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'xsl-formatter' :)
      let $state := p:shift(72, $input, $state)             (: 'xsl-formatter' :)
      return $state
    else if ($state[$p:l1] = 34) then                       (: 'if' :)
      let $state := p:shift(34, $input, $state)             (: 'if' :)
      return $state
    else if ($state[$p:l1] = 29) then                       (: 'for-each' :)
      let $state := p:shift(29, $input, $state)             (: 'for-each' :)
      return $state
    else if ($state[$p:l1] = 57) then                       (: 'try' :)
      let $state := p:shift(57, $input, $state)             (: 'try' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'viewport' :)
      let $state := p:shift(65, $input, $state)             (: 'viewport' :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: 'default' :)
      let $state := p:shift(19, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 38) then                       (: 'library' :)
      let $state := p:shift(38, $input, $state)             (: 'library' :)
      return $state
    else if ($state[$p:l1] = 41) then                       (: 'namespace' :)
      let $state := p:shift(41, $input, $state)             (: 'namespace' :)
      return $state
    else if ($state[$p:l1] = 46) then                       (: 'pipeline' :)
      let $state := p:shift(46, $input, $state)             (: 'pipeline' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'step' :)
      let $state := p:shift(54, $input, $state)             (: 'step' :)
      return $state
    else if ($state[$p:l1] = 64) then                       (: 'variable' :)
      let $state := p:shift(64, $input, $state)             (: 'variable' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(23, $input, $state)             (: 'else' :)
      return $state
  return p:reduce($state, "NCName", $count)
};

(:~
 : Try parsing NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5) then                             (: NCName^Token :)
      let $state := p:shift(5, $input, $state)              (: NCName^Token :)
      return $state
    else if ($state[$p:l1] = 14) then                       (: 'add-attribute' :)
      let $state := p:shift(14, $input, $state)             (: 'add-attribute' :)
      return $state
    else if ($state[$p:l1] = 15) then                       (: 'add-xml-base' :)
      let $state := p:shift(15, $input, $state)             (: 'add-xml-base' :)
      return $state
    else if ($state[$p:l1] = 17) then                       (: 'compare' :)
      let $state := p:shift(17, $input, $state)             (: 'compare' :)
      return $state
    else if ($state[$p:l1] = 18) then                       (: 'count' :)
      let $state := p:shift(18, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 20) then                       (: 'delete' :)
      let $state := p:shift(20, $input, $state)             (: 'delete' :)
      return $state
    else if ($state[$p:l1] = 21) then                       (: 'directory-list' :)
      let $state := p:shift(21, $input, $state)             (: 'directory-list' :)
      return $state
    else if ($state[$p:l1] = 25) then                       (: 'error' :)
      let $state := p:shift(25, $input, $state)             (: 'error' :)
      return $state
    else if ($state[$p:l1] = 26) then                       (: 'escape-markup' :)
      let $state := p:shift(26, $input, $state)             (: 'escape-markup' :)
      return $state
    else if ($state[$p:l1] = 27) then                       (: 'exec' :)
      let $state := p:shift(27, $input, $state)             (: 'exec' :)
      return $state
    else if ($state[$p:l1] = 28) then                       (: 'filter' :)
      let $state := p:shift(28, $input, $state)             (: 'filter' :)
      return $state
    else if ($state[$p:l1] = 31) then                       (: 'hash' :)
      let $state := p:shift(31, $input, $state)             (: 'hash' :)
      return $state
    else if ($state[$p:l1] = 32) then                       (: 'http-request' :)
      let $state := p:shift(32, $input, $state)             (: 'http-request' :)
      return $state
    else if ($state[$p:l1] = 33) then                       (: 'identity' :)
      let $state := p:shift(33, $input, $state)             (: 'identity' :)
      return $state
    else if ($state[$p:l1] = 35) then                       (: 'insert' :)
      let $state := p:shift(35, $input, $state)             (: 'insert' :)
      return $state
    else if ($state[$p:l1] = 37) then                       (: 'label-elements' :)
      let $state := p:shift(37, $input, $state)             (: 'label-elements' :)
      return $state
    else if ($state[$p:l1] = 39) then                       (: 'load' :)
      let $state := p:shift(39, $input, $state)             (: 'load' :)
      return $state
    else if ($state[$p:l1] = 40) then                       (: 'make-absolute-uris' :)
      let $state := p:shift(40, $input, $state)             (: 'make-absolute-uris' :)
      return $state
    else if ($state[$p:l1] = 42) then                       (: 'namespace-rename' :)
      let $state := p:shift(42, $input, $state)             (: 'namespace-rename' :)
      return $state
    else if ($state[$p:l1] = 43) then                       (: 'pack' :)
      let $state := p:shift(43, $input, $state)             (: 'pack' :)
      return $state
    else if ($state[$p:l1] = 44) then                       (: 'parameters' :)
      let $state := p:shift(44, $input, $state)             (: 'parameters' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'rename' :)
      let $state := p:shift(48, $input, $state)             (: 'rename' :)
      return $state
    else if ($state[$p:l1] = 49) then                       (: 'replace' :)
      let $state := p:shift(49, $input, $state)             (: 'replace' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'set-attributes' :)
      let $state := p:shift(51, $input, $state)             (: 'set-attributes' :)
      return $state
    else if ($state[$p:l1] = 52) then                       (: 'sink' :)
      let $state := p:shift(52, $input, $state)             (: 'sink' :)
      return $state
    else if ($state[$p:l1] = 53) then                       (: 'split-sequence' :)
      let $state := p:shift(53, $input, $state)             (: 'split-sequence' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'store' :)
      let $state := p:shift(55, $input, $state)             (: 'store' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'string-replace' :)
      let $state := p:shift(56, $input, $state)             (: 'string-replace' :)
      return $state
    else if ($state[$p:l1] = 58) then                       (: 'unescape-markup' :)
      let $state := p:shift(58, $input, $state)             (: 'unescape-markup' :)
      return $state
    else if ($state[$p:l1] = 59) then                       (: 'unwrap' :)
      let $state := p:shift(59, $input, $state)             (: 'unwrap' :)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'uuid' :)
      let $state := p:shift(60, $input, $state)             (: 'uuid' :)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'validate-with-relax-ng' :)
      let $state := p:shift(61, $input, $state)             (: 'validate-with-relax-ng' :)
      return $state
    else if ($state[$p:l1] = 62) then                       (: 'validate-with-schematron' :)
      let $state := p:shift(62, $input, $state)             (: 'validate-with-schematron' :)
      return $state
    else if ($state[$p:l1] = 63) then                       (: 'validate-with-xml-schema' :)
      let $state := p:shift(63, $input, $state)             (: 'validate-with-xml-schema' :)
      return $state
    else if ($state[$p:l1] = 66) then                       (: 'wrap' :)
      let $state := p:shift(66, $input, $state)             (: 'wrap' :)
      return $state
    else if ($state[$p:l1] = 67) then                       (: 'wrap-sequence' :)
      let $state := p:shift(67, $input, $state)             (: 'wrap-sequence' :)
      return $state
    else if ($state[$p:l1] = 68) then                       (: 'www-form-urldecode' :)
      let $state := p:shift(68, $input, $state)             (: 'www-form-urldecode' :)
      return $state
    else if ($state[$p:l1] = 69) then                       (: 'www-form-urlencode' :)
      let $state := p:shift(69, $input, $state)             (: 'www-form-urlencode' :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'xinclude' :)
      let $state := p:shift(70, $input, $state)             (: 'xinclude' :)
      return $state
    else if ($state[$p:l1] = 71) then                       (: 'xquery' :)
      let $state := p:shift(71, $input, $state)             (: 'xquery' :)
      return $state
    else if ($state[$p:l1] = 73) then                       (: 'xslt' :)
      let $state := p:shift(73, $input, $state)             (: 'xslt' :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'xsl-formatter' :)
      let $state := p:shift(72, $input, $state)             (: 'xsl-formatter' :)
      return $state
    else if ($state[$p:l1] = 34) then                       (: 'if' :)
      let $state := p:shift(34, $input, $state)             (: 'if' :)
      return $state
    else if ($state[$p:l1] = 29) then                       (: 'for-each' :)
      let $state := p:shift(29, $input, $state)             (: 'for-each' :)
      return $state
    else if ($state[$p:l1] = 57) then                       (: 'try' :)
      let $state := p:shift(57, $input, $state)             (: 'try' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'viewport' :)
      let $state := p:shift(65, $input, $state)             (: 'viewport' :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: 'default' :)
      let $state := p:shift(19, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 38) then                       (: 'library' :)
      let $state := p:shift(38, $input, $state)             (: 'library' :)
      return $state
    else if ($state[$p:l1] = 41) then                       (: 'namespace' :)
      let $state := p:shift(41, $input, $state)             (: 'namespace' :)
      return $state
    else if ($state[$p:l1] = 46) then                       (: 'pipeline' :)
      let $state := p:shift(46, $input, $state)             (: 'pipeline' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'step' :)
      let $state := p:shift(54, $input, $state)             (: 'step' :)
      return $state
    else if ($state[$p:l1] = 64) then                       (: 'variable' :)
      let $state := p:shift(64, $input, $state)             (: 'variable' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(23, $input, $state)             (: 'else' :)
      return $state
  return p:reduce($state, "NCName", $count)
};

(:~
 : Parse prefix.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-prefix($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(42, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  return p:reduce($state, "prefix", $count)
};

(:~
 : Parse namespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-namespace($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 41) then                            (: 'namespace' :)
      let $state := p:shift(41, $input, $state)             (: 'namespace' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-prefix($input, $state)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(19, $input, $state)             (: 'default' :)
      let $state := p:lookahead1W(13, $input, $state)       (: Whitespace | 'namespace' :)
      let $state := p:shift(41, $input, $state)             (: 'namespace' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
  return p:reduce($state, "namespace", $count)
};

(:~
 : Parse the 1st loop of production document (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-document-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(43, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
    let $state :=
      if ($state[$p:l1] = 19) then                          (: 'default' :)
        let $state := p:lookahead2W(34, $input, $state)     (: Whitespace | ':' | '=' | 'namespace' :)
        return $state
      else if ($state[$p:l1] = 41) then                     (: 'namespace' :)
        let $state := p:lookahead2W(47, $input, $state)     (: Whitespace | NCName^Token | ':' | '=' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 681                              (: 'namespace' NCName^Token :)
      and $state[$p:lk] != 1833                             (: 'namespace' 'add-attribute' :)
      and $state[$p:lk] != 1961                             (: 'namespace' 'add-xml-base' :)
      and $state[$p:lk] != 2217                             (: 'namespace' 'compare' :)
      and $state[$p:lk] != 2345                             (: 'namespace' 'count' :)
      and $state[$p:lk] != 2473                             (: 'namespace' 'default' :)
      and $state[$p:lk] != 2601                             (: 'namespace' 'delete' :)
      and $state[$p:lk] != 2729                             (: 'namespace' 'directory-list' :)
      and $state[$p:lk] != 2985                             (: 'namespace' 'else' :)
      and $state[$p:lk] != 3241                             (: 'namespace' 'error' :)
      and $state[$p:lk] != 3369                             (: 'namespace' 'escape-markup' :)
      and $state[$p:lk] != 3497                             (: 'namespace' 'exec' :)
      and $state[$p:lk] != 3625                             (: 'namespace' 'filter' :)
      and $state[$p:lk] != 3753                             (: 'namespace' 'for-each' :)
      and $state[$p:lk] != 4009                             (: 'namespace' 'hash' :)
      and $state[$p:lk] != 4137                             (: 'namespace' 'http-request' :)
      and $state[$p:lk] != 4265                             (: 'namespace' 'identity' :)
      and $state[$p:lk] != 4393                             (: 'namespace' 'if' :)
      and $state[$p:lk] != 4521                             (: 'namespace' 'insert' :)
      and $state[$p:lk] != 4777                             (: 'namespace' 'label-elements' :)
      and $state[$p:lk] != 4905                             (: 'namespace' 'library' :)
      and $state[$p:lk] != 5033                             (: 'namespace' 'load' :)
      and $state[$p:lk] != 5161                             (: 'namespace' 'make-absolute-uris' :)
      and $state[$p:lk] != 5267                             (: 'default' 'namespace' :)
      and $state[$p:lk] != 5289                             (: 'namespace' 'namespace' :)
      and $state[$p:lk] != 5417                             (: 'namespace' 'namespace-rename' :)
      and $state[$p:lk] != 5545                             (: 'namespace' 'pack' :)
      and $state[$p:lk] != 5673                             (: 'namespace' 'parameters' :)
      and $state[$p:lk] != 5929                             (: 'namespace' 'pipeline' :)
      and $state[$p:lk] != 6185                             (: 'namespace' 'rename' :)
      and $state[$p:lk] != 6313                             (: 'namespace' 'replace' :)
      and $state[$p:lk] != 6569                             (: 'namespace' 'set-attributes' :)
      and $state[$p:lk] != 6697                             (: 'namespace' 'sink' :)
      and $state[$p:lk] != 6825                             (: 'namespace' 'split-sequence' :)
      and $state[$p:lk] != 6953                             (: 'namespace' 'step' :)
      and $state[$p:lk] != 7081                             (: 'namespace' 'store' :)
      and $state[$p:lk] != 7209                             (: 'namespace' 'string-replace' :)
      and $state[$p:lk] != 7337                             (: 'namespace' 'try' :)
      and $state[$p:lk] != 7465                             (: 'namespace' 'unescape-markup' :)
      and $state[$p:lk] != 7593                             (: 'namespace' 'unwrap' :)
      and $state[$p:lk] != 7721                             (: 'namespace' 'uuid' :)
      and $state[$p:lk] != 7849                             (: 'namespace' 'validate-with-relax-ng' :)
      and $state[$p:lk] != 7977                             (: 'namespace' 'validate-with-schematron' :)
      and $state[$p:lk] != 8105                             (: 'namespace' 'validate-with-xml-schema' :)
      and $state[$p:lk] != 8233                             (: 'namespace' 'variable' :)
      and $state[$p:lk] != 8361                             (: 'namespace' 'viewport' :)
      and $state[$p:lk] != 8489                             (: 'namespace' 'wrap' :)
      and $state[$p:lk] != 8617                             (: 'namespace' 'wrap-sequence' :)
      and $state[$p:lk] != 8745                             (: 'namespace' 'www-form-urldecode' :)
      and $state[$p:lk] != 8873                             (: 'namespace' 'www-form-urlencode' :)
      and $state[$p:lk] != 9001                             (: 'namespace' 'xinclude' :)
      and $state[$p:lk] != 9129                             (: 'namespace' 'xquery' :)
      and $state[$p:lk] != 9257                             (: 'namespace' 'xsl-formatter' :)
      and $state[$p:lk] != 9385) then                       (: 'namespace' 'xslt' :)
        $state
      else
        let $state := p:parse-namespace($input, $state)
        return p:parse-document-1($input, $state)
};

(:~
 : Parse document.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-document($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-document-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 38) then                            (: 'library' :)
      let $state := p:lookahead2W(29, $input, $state)       (: Whitespace | EOF | ':' | '=' :)
      let $state :=
        if ($state[$p:lk] = 1446) then                      (: 'library' ':' :)
          let $state := p:lookahead3(42, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1574) then                 (: 'library' '=' :)
          let $state := p:lookahead3W(27, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 46                             (: 'step' :)
          or $state[$p:l1] = 54) then                       (: 'step' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      let $state :=
        if ($state[$p:lk] = 1454                            (: 'step' ':' :)
         or $state[$p:lk] = 1462) then                      (: 'step' ':' :)
          let $state := p:lookahead3(42, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1582                       (: 'step' '=' :)
              or $state[$p:lk] = 1590) then                 (: 'step' '=' :)
          let $state := p:lookahead3W(27, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 5                              (: 'add-attribute' :)
          or $state[$p:l1] = 14                             (: 'add-xml-base' :)
          or $state[$p:l1] = 15                             (: 'compare' :)
          or $state[$p:l1] = 17                             (: 'count' :)
          or $state[$p:l1] = 18                             (: 'default' :)
          or $state[$p:l1] = 19                             (: 'delete' :)
          or $state[$p:l1] = 20                             (: 'directory-list' :)
          or $state[$p:l1] = 21                             (: 'else' :)
          or $state[$p:l1] = 23                             (: 'error' :)
          or $state[$p:l1] = 25                             (: 'escape-markup' :)
          or $state[$p:l1] = 26                             (: 'exec' :)
          or $state[$p:l1] = 27                             (: 'filter' :)
          or $state[$p:l1] = 28                             (: 'for-each' :)
          or $state[$p:l1] = 29                             (: 'hash' :)
          or $state[$p:l1] = 31                             (: 'http-request' :)
          or $state[$p:l1] = 32                             (: 'identity' :)
          or $state[$p:l1] = 33                             (: 'if' :)
          or $state[$p:l1] = 34                             (: 'insert' :)
          or $state[$p:l1] = 35                             (: 'label-elements' :)
          or $state[$p:l1] = 37                             (: 'load' :)
          or $state[$p:l1] = 39                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 40                             (: 'namespace' :)
          or $state[$p:l1] = 41                             (: 'namespace-rename' :)
          or $state[$p:l1] = 42                             (: 'pack' :)
          or $state[$p:l1] = 43                             (: 'parameters' :)
          or $state[$p:l1] = 44                             (: 'rename' :)
          or $state[$p:l1] = 48                             (: 'replace' :)
          or $state[$p:l1] = 49                             (: 'set-attributes' :)
          or $state[$p:l1] = 51                             (: 'sink' :)
          or $state[$p:l1] = 52                             (: 'split-sequence' :)
          or $state[$p:l1] = 53                             (: 'store' :)
          or $state[$p:l1] = 55                             (: 'string-replace' :)
          or $state[$p:l1] = 56                             (: 'try' :)
          or $state[$p:l1] = 57                             (: 'unescape-markup' :)
          or $state[$p:l1] = 58                             (: 'unwrap' :)
          or $state[$p:l1] = 59                             (: 'uuid' :)
          or $state[$p:l1] = 60                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 61                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 62                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 63                             (: 'variable' :)
          or $state[$p:l1] = 64                             (: 'viewport' :)
          or $state[$p:l1] = 65                             (: 'wrap' :)
          or $state[$p:l1] = 66                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 67                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 68                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 69                             (: 'xinclude' :)
          or $state[$p:l1] = 70                             (: 'xquery' :)
          or $state[$p:l1] = 71                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 72                             (: 'xslt' :)
          or $state[$p:l1] = 73) then                       (: 'xslt' :)
      let $state := p:lookahead2W(25, $input, $state)       (: Whitespace | ':' | '=' :)
      let $state :=
        if ($state[$p:lk] = 1413                            (: 'add-attribute' ':' :)
         or $state[$p:lk] = 1422                            (: 'add-xml-base' ':' :)
         or $state[$p:lk] = 1423                            (: 'compare' ':' :)
         or $state[$p:lk] = 1425                            (: 'count' ':' :)
         or $state[$p:lk] = 1426                            (: 'default' ':' :)
         or $state[$p:lk] = 1427                            (: 'delete' ':' :)
         or $state[$p:lk] = 1428                            (: 'directory-list' ':' :)
         or $state[$p:lk] = 1429                            (: 'else' ':' :)
         or $state[$p:lk] = 1431                            (: 'error' ':' :)
         or $state[$p:lk] = 1433                            (: 'escape-markup' ':' :)
         or $state[$p:lk] = 1434                            (: 'exec' ':' :)
         or $state[$p:lk] = 1435                            (: 'filter' ':' :)
         or $state[$p:lk] = 1436                            (: 'for-each' ':' :)
         or $state[$p:lk] = 1437                            (: 'hash' ':' :)
         or $state[$p:lk] = 1439                            (: 'http-request' ':' :)
         or $state[$p:lk] = 1440                            (: 'identity' ':' :)
         or $state[$p:lk] = 1441                            (: 'if' ':' :)
         or $state[$p:lk] = 1442                            (: 'insert' ':' :)
         or $state[$p:lk] = 1443                            (: 'label-elements' ':' :)
         or $state[$p:lk] = 1445                            (: 'load' ':' :)
         or $state[$p:lk] = 1447                            (: 'make-absolute-uris' ':' :)
         or $state[$p:lk] = 1448                            (: 'namespace' ':' :)
         or $state[$p:lk] = 1449                            (: 'namespace-rename' ':' :)
         or $state[$p:lk] = 1450                            (: 'pack' ':' :)
         or $state[$p:lk] = 1451                            (: 'parameters' ':' :)
         or $state[$p:lk] = 1452                            (: 'rename' ':' :)
         or $state[$p:lk] = 1456                            (: 'replace' ':' :)
         or $state[$p:lk] = 1457                            (: 'set-attributes' ':' :)
         or $state[$p:lk] = 1459                            (: 'sink' ':' :)
         or $state[$p:lk] = 1460                            (: 'split-sequence' ':' :)
         or $state[$p:lk] = 1461                            (: 'store' ':' :)
         or $state[$p:lk] = 1463                            (: 'string-replace' ':' :)
         or $state[$p:lk] = 1464                            (: 'try' ':' :)
         or $state[$p:lk] = 1465                            (: 'unescape-markup' ':' :)
         or $state[$p:lk] = 1466                            (: 'unwrap' ':' :)
         or $state[$p:lk] = 1467                            (: 'uuid' ':' :)
         or $state[$p:lk] = 1468                            (: 'validate-with-relax-ng' ':' :)
         or $state[$p:lk] = 1469                            (: 'validate-with-schematron' ':' :)
         or $state[$p:lk] = 1470                            (: 'validate-with-xml-schema' ':' :)
         or $state[$p:lk] = 1471                            (: 'variable' ':' :)
         or $state[$p:lk] = 1472                            (: 'viewport' ':' :)
         or $state[$p:lk] = 1473                            (: 'wrap' ':' :)
         or $state[$p:lk] = 1474                            (: 'wrap-sequence' ':' :)
         or $state[$p:lk] = 1475                            (: 'www-form-urldecode' ':' :)
         or $state[$p:lk] = 1476                            (: 'www-form-urlencode' ':' :)
         or $state[$p:lk] = 1477                            (: 'xinclude' ':' :)
         or $state[$p:lk] = 1478                            (: 'xquery' ':' :)
         or $state[$p:lk] = 1479                            (: 'xsl-formatter' ':' :)
         or $state[$p:lk] = 1480                            (: 'xslt' ':' :)
         or $state[$p:lk] = 1481) then                      (: 'xslt' ':' :)
          let $state := p:lookahead3(42, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1541                       (: 'add-attribute' '=' :)
              or $state[$p:lk] = 1550                       (: 'add-xml-base' '=' :)
              or $state[$p:lk] = 1551                       (: 'compare' '=' :)
              or $state[$p:lk] = 1553                       (: 'count' '=' :)
              or $state[$p:lk] = 1554                       (: 'default' '=' :)
              or $state[$p:lk] = 1555                       (: 'delete' '=' :)
              or $state[$p:lk] = 1556                       (: 'directory-list' '=' :)
              or $state[$p:lk] = 1557                       (: 'else' '=' :)
              or $state[$p:lk] = 1559                       (: 'error' '=' :)
              or $state[$p:lk] = 1561                       (: 'escape-markup' '=' :)
              or $state[$p:lk] = 1562                       (: 'exec' '=' :)
              or $state[$p:lk] = 1563                       (: 'filter' '=' :)
              or $state[$p:lk] = 1564                       (: 'for-each' '=' :)
              or $state[$p:lk] = 1565                       (: 'hash' '=' :)
              or $state[$p:lk] = 1567                       (: 'http-request' '=' :)
              or $state[$p:lk] = 1568                       (: 'identity' '=' :)
              or $state[$p:lk] = 1569                       (: 'if' '=' :)
              or $state[$p:lk] = 1570                       (: 'insert' '=' :)
              or $state[$p:lk] = 1571                       (: 'label-elements' '=' :)
              or $state[$p:lk] = 1573                       (: 'load' '=' :)
              or $state[$p:lk] = 1575                       (: 'make-absolute-uris' '=' :)
              or $state[$p:lk] = 1576                       (: 'namespace' '=' :)
              or $state[$p:lk] = 1577                       (: 'namespace-rename' '=' :)
              or $state[$p:lk] = 1578                       (: 'pack' '=' :)
              or $state[$p:lk] = 1579                       (: 'parameters' '=' :)
              or $state[$p:lk] = 1580                       (: 'rename' '=' :)
              or $state[$p:lk] = 1584                       (: 'replace' '=' :)
              or $state[$p:lk] = 1585                       (: 'set-attributes' '=' :)
              or $state[$p:lk] = 1587                       (: 'sink' '=' :)
              or $state[$p:lk] = 1588                       (: 'split-sequence' '=' :)
              or $state[$p:lk] = 1589                       (: 'store' '=' :)
              or $state[$p:lk] = 1591                       (: 'string-replace' '=' :)
              or $state[$p:lk] = 1592                       (: 'try' '=' :)
              or $state[$p:lk] = 1593                       (: 'unescape-markup' '=' :)
              or $state[$p:lk] = 1594                       (: 'unwrap' '=' :)
              or $state[$p:lk] = 1595                       (: 'uuid' '=' :)
              or $state[$p:lk] = 1596                       (: 'validate-with-relax-ng' '=' :)
              or $state[$p:lk] = 1597                       (: 'validate-with-schematron' '=' :)
              or $state[$p:lk] = 1598                       (: 'validate-with-xml-schema' '=' :)
              or $state[$p:lk] = 1599                       (: 'variable' '=' :)
              or $state[$p:lk] = 1600                       (: 'viewport' '=' :)
              or $state[$p:lk] = 1601                       (: 'wrap' '=' :)
              or $state[$p:lk] = 1602                       (: 'wrap-sequence' '=' :)
              or $state[$p:lk] = 1603                       (: 'www-form-urldecode' '=' :)
              or $state[$p:lk] = 1604                       (: 'www-form-urlencode' '=' :)
              or $state[$p:lk] = 1605                       (: 'xinclude' '=' :)
              or $state[$p:lk] = 1606                       (: 'xquery' '=' :)
              or $state[$p:lk] = 1607                       (: 'xsl-formatter' '=' :)
              or $state[$p:lk] = 1608                       (: 'xslt' '=' :)
              or $state[$p:lk] = 1609) then                 (: 'xslt' '=' :)
          let $state := p:lookahead3W(27, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] != 294                           (: 'library' EOF :)
         and $state[$p:lk] != 686                           (: 'pipeline' NCName^Token :)
         and $state[$p:lk] != 694                           (: 'step' NCName^Token :)
         and $state[$p:lk] != 942                           (: 'pipeline' '(' :)
         and $state[$p:lk] != 950                           (: 'step' '(' :)
         and $state[$p:lk] != 1838                          (: 'pipeline' 'add-attribute' :)
         and $state[$p:lk] != 1846                          (: 'step' 'add-attribute' :)
         and $state[$p:lk] != 1966                          (: 'pipeline' 'add-xml-base' :)
         and $state[$p:lk] != 1974                          (: 'step' 'add-xml-base' :)
         and $state[$p:lk] != 2222                          (: 'pipeline' 'compare' :)
         and $state[$p:lk] != 2230                          (: 'step' 'compare' :)
         and $state[$p:lk] != 2350                          (: 'pipeline' 'count' :)
         and $state[$p:lk] != 2358                          (: 'step' 'count' :)
         and $state[$p:lk] != 2478                          (: 'pipeline' 'default' :)
         and $state[$p:lk] != 2486                          (: 'step' 'default' :)
         and $state[$p:lk] != 2606                          (: 'pipeline' 'delete' :)
         and $state[$p:lk] != 2614                          (: 'step' 'delete' :)
         and $state[$p:lk] != 2734                          (: 'pipeline' 'directory-list' :)
         and $state[$p:lk] != 2742                          (: 'step' 'directory-list' :)
         and $state[$p:lk] != 2990                          (: 'pipeline' 'else' :)
         and $state[$p:lk] != 2998                          (: 'step' 'else' :)
         and $state[$p:lk] != 3246                          (: 'pipeline' 'error' :)
         and $state[$p:lk] != 3254                          (: 'step' 'error' :)
         and $state[$p:lk] != 3374                          (: 'pipeline' 'escape-markup' :)
         and $state[$p:lk] != 3382                          (: 'step' 'escape-markup' :)
         and $state[$p:lk] != 3502                          (: 'pipeline' 'exec' :)
         and $state[$p:lk] != 3510                          (: 'step' 'exec' :)
         and $state[$p:lk] != 3630                          (: 'pipeline' 'filter' :)
         and $state[$p:lk] != 3638                          (: 'step' 'filter' :)
         and $state[$p:lk] != 3758                          (: 'pipeline' 'for-each' :)
         and $state[$p:lk] != 3766                          (: 'step' 'for-each' :)
         and $state[$p:lk] != 4014                          (: 'pipeline' 'hash' :)
         and $state[$p:lk] != 4022                          (: 'step' 'hash' :)
         and $state[$p:lk] != 4142                          (: 'pipeline' 'http-request' :)
         and $state[$p:lk] != 4150                          (: 'step' 'http-request' :)
         and $state[$p:lk] != 4270                          (: 'pipeline' 'identity' :)
         and $state[$p:lk] != 4278                          (: 'step' 'identity' :)
         and $state[$p:lk] != 4398                          (: 'pipeline' 'if' :)
         and $state[$p:lk] != 4406                          (: 'step' 'if' :)
         and $state[$p:lk] != 4526                          (: 'pipeline' 'insert' :)
         and $state[$p:lk] != 4534                          (: 'step' 'insert' :)
         and $state[$p:lk] != 4782                          (: 'pipeline' 'label-elements' :)
         and $state[$p:lk] != 4790                          (: 'step' 'label-elements' :)
         and $state[$p:lk] != 4910                          (: 'pipeline' 'library' :)
         and $state[$p:lk] != 4918                          (: 'step' 'library' :)
         and $state[$p:lk] != 5038                          (: 'pipeline' 'load' :)
         and $state[$p:lk] != 5046                          (: 'step' 'load' :)
         and $state[$p:lk] != 5166                          (: 'pipeline' 'make-absolute-uris' :)
         and $state[$p:lk] != 5174                          (: 'step' 'make-absolute-uris' :)
         and $state[$p:lk] != 5294                          (: 'pipeline' 'namespace' :)
         and $state[$p:lk] != 5302                          (: 'step' 'namespace' :)
         and $state[$p:lk] != 5422                          (: 'pipeline' 'namespace-rename' :)
         and $state[$p:lk] != 5430                          (: 'step' 'namespace-rename' :)
         and $state[$p:lk] != 5550                          (: 'pipeline' 'pack' :)
         and $state[$p:lk] != 5558                          (: 'step' 'pack' :)
         and $state[$p:lk] != 5678                          (: 'pipeline' 'parameters' :)
         and $state[$p:lk] != 5686                          (: 'step' 'parameters' :)
         and $state[$p:lk] != 5934                          (: 'pipeline' 'pipeline' :)
         and $state[$p:lk] != 5942                          (: 'step' 'pipeline' :)
         and $state[$p:lk] != 6190                          (: 'pipeline' 'rename' :)
         and $state[$p:lk] != 6198                          (: 'step' 'rename' :)
         and $state[$p:lk] != 6318                          (: 'pipeline' 'replace' :)
         and $state[$p:lk] != 6326                          (: 'step' 'replace' :)
         and $state[$p:lk] != 6574                          (: 'pipeline' 'set-attributes' :)
         and $state[$p:lk] != 6582                          (: 'step' 'set-attributes' :)
         and $state[$p:lk] != 6702                          (: 'pipeline' 'sink' :)
         and $state[$p:lk] != 6710                          (: 'step' 'sink' :)
         and $state[$p:lk] != 6830                          (: 'pipeline' 'split-sequence' :)
         and $state[$p:lk] != 6838                          (: 'step' 'split-sequence' :)
         and $state[$p:lk] != 6958                          (: 'pipeline' 'step' :)
         and $state[$p:lk] != 6966                          (: 'step' 'step' :)
         and $state[$p:lk] != 7086                          (: 'pipeline' 'store' :)
         and $state[$p:lk] != 7094                          (: 'step' 'store' :)
         and $state[$p:lk] != 7214                          (: 'pipeline' 'string-replace' :)
         and $state[$p:lk] != 7222                          (: 'step' 'string-replace' :)
         and $state[$p:lk] != 7342                          (: 'pipeline' 'try' :)
         and $state[$p:lk] != 7350                          (: 'step' 'try' :)
         and $state[$p:lk] != 7470                          (: 'pipeline' 'unescape-markup' :)
         and $state[$p:lk] != 7478                          (: 'step' 'unescape-markup' :)
         and $state[$p:lk] != 7598                          (: 'pipeline' 'unwrap' :)
         and $state[$p:lk] != 7606                          (: 'step' 'unwrap' :)
         and $state[$p:lk] != 7726                          (: 'pipeline' 'uuid' :)
         and $state[$p:lk] != 7734                          (: 'step' 'uuid' :)
         and $state[$p:lk] != 7854                          (: 'pipeline' 'validate-with-relax-ng' :)
         and $state[$p:lk] != 7862                          (: 'step' 'validate-with-relax-ng' :)
         and $state[$p:lk] != 7982                          (: 'pipeline' 'validate-with-schematron' :)
         and $state[$p:lk] != 7990                          (: 'step' 'validate-with-schematron' :)
         and $state[$p:lk] != 8110                          (: 'pipeline' 'validate-with-xml-schema' :)
         and $state[$p:lk] != 8118                          (: 'step' 'validate-with-xml-schema' :)
         and $state[$p:lk] != 8238                          (: 'pipeline' 'variable' :)
         and $state[$p:lk] != 8246                          (: 'step' 'variable' :)
         and $state[$p:lk] != 8366                          (: 'pipeline' 'viewport' :)
         and $state[$p:lk] != 8374                          (: 'step' 'viewport' :)
         and $state[$p:lk] != 8494                          (: 'pipeline' 'wrap' :)
         and $state[$p:lk] != 8502                          (: 'step' 'wrap' :)
         and $state[$p:lk] != 8622                          (: 'pipeline' 'wrap-sequence' :)
         and $state[$p:lk] != 8630                          (: 'step' 'wrap-sequence' :)
         and $state[$p:lk] != 8750                          (: 'pipeline' 'www-form-urldecode' :)
         and $state[$p:lk] != 8758                          (: 'step' 'www-form-urldecode' :)
         and $state[$p:lk] != 8878                          (: 'pipeline' 'www-form-urlencode' :)
         and $state[$p:lk] != 8886                          (: 'step' 'www-form-urlencode' :)
         and $state[$p:lk] != 9006                          (: 'pipeline' 'xinclude' :)
         and $state[$p:lk] != 9014                          (: 'step' 'xinclude' :)
         and $state[$p:lk] != 9134                          (: 'pipeline' 'xquery' :)
         and $state[$p:lk] != 9142                          (: 'step' 'xquery' :)
         and $state[$p:lk] != 9262                          (: 'pipeline' 'xsl-formatter' :)
         and $state[$p:lk] != 9270                          (: 'step' 'xsl-formatter' :)
         and $state[$p:lk] != 9390                          (: 'pipeline' 'xslt' :)
         and $state[$p:lk] != 9398                          (: 'step' 'xslt' :)
         and $state[$p:lk] != 9518                          (: 'pipeline' '{' :)
         and $state[$p:lk] != 9526                          (: 'step' '{' :)
         and $state[$p:lk] != 755205                        (: NCName^Token '=' 'pipeline' :)
         and $state[$p:lk] != 755214                        (: 'add-attribute' '=' 'pipeline' :)
         and $state[$p:lk] != 755215                        (: 'add-xml-base' '=' 'pipeline' :)
         and $state[$p:lk] != 755217                        (: 'compare' '=' 'pipeline' :)
         and $state[$p:lk] != 755218                        (: 'count' '=' 'pipeline' :)
         and $state[$p:lk] != 755219                        (: 'default' '=' 'pipeline' :)
         and $state[$p:lk] != 755220                        (: 'delete' '=' 'pipeline' :)
         and $state[$p:lk] != 755221                        (: 'directory-list' '=' 'pipeline' :)
         and $state[$p:lk] != 755223                        (: 'else' '=' 'pipeline' :)
         and $state[$p:lk] != 755225                        (: 'error' '=' 'pipeline' :)
         and $state[$p:lk] != 755226                        (: 'escape-markup' '=' 'pipeline' :)
         and $state[$p:lk] != 755227                        (: 'exec' '=' 'pipeline' :)
         and $state[$p:lk] != 755228                        (: 'filter' '=' 'pipeline' :)
         and $state[$p:lk] != 755229                        (: 'for-each' '=' 'pipeline' :)
         and $state[$p:lk] != 755231                        (: 'hash' '=' 'pipeline' :)
         and $state[$p:lk] != 755232                        (: 'http-request' '=' 'pipeline' :)
         and $state[$p:lk] != 755233                        (: 'identity' '=' 'pipeline' :)
         and $state[$p:lk] != 755234                        (: 'if' '=' 'pipeline' :)
         and $state[$p:lk] != 755235                        (: 'insert' '=' 'pipeline' :)
         and $state[$p:lk] != 755237                        (: 'label-elements' '=' 'pipeline' :)
         and $state[$p:lk] != 755238                        (: 'library' '=' 'pipeline' :)
         and $state[$p:lk] != 755239                        (: 'load' '=' 'pipeline' :)
         and $state[$p:lk] != 755240                        (: 'make-absolute-uris' '=' 'pipeline' :)
         and $state[$p:lk] != 755241                        (: 'namespace' '=' 'pipeline' :)
         and $state[$p:lk] != 755242                        (: 'namespace-rename' '=' 'pipeline' :)
         and $state[$p:lk] != 755243                        (: 'pack' '=' 'pipeline' :)
         and $state[$p:lk] != 755244                        (: 'parameters' '=' 'pipeline' :)
         and $state[$p:lk] != 755246                        (: 'pipeline' '=' 'pipeline' :)
         and $state[$p:lk] != 755248                        (: 'rename' '=' 'pipeline' :)
         and $state[$p:lk] != 755249                        (: 'replace' '=' 'pipeline' :)
         and $state[$p:lk] != 755251                        (: 'set-attributes' '=' 'pipeline' :)
         and $state[$p:lk] != 755252                        (: 'sink' '=' 'pipeline' :)
         and $state[$p:lk] != 755253                        (: 'split-sequence' '=' 'pipeline' :)
         and $state[$p:lk] != 755254                        (: 'step' '=' 'pipeline' :)
         and $state[$p:lk] != 755255                        (: 'store' '=' 'pipeline' :)
         and $state[$p:lk] != 755256                        (: 'string-replace' '=' 'pipeline' :)
         and $state[$p:lk] != 755257                        (: 'try' '=' 'pipeline' :)
         and $state[$p:lk] != 755258                        (: 'unescape-markup' '=' 'pipeline' :)
         and $state[$p:lk] != 755259                        (: 'unwrap' '=' 'pipeline' :)
         and $state[$p:lk] != 755260                        (: 'uuid' '=' 'pipeline' :)
         and $state[$p:lk] != 755261                        (: 'validate-with-relax-ng' '=' 'pipeline' :)
         and $state[$p:lk] != 755262                        (: 'validate-with-schematron' '=' 'pipeline' :)
         and $state[$p:lk] != 755263                        (: 'validate-with-xml-schema' '=' 'pipeline' :)
         and $state[$p:lk] != 755264                        (: 'variable' '=' 'pipeline' :)
         and $state[$p:lk] != 755265                        (: 'viewport' '=' 'pipeline' :)
         and $state[$p:lk] != 755266                        (: 'wrap' '=' 'pipeline' :)
         and $state[$p:lk] != 755267                        (: 'wrap-sequence' '=' 'pipeline' :)
         and $state[$p:lk] != 755268                        (: 'www-form-urldecode' '=' 'pipeline' :)
         and $state[$p:lk] != 755269                        (: 'www-form-urlencode' '=' 'pipeline' :)
         and $state[$p:lk] != 755270                        (: 'xinclude' '=' 'pipeline' :)
         and $state[$p:lk] != 755271                        (: 'xquery' '=' 'pipeline' :)
         and $state[$p:lk] != 755272                        (: 'xsl-formatter' '=' 'pipeline' :)
         and $state[$p:lk] != 755273                        (: 'xslt' '=' 'pipeline' :)
         and $state[$p:lk] != 886277                        (: NCName^Token '=' 'step' :)
         and $state[$p:lk] != 886286                        (: 'add-attribute' '=' 'step' :)
         and $state[$p:lk] != 886287                        (: 'add-xml-base' '=' 'step' :)
         and $state[$p:lk] != 886289                        (: 'compare' '=' 'step' :)
         and $state[$p:lk] != 886290                        (: 'count' '=' 'step' :)
         and $state[$p:lk] != 886291                        (: 'default' '=' 'step' :)
         and $state[$p:lk] != 886292                        (: 'delete' '=' 'step' :)
         and $state[$p:lk] != 886293                        (: 'directory-list' '=' 'step' :)
         and $state[$p:lk] != 886295                        (: 'else' '=' 'step' :)
         and $state[$p:lk] != 886297                        (: 'error' '=' 'step' :)
         and $state[$p:lk] != 886298                        (: 'escape-markup' '=' 'step' :)
         and $state[$p:lk] != 886299                        (: 'exec' '=' 'step' :)
         and $state[$p:lk] != 886300                        (: 'filter' '=' 'step' :)
         and $state[$p:lk] != 886301                        (: 'for-each' '=' 'step' :)
         and $state[$p:lk] != 886303                        (: 'hash' '=' 'step' :)
         and $state[$p:lk] != 886304                        (: 'http-request' '=' 'step' :)
         and $state[$p:lk] != 886305                        (: 'identity' '=' 'step' :)
         and $state[$p:lk] != 886306                        (: 'if' '=' 'step' :)
         and $state[$p:lk] != 886307                        (: 'insert' '=' 'step' :)
         and $state[$p:lk] != 886309                        (: 'label-elements' '=' 'step' :)
         and $state[$p:lk] != 886310                        (: 'library' '=' 'step' :)
         and $state[$p:lk] != 886311                        (: 'load' '=' 'step' :)
         and $state[$p:lk] != 886312                        (: 'make-absolute-uris' '=' 'step' :)
         and $state[$p:lk] != 886313                        (: 'namespace' '=' 'step' :)
         and $state[$p:lk] != 886314                        (: 'namespace-rename' '=' 'step' :)
         and $state[$p:lk] != 886315                        (: 'pack' '=' 'step' :)
         and $state[$p:lk] != 886316                        (: 'parameters' '=' 'step' :)
         and $state[$p:lk] != 886318                        (: 'pipeline' '=' 'step' :)
         and $state[$p:lk] != 886320                        (: 'rename' '=' 'step' :)
         and $state[$p:lk] != 886321                        (: 'replace' '=' 'step' :)
         and $state[$p:lk] != 886323                        (: 'set-attributes' '=' 'step' :)
         and $state[$p:lk] != 886324                        (: 'sink' '=' 'step' :)
         and $state[$p:lk] != 886325                        (: 'split-sequence' '=' 'step' :)
         and $state[$p:lk] != 886326                        (: 'step' '=' 'step' :)
         and $state[$p:lk] != 886327                        (: 'store' '=' 'step' :)
         and $state[$p:lk] != 886328                        (: 'string-replace' '=' 'step' :)
         and $state[$p:lk] != 886329                        (: 'try' '=' 'step' :)
         and $state[$p:lk] != 886330                        (: 'unescape-markup' '=' 'step' :)
         and $state[$p:lk] != 886331                        (: 'unwrap' '=' 'step' :)
         and $state[$p:lk] != 886332                        (: 'uuid' '=' 'step' :)
         and $state[$p:lk] != 886333                        (: 'validate-with-relax-ng' '=' 'step' :)
         and $state[$p:lk] != 886334                        (: 'validate-with-schematron' '=' 'step' :)
         and $state[$p:lk] != 886335                        (: 'validate-with-xml-schema' '=' 'step' :)
         and $state[$p:lk] != 886336                        (: 'variable' '=' 'step' :)
         and $state[$p:lk] != 886337                        (: 'viewport' '=' 'step' :)
         and $state[$p:lk] != 886338                        (: 'wrap' '=' 'step' :)
         and $state[$p:lk] != 886339                        (: 'wrap-sequence' '=' 'step' :)
         and $state[$p:lk] != 886340                        (: 'www-form-urldecode' '=' 'step' :)
         and $state[$p:lk] != 886341                        (: 'www-form-urlencode' '=' 'step' :)
         and $state[$p:lk] != 886342                        (: 'xinclude' '=' 'step' :)
         and $state[$p:lk] != 886343                        (: 'xquery' '=' 'step' :)
         and $state[$p:lk] != 886344                        (: 'xsl-formatter' '=' 'step' :)
         and $state[$p:lk] != 886345) then                  (: 'xslt' '=' 'step' :)
      let $state := p:memoized($state, 0)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state := p:try-declareStep($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, -1, 0)
            else
              p:memoize($backtrack, $state, -2, 0)
    else
      $state
  let $state :=
    if ($state[$p:lk] = -1
     or $state[$p:lk] = 694                                 (: 'step' NCName^Token :)
     or $state[$p:lk] = 950                                 (: 'step' '(' :)
     or $state[$p:lk] = 1846                                (: 'step' 'add-attribute' :)
     or $state[$p:lk] = 1974                                (: 'step' 'add-xml-base' :)
     or $state[$p:lk] = 2230                                (: 'step' 'compare' :)
     or $state[$p:lk] = 2358                                (: 'step' 'count' :)
     or $state[$p:lk] = 2486                                (: 'step' 'default' :)
     or $state[$p:lk] = 2614                                (: 'step' 'delete' :)
     or $state[$p:lk] = 2742                                (: 'step' 'directory-list' :)
     or $state[$p:lk] = 2998                                (: 'step' 'else' :)
     or $state[$p:lk] = 3254                                (: 'step' 'error' :)
     or $state[$p:lk] = 3382                                (: 'step' 'escape-markup' :)
     or $state[$p:lk] = 3510                                (: 'step' 'exec' :)
     or $state[$p:lk] = 3638                                (: 'step' 'filter' :)
     or $state[$p:lk] = 3766                                (: 'step' 'for-each' :)
     or $state[$p:lk] = 4022                                (: 'step' 'hash' :)
     or $state[$p:lk] = 4150                                (: 'step' 'http-request' :)
     or $state[$p:lk] = 4278                                (: 'step' 'identity' :)
     or $state[$p:lk] = 4406                                (: 'step' 'if' :)
     or $state[$p:lk] = 4534                                (: 'step' 'insert' :)
     or $state[$p:lk] = 4790                                (: 'step' 'label-elements' :)
     or $state[$p:lk] = 4918                                (: 'step' 'library' :)
     or $state[$p:lk] = 5046                                (: 'step' 'load' :)
     or $state[$p:lk] = 5174                                (: 'step' 'make-absolute-uris' :)
     or $state[$p:lk] = 5302                                (: 'step' 'namespace' :)
     or $state[$p:lk] = 5430                                (: 'step' 'namespace-rename' :)
     or $state[$p:lk] = 5558                                (: 'step' 'pack' :)
     or $state[$p:lk] = 5686                                (: 'step' 'parameters' :)
     or $state[$p:lk] = 5942                                (: 'step' 'pipeline' :)
     or $state[$p:lk] = 6198                                (: 'step' 'rename' :)
     or $state[$p:lk] = 6326                                (: 'step' 'replace' :)
     or $state[$p:lk] = 6582                                (: 'step' 'set-attributes' :)
     or $state[$p:lk] = 6710                                (: 'step' 'sink' :)
     or $state[$p:lk] = 6838                                (: 'step' 'split-sequence' :)
     or $state[$p:lk] = 6966                                (: 'step' 'step' :)
     or $state[$p:lk] = 7094                                (: 'step' 'store' :)
     or $state[$p:lk] = 7222                                (: 'step' 'string-replace' :)
     or $state[$p:lk] = 7350                                (: 'step' 'try' :)
     or $state[$p:lk] = 7478                                (: 'step' 'unescape-markup' :)
     or $state[$p:lk] = 7606                                (: 'step' 'unwrap' :)
     or $state[$p:lk] = 7734                                (: 'step' 'uuid' :)
     or $state[$p:lk] = 7862                                (: 'step' 'validate-with-relax-ng' :)
     or $state[$p:lk] = 7990                                (: 'step' 'validate-with-schematron' :)
     or $state[$p:lk] = 8118                                (: 'step' 'validate-with-xml-schema' :)
     or $state[$p:lk] = 8246                                (: 'step' 'variable' :)
     or $state[$p:lk] = 8374                                (: 'step' 'viewport' :)
     or $state[$p:lk] = 8502                                (: 'step' 'wrap' :)
     or $state[$p:lk] = 8630                                (: 'step' 'wrap-sequence' :)
     or $state[$p:lk] = 8758                                (: 'step' 'www-form-urldecode' :)
     or $state[$p:lk] = 8886                                (: 'step' 'www-form-urlencode' :)
     or $state[$p:lk] = 9014                                (: 'step' 'xinclude' :)
     or $state[$p:lk] = 9142                                (: 'step' 'xquery' :)
     or $state[$p:lk] = 9270                                (: 'step' 'xsl-formatter' :)
     or $state[$p:lk] = 9398                                (: 'step' 'xslt' :)
     or $state[$p:lk] = 9526                                (: 'step' '{' :)
     or $state[$p:lk] = 886277                              (: NCName^Token '=' 'step' :)
     or $state[$p:lk] = 886286                              (: 'add-attribute' '=' 'step' :)
     or $state[$p:lk] = 886287                              (: 'add-xml-base' '=' 'step' :)
     or $state[$p:lk] = 886289                              (: 'compare' '=' 'step' :)
     or $state[$p:lk] = 886290                              (: 'count' '=' 'step' :)
     or $state[$p:lk] = 886291                              (: 'default' '=' 'step' :)
     or $state[$p:lk] = 886292                              (: 'delete' '=' 'step' :)
     or $state[$p:lk] = 886293                              (: 'directory-list' '=' 'step' :)
     or $state[$p:lk] = 886295                              (: 'else' '=' 'step' :)
     or $state[$p:lk] = 886297                              (: 'error' '=' 'step' :)
     or $state[$p:lk] = 886298                              (: 'escape-markup' '=' 'step' :)
     or $state[$p:lk] = 886299                              (: 'exec' '=' 'step' :)
     or $state[$p:lk] = 886300                              (: 'filter' '=' 'step' :)
     or $state[$p:lk] = 886301                              (: 'for-each' '=' 'step' :)
     or $state[$p:lk] = 886303                              (: 'hash' '=' 'step' :)
     or $state[$p:lk] = 886304                              (: 'http-request' '=' 'step' :)
     or $state[$p:lk] = 886305                              (: 'identity' '=' 'step' :)
     or $state[$p:lk] = 886306                              (: 'if' '=' 'step' :)
     or $state[$p:lk] = 886307                              (: 'insert' '=' 'step' :)
     or $state[$p:lk] = 886309                              (: 'label-elements' '=' 'step' :)
     or $state[$p:lk] = 886310                              (: 'library' '=' 'step' :)
     or $state[$p:lk] = 886311                              (: 'load' '=' 'step' :)
     or $state[$p:lk] = 886312                              (: 'make-absolute-uris' '=' 'step' :)
     or $state[$p:lk] = 886313                              (: 'namespace' '=' 'step' :)
     or $state[$p:lk] = 886314                              (: 'namespace-rename' '=' 'step' :)
     or $state[$p:lk] = 886315                              (: 'pack' '=' 'step' :)
     or $state[$p:lk] = 886316                              (: 'parameters' '=' 'step' :)
     or $state[$p:lk] = 886318                              (: 'pipeline' '=' 'step' :)
     or $state[$p:lk] = 886320                              (: 'rename' '=' 'step' :)
     or $state[$p:lk] = 886321                              (: 'replace' '=' 'step' :)
     or $state[$p:lk] = 886323                              (: 'set-attributes' '=' 'step' :)
     or $state[$p:lk] = 886324                              (: 'sink' '=' 'step' :)
     or $state[$p:lk] = 886325                              (: 'split-sequence' '=' 'step' :)
     or $state[$p:lk] = 886326                              (: 'step' '=' 'step' :)
     or $state[$p:lk] = 886327                              (: 'store' '=' 'step' :)
     or $state[$p:lk] = 886328                              (: 'string-replace' '=' 'step' :)
     or $state[$p:lk] = 886329                              (: 'try' '=' 'step' :)
     or $state[$p:lk] = 886330                              (: 'unescape-markup' '=' 'step' :)
     or $state[$p:lk] = 886331                              (: 'unwrap' '=' 'step' :)
     or $state[$p:lk] = 886332                              (: 'uuid' '=' 'step' :)
     or $state[$p:lk] = 886333                              (: 'validate-with-relax-ng' '=' 'step' :)
     or $state[$p:lk] = 886334                              (: 'validate-with-schematron' '=' 'step' :)
     or $state[$p:lk] = 886335                              (: 'validate-with-xml-schema' '=' 'step' :)
     or $state[$p:lk] = 886336                              (: 'variable' '=' 'step' :)
     or $state[$p:lk] = 886337                              (: 'viewport' '=' 'step' :)
     or $state[$p:lk] = 886338                              (: 'wrap' '=' 'step' :)
     or $state[$p:lk] = 886339                              (: 'wrap-sequence' '=' 'step' :)
     or $state[$p:lk] = 886340                              (: 'www-form-urldecode' '=' 'step' :)
     or $state[$p:lk] = 886341                              (: 'www-form-urlencode' '=' 'step' :)
     or $state[$p:lk] = 886342                              (: 'xinclude' '=' 'step' :)
     or $state[$p:lk] = 886343                              (: 'xquery' '=' 'step' :)
     or $state[$p:lk] = 886344                              (: 'xsl-formatter' '=' 'step' :)
     or $state[$p:lk] = 886345) then                        (: 'xslt' '=' 'step' :)
      let $state := p:parse-declareStep($input, $state)
      return $state
    else if ($state[$p:lk] = 294) then                      (: 'library' EOF :)
      let $state := p:parse-library($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-pipeline($input, $state)
      return $state
  let $state := p:lookahead1W(5, $input, $state)            (: Whitespace | EOF :)
  let $state := p:shift(2, $input, $state)                  (: EOF :)
  return p:reduce($state, "document", $count)
};

(:~
 : Parse start symbol document from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-document($s as xs:string) as item()*
{
  let $state := p:parse-document($s, (0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, false(), <memo/>))
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

p:parse-document(string(.))
